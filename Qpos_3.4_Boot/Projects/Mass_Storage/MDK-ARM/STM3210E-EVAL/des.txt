; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\des.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\des.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\des.crf ..\src\des.c]
                          THUMB

                          AREA ||i.DES3_App||, CODE, READONLY, ALIGN=1

                  DES3_App PROC
;;;747    
;;;748    int DES3_App(unsigned char *pucHexKey, unsigned char ucMode, unsigned char *pIV,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;749    			unsigned char *pucIn, unsigned int* puiLen, unsigned char *pucOut)
;;;750    {
000004  f5ad7d05          SUB      sp,sp,#0x214
000008  4681              MOV      r9,r0
00000a  468a              MOV      r10,r1
00000c  469b              MOV      r11,r3
00000e  9f93              LDR      r7,[sp,#0x24c]
000010  9e92              LDR      r6,[sp,#0x248]
;;;751    	des3_context	h3Des;
;;;752    	des_context	hDes;
;;;753    	unsigned char mode;
;;;754    	unsigned char *pucTemp;
;;;755    	int iLen;
;;;756    	if(pucHexKey == NULL || pucIn == NULL || puiLen == NULL || pucOut == NULL)
000012  f1b90f00          CMP      r9,#0
000016  d004              BEQ      |L1.34|
000018  f1bb0f00          CMP      r11,#0
00001c  d001              BEQ      |L1.34|
00001e  b106              CBZ      r6,|L1.34|
000020  b92f              CBNZ     r7,|L1.46|
                  |L1.34|
;;;757    	{
;;;758    		return -1;
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L1.38|
;;;759    	}
;;;760    
;;;761    #if 0
;;;762    	pucTemp = pucIn;
;;;763    	iLen = *puiLen;
;;;764    	des2key (pucHexKey, (short)ucMode);	 /*16 byte key*/
;;;765    	while(iLen >= 8)
;;;766    	{
;;;767    		Ddes(pucTemp, pucOut);
;;;768    		pucTemp += 8;
;;;769    		pucOut += 8;
;;;770    		iLen -= 8; 
;;;771    	}
;;;772    
;;;773    	if(iLen > 0)
;;;774    	{	/*Make data length multiples of 8, add 0x00 to the  end of data*/
;;;775    //		pucTemp[iLen] = 0x80;
;;;776    //		memset(pucTemp + iLen + 1, 0x00, 8 - iLen - 1);
;;;777    		memset(pucTemp + iLen, 0x00, 8 - iLen);
;;;778    		Ddes(pucTemp, pucOut);
;;;779    		*puiLen += 8 - iLen;
;;;780    	}
;;;781    	else{}
;;;782    #else
;;;783    	pucTemp = pucIn;
;;;784    	iLen = *puiLen;
;;;785    
;;;786    	if(ucMode)
;;;787    	{
;;;788    		des3_set2key_dec(&h3Des, pucHexKey);
;;;789    	}
;;;790    	else
;;;791    	{
;;;792    		des3_set2key_enc(&h3Des, pucHexKey);
;;;793    	}
;;;794    
;;;795    	if(pIV == NULL)
;;;796    	{
;;;797    		while(iLen >= 8)
;;;798    		{
;;;799    			des3_crypt_ecb(&h3Des, pucTemp, pucOut);
;;;800    			pucTemp += 8;
;;;801    			pucOut += 8;
;;;802    			iLen -= 8; 
;;;803    		}
;;;804    
;;;805    		if(iLen > 0)
;;;806    		{	/*Make data length multiples of 8, add 0x00 to the  end of data*/
;;;807    	//		pucTemp[iLen] = 0x80;
;;;808    	//		memset(pucTemp + iLen + 1, 0x00, 8 - iLen - 1);
;;;809    			memset(pucTemp + iLen, 0x00, 8 - iLen);
;;;810    			des3_crypt_ecb(&h3Des, pucTemp, pucOut);
;;;811    			*puiLen += 8 - iLen;
;;;812    		}
;;;813    	}
;;;814    	else
;;;815    	{
;;;816    
;;;817    		if(ucMode)
;;;818    		{
;;;819    			des_setkey_dec(&hDes, pucHexKey);
;;;820    			mode = DES_DECRYPT;
;;;821    		}
;;;822    		else
;;;823    		{
;;;824    			des_setkey_enc(&hDes, pucHexKey);
;;;825    			mode = DES_ENCRYPT;
;;;826    		}
;;;827    
;;;828    		if(iLen % 8)
;;;829    		{
;;;830    			memset(pucTemp + iLen, 0x00, (8-iLen % 8));
;;;831    			iLen = iLen + (8-iLen % 8);
;;;832    		}
;;;833    		
;;;834                         
;;;835    		des_crypt_cbc(&hDes, mode, iLen, pIV, pucTemp, pucOut);
;;;836    		
;;;837    	}
;;;838    
;;;839    	
;;;840    
;;;841    #endif
;;;842    	
;;;843    	return 0;
;;;844    } 
000026  f50d7d09          ADD      sp,sp,#0x224
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.46|
00002e  465d              MOV      r5,r11                ;783
000030  6834              LDR      r4,[r6,#0]            ;784
000032  f1ba0f00          CMP      r10,#0                ;786
000036  d004              BEQ      |L1.66|
000038  4649              MOV      r1,r9                 ;788
00003a  a824              ADD      r0,sp,#0x90           ;788
00003c  f7fffffe          BL       des3_set2key_dec
000040  e003              B        |L1.74|
                  |L1.66|
000042  4649              MOV      r1,r9                 ;792
000044  a824              ADD      r0,sp,#0x90           ;792
000046  f7fffffe          BL       des3_set2key_enc
                  |L1.74|
00004a  9887              LDR      r0,[sp,#0x21c]        ;795
00004c  b9e0              CBNZ     r0,|L1.136|
00004e  e007              B        |L1.96|
                  |L1.80|
000050  463a              MOV      r2,r7                 ;799
000052  4629              MOV      r1,r5                 ;799
000054  a824              ADD      r0,sp,#0x90           ;799
000056  f7fffffe          BL       des3_crypt_ecb
00005a  3508              ADDS     r5,r5,#8              ;800
00005c  3708              ADDS     r7,r7,#8              ;801
00005e  3c08              SUBS     r4,r4,#8              ;802
                  |L1.96|
000060  2c08              CMP      r4,#8                 ;797
000062  daf5              BGE      |L1.80|
000064  2c00              CMP      r4,#0                 ;805
000066  dd44              BLE      |L1.242|
000068  f1c40108          RSB      r1,r4,#8              ;809
00006c  1928              ADDS     r0,r5,r4              ;809
00006e  f7fffffe          BL       __aeabi_memclr
000072  463a              MOV      r2,r7                 ;810
000074  4629              MOV      r1,r5                 ;810
000076  a824              ADD      r0,sp,#0x90           ;810
000078  f7fffffe          BL       des3_crypt_ecb
00007c  f1c40108          RSB      r1,r4,#8              ;811
000080  6830              LDR      r0,[r6,#0]            ;811
000082  4408              ADD      r0,r0,r1              ;811
000084  6030              STR      r0,[r6,#0]            ;811
000086  e034              B        |L1.242|
                  |L1.136|
000088  f1ba0f00          CMP      r10,#0                ;817
00008c  d006              BEQ      |L1.156|
00008e  4649              MOV      r1,r9                 ;819
000090  a803              ADD      r0,sp,#0xc            ;819
000092  f7fffffe          BL       des_setkey_dec
000096  2000              MOVS     r0,#0                 ;820
000098  9002              STR      r0,[sp,#8]            ;820
00009a  e005              B        |L1.168|
                  |L1.156|
00009c  4649              MOV      r1,r9                 ;824
00009e  a803              ADD      r0,sp,#0xc            ;824
0000a0  f7fffffe          BL       des_setkey_enc
0000a4  2001              MOVS     r0,#1                 ;825
0000a6  9002              STR      r0,[sp,#8]            ;825
                  |L1.168|
0000a8  17e1              ASRS     r1,r4,#31             ;828
0000aa  eb047151          ADD      r1,r4,r1,LSR #29      ;828
0000ae  10c9              ASRS     r1,r1,#3              ;828
0000b0  eba401c1          SUB      r1,r4,r1,LSL #3       ;828
0000b4  b1a9              CBZ      r1,|L1.226|
0000b6  46a0              MOV      r8,r4                 ;830
0000b8  17e2              ASRS     r2,r4,#31             ;830
0000ba  eb047252          ADD      r2,r4,r2,LSR #29      ;830
0000be  10d2              ASRS     r2,r2,#3              ;830
0000c0  eba402c2          SUB      r2,r4,r2,LSL #3       ;830
0000c4  f1c20108          RSB      r1,r2,#8              ;830
0000c8  1928              ADDS     r0,r5,r4              ;830
0000ca  f7fffffe          BL       __aeabi_memclr
0000ce  4620              MOV      r0,r4                 ;831
0000d0  17e1              ASRS     r1,r4,#31             ;831
0000d2  eb047151          ADD      r1,r4,r1,LSR #29      ;831
0000d6  10c9              ASRS     r1,r1,#3              ;831
0000d8  eba401c1          SUB      r1,r4,r1,LSL #3       ;831
0000dc  f1c10108          RSB      r1,r1,#8              ;831
0000e0  440c              ADD      r4,r4,r1              ;831
                  |L1.226|
0000e2  e9cd5700          STRD     r5,r7,[sp,#0]         ;835
0000e6  4622              MOV      r2,r4                 ;835
0000e8  a803              ADD      r0,sp,#0xc            ;835
0000ea  9b87              LDR      r3,[sp,#0x21c]        ;835
0000ec  9902              LDR      r1,[sp,#8]            ;835
0000ee  f7fffffe          BL       des_crypt_cbc
                  |L1.242|
0000f2  2000              MOVS     r0,#0                 ;843
0000f4  e797              B        |L1.38|
;;;845    
                          ENDP


                          AREA ||i.des3_crypt_cbc||, CODE, READONLY, ALIGN=1

                  des3_crypt_cbc PROC
;;;698     */
;;;699    int des3_crypt_cbc( des3_context *ctx,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;700                         int mode,
;;;701                         size_t length,
;;;702                         unsigned char iv[8],
;;;703                         const unsigned char *input,
;;;704                         unsigned char *output )
;;;705    {
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd850a          LDRD     r8,r5,[sp,#0x28]
;;;706        int i;
;;;707        unsigned char temp[8];
;;;708    
;;;709        if( length % 8 )
000010  f0060007          AND      r0,r6,#7
000014  b118              CBZ      r0,|L2.30|
;;;710            return( POLARSSL_ERR_DES_INVALID_INPUT_LENGTH );
000016  f06f0031          MVN      r0,#0x31
                  |L2.26|
;;;711    
;;;712        if( mode == DES_ENCRYPT )
;;;713        {
;;;714            while( length > 0 )
;;;715            {
;;;716                for( i = 0; i < 8; i++ )
;;;717                    output[i] = (unsigned char)( input[i] ^ iv[i] );
;;;718    
;;;719                des3_crypt_ecb( ctx, output, output );
;;;720                memcpy( iv, output, 8 );
;;;721    
;;;722                input  += 8;
;;;723                output += 8;
;;;724                length -= 8;
;;;725            }
;;;726        }
;;;727        else /* DES_DECRYPT */
;;;728        {
;;;729            while( length > 0 )
;;;730            {
;;;731                memcpy( temp, input, 8 );
;;;732                des3_crypt_ecb( ctx, input, output );
;;;733    
;;;734                for( i = 0; i < 8; i++ )
;;;735                    output[i] = (unsigned char)( output[i] ^ iv[i] );
;;;736    
;;;737                memcpy( iv, temp, 8 );
;;;738    
;;;739                input  += 8;
;;;740                output += 8;
;;;741                length -= 8;
;;;742            }
;;;743        }
;;;744    
;;;745        return( 0 );
;;;746    }
00001a  e8bd87fc          POP      {r2-r10,pc}
                  |L2.30|
00001e  f1b90f01          CMP      r9,#1                 ;712
000022  d11a              BNE      |L2.90|
000024  e016              B        |L2.84|
                  |L2.38|
000026  2400              MOVS     r4,#0                 ;716
000028  e005              B        |L2.54|
                  |L2.42|
00002a  f8180004          LDRB     r0,[r8,r4]            ;717
00002e  5d39              LDRB     r1,[r7,r4]            ;717
000030  4048              EORS     r0,r0,r1              ;717
000032  5528              STRB     r0,[r5,r4]            ;717
000034  1c64              ADDS     r4,r4,#1              ;716
                  |L2.54|
000036  2c08              CMP      r4,#8                 ;716
000038  dbf7              BLT      |L2.42|
00003a  462a              MOV      r2,r5                 ;719
00003c  4629              MOV      r1,r5                 ;719
00003e  4650              MOV      r0,r10                ;719
000040  f7fffffe          BL       des3_crypt_ecb
000044  6828              LDR      r0,[r5,#0]            ;720
000046  6038              STR      r0,[r7,#0]            ;720
000048  6868              LDR      r0,[r5,#4]            ;720
00004a  6078              STR      r0,[r7,#4]            ;720
00004c  f1080808          ADD      r8,r8,#8              ;722
000050  3508              ADDS     r5,r5,#8              ;723
000052  3e08              SUBS     r6,r6,#8              ;724
                  |L2.84|
000054  2e00              CMP      r6,#0                 ;714
000056  d1e6              BNE      |L2.38|
000058  e01e              B        |L2.152|
                  |L2.90|
00005a  e01b              B        |L2.148|
                  |L2.92|
00005c  f8d80000          LDR      r0,[r8,#0]            ;731
000060  9000              STR      r0,[sp,#0]            ;731
000062  f8d80004          LDR      r0,[r8,#4]            ;731
000066  9001              STR      r0,[sp,#4]            ;731
000068  462a              MOV      r2,r5                 ;732
00006a  4641              MOV      r1,r8                 ;732
00006c  4650              MOV      r0,r10                ;732
00006e  f7fffffe          BL       des3_crypt_ecb
000072  2400              MOVS     r4,#0                 ;734
000074  e004              B        |L2.128|
                  |L2.118|
000076  5d28              LDRB     r0,[r5,r4]            ;735
000078  5d39              LDRB     r1,[r7,r4]            ;735
00007a  4048              EORS     r0,r0,r1              ;735
00007c  5528              STRB     r0,[r5,r4]            ;735
00007e  1c64              ADDS     r4,r4,#1              ;734
                  |L2.128|
000080  2c08              CMP      r4,#8                 ;734
000082  dbf8              BLT      |L2.118|
000084  9800              LDR      r0,[sp,#0]            ;737
000086  6038              STR      r0,[r7,#0]            ;737
000088  9801              LDR      r0,[sp,#4]            ;737
00008a  6078              STR      r0,[r7,#4]            ;737
00008c  f1080808          ADD      r8,r8,#8              ;739
000090  3508              ADDS     r5,r5,#8              ;740
000092  3e08              SUBS     r6,r6,#8              ;741
                  |L2.148|
000094  2e00              CMP      r6,#0                 ;729
000096  d1e1              BNE      |L2.92|
                  |L2.152|
000098  2000              MOVS     r0,#0                 ;745
00009a  e7be              B        |L2.26|
;;;747    
                          ENDP


                          AREA ||i.des3_crypt_ecb||, CODE, READONLY, ALIGN=2

                  des3_crypt_ecb PROC
;;;655     */
;;;656    int des3_crypt_ecb( des3_context *ctx,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;657                         const unsigned char input[8],
;;;658                         unsigned char output[8] )
;;;659    {
000004  4684              MOV      r12,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;660        int i;
;;;661        uint32_t X, Y, T, *SK;
;;;662    
;;;663        SK = ctx->sk;
00000a  f10c0404          ADD      r4,r12,#4
;;;664    
;;;665        GET_UINT32_BE( X, input, 0 );
00000e  7828              LDRB     r0,[r5,#0]
000010  0600              LSLS     r0,r0,#24
000012  f8958001          LDRB     r8,[r5,#1]
000016  ea404008          ORR      r0,r0,r8,LSL #16
00001a  f8958002          LDRB     r8,[r5,#2]
00001e  ea402008          ORR      r0,r0,r8,LSL #8
000022  f8958003          LDRB     r8,[r5,#3]
000026  ea400208          ORR      r2,r0,r8
;;;666        GET_UINT32_BE( Y, input, 4 );
00002a  7928              LDRB     r0,[r5,#4]
00002c  0600              LSLS     r0,r0,#24
00002e  f8958005          LDRB     r8,[r5,#5]
000032  ea404008          ORR      r0,r0,r8,LSL #16
000036  f8958006          LDRB     r8,[r5,#6]
00003a  ea402008          ORR      r0,r0,r8,LSL #8
00003e  f8958007          LDRB     r8,[r5,#7]
000042  ea400308          ORR      r3,r0,r8
;;;667    
;;;668        DES_IP( X, Y );
000046  ea831012          EOR      r0,r3,r2,LSR #4
00004a  f000310f          AND      r1,r0,#0xf0f0f0f
00004e  404b              EORS     r3,r3,r1
000050  ea821201          EOR      r2,r2,r1,LSL #4
000054  ea834012          EOR      r0,r3,r2,LSR #16
000058  b281              UXTH     r1,r0
00005a  404b              EORS     r3,r3,r1
00005c  ea824201          EOR      r2,r2,r1,LSL #16
000060  ea820093          EOR      r0,r2,r3,LSR #2
000064  f0003133          AND      r1,r0,#0x33333333
000068  404a              EORS     r2,r2,r1
00006a  ea830381          EOR      r3,r3,r1,LSL #2
00006e  ea822013          EOR      r0,r2,r3,LSR #8
000072  f00011ff          AND      r1,r0,#0xff00ff
000076  404a              EORS     r2,r2,r1
000078  ea832301          EOR      r3,r3,r1,LSL #8
00007c  0058              LSLS     r0,r3,#1
00007e  ea4073d3          ORR      r3,r0,r3,LSR #31
000082  ea820003          EOR      r0,r2,r3
000086  f00031aa          AND      r1,r0,#0xaaaaaaaa
00008a  404b              EORS     r3,r3,r1
00008c  404a              EORS     r2,r2,r1
00008e  0050              LSLS     r0,r2,#1
000090  ea4072d2          ORR      r2,r0,r2,LSR #31
;;;669    
;;;670        for( i = 0; i < 8; i++ )
000094  2700              MOVS     r7,#0
000096  e090              B        |L3.442|
                  |L3.152|
;;;671        {
;;;672            DES_ROUND( Y, X );
000098  cc01              LDM      r4!,{r0}
00009a  ea800103          EOR      r1,r0,r3
00009e  f001003f          AND      r0,r1,#0x3f
0000a2  f8df83e4          LDR      r8,|L3.1160|
0000a6  f8580020          LDR      r0,[r8,r0,LSL #2]
0000aa  f8df83e0          LDR      r8,|L3.1164|
0000ae  f3c12905          UBFX     r9,r1,#8,#6
0000b2  f8588029          LDR      r8,[r8,r9,LSL #2]
0000b6  ea800008          EOR      r0,r0,r8
0000ba  f8df83d4          LDR      r8,|L3.1168|
0000be  f3c14905          UBFX     r9,r1,#16,#6
0000c2  f8588029          LDR      r8,[r8,r9,LSL #2]
0000c6  ea800008          EOR      r0,r0,r8
0000ca  f8df83c8          LDR      r8,|L3.1172|
0000ce  f3c16905          UBFX     r9,r1,#24,#6
0000d2  f8588029          LDR      r8,[r8,r9,LSL #2]
0000d6  ea800008          EOR      r0,r0,r8
0000da  4042              EORS     r2,r2,r0
0000dc  cc01              LDM      r4!,{r0}
0000de  ea4f7803          LSL      r8,r3,#28
0000e2  ea481813          ORR      r8,r8,r3,LSR #4
0000e6  ea800108          EOR      r1,r0,r8
0000ea  f001003f          AND      r0,r1,#0x3f
0000ee  f8df83a8          LDR      r8,|L3.1176|
0000f2  f8580020          LDR      r0,[r8,r0,LSL #2]
0000f6  f8df83a4          LDR      r8,|L3.1180|
0000fa  f3c12905          UBFX     r9,r1,#8,#6
0000fe  f8588029          LDR      r8,[r8,r9,LSL #2]
000102  ea800008          EOR      r0,r0,r8
000106  f8df8398          LDR      r8,|L3.1184|
00010a  f3c14905          UBFX     r9,r1,#16,#6
00010e  f8588029          LDR      r8,[r8,r9,LSL #2]
000112  ea800008          EOR      r0,r0,r8
000116  f8df838c          LDR      r8,|L3.1188|
00011a  f3c16905          UBFX     r9,r1,#24,#6
00011e  f8588029          LDR      r8,[r8,r9,LSL #2]
000122  ea800008          EOR      r0,r0,r8
000126  4042              EORS     r2,r2,r0
;;;673            DES_ROUND( X, Y );
000128  cc01              LDM      r4!,{r0}
00012a  ea800102          EOR      r1,r0,r2
00012e  f001003f          AND      r0,r1,#0x3f
000132  f8df8354          LDR      r8,|L3.1160|
000136  f8580020          LDR      r0,[r8,r0,LSL #2]
00013a  f8df8350          LDR      r8,|L3.1164|
00013e  f3c12905          UBFX     r9,r1,#8,#6
000142  f8588029          LDR      r8,[r8,r9,LSL #2]
000146  ea800008          EOR      r0,r0,r8
00014a  f8df8344          LDR      r8,|L3.1168|
00014e  f3c14905          UBFX     r9,r1,#16,#6
000152  f8588029          LDR      r8,[r8,r9,LSL #2]
000156  ea800008          EOR      r0,r0,r8
00015a  f8df8338          LDR      r8,|L3.1172|
00015e  f3c16905          UBFX     r9,r1,#24,#6
000162  f8588029          LDR      r8,[r8,r9,LSL #2]
000166  ea800008          EOR      r0,r0,r8
00016a  4043              EORS     r3,r3,r0
00016c  cc01              LDM      r4!,{r0}
00016e  ea4f7802          LSL      r8,r2,#28
000172  ea481812          ORR      r8,r8,r2,LSR #4
000176  ea800108          EOR      r1,r0,r8
00017a  f001003f          AND      r0,r1,#0x3f
00017e  f8df8318          LDR      r8,|L3.1176|
000182  f8580020          LDR      r0,[r8,r0,LSL #2]
000186  f8df8314          LDR      r8,|L3.1180|
00018a  f3c12905          UBFX     r9,r1,#8,#6
00018e  f8588029          LDR      r8,[r8,r9,LSL #2]
000192  ea800008          EOR      r0,r0,r8
000196  f8df8308          LDR      r8,|L3.1184|
00019a  f3c14905          UBFX     r9,r1,#16,#6
00019e  f8588029          LDR      r8,[r8,r9,LSL #2]
0001a2  ea800008          EOR      r0,r0,r8
0001a6  f8df82fc          LDR      r8,|L3.1188|
0001aa  f3c16905          UBFX     r9,r1,#24,#6
0001ae  f8588029          LDR      r8,[r8,r9,LSL #2]
0001b2  ea800008          EOR      r0,r0,r8
0001b6  4043              EORS     r3,r3,r0
0001b8  1c7f              ADDS     r7,r7,#1              ;670
                  |L3.442|
0001ba  2f08              CMP      r7,#8                 ;670
0001bc  f6ffaf6c          BLT      |L3.152|
;;;674        }
;;;675    
;;;676        for( i = 0; i < 8; i++ )
0001c0  2700              MOVS     r7,#0
0001c2  e090              B        |L3.742|
                  |L3.452|
;;;677        {
;;;678            DES_ROUND( X, Y );
0001c4  cc01              LDM      r4!,{r0}
0001c6  ea800102          EOR      r1,r0,r2
0001ca  f001003f          AND      r0,r1,#0x3f
0001ce  f8df82b8          LDR      r8,|L3.1160|
0001d2  f8580020          LDR      r0,[r8,r0,LSL #2]
0001d6  f8df82b4          LDR      r8,|L3.1164|
0001da  f3c12905          UBFX     r9,r1,#8,#6
0001de  f8588029          LDR      r8,[r8,r9,LSL #2]
0001e2  ea800008          EOR      r0,r0,r8
0001e6  f8df82a8          LDR      r8,|L3.1168|
0001ea  f3c14905          UBFX     r9,r1,#16,#6
0001ee  f8588029          LDR      r8,[r8,r9,LSL #2]
0001f2  ea800008          EOR      r0,r0,r8
0001f6  f8df829c          LDR      r8,|L3.1172|
0001fa  f3c16905          UBFX     r9,r1,#24,#6
0001fe  f8588029          LDR      r8,[r8,r9,LSL #2]
000202  ea800008          EOR      r0,r0,r8
000206  4043              EORS     r3,r3,r0
000208  cc01              LDM      r4!,{r0}
00020a  ea4f7802          LSL      r8,r2,#28
00020e  ea481812          ORR      r8,r8,r2,LSR #4
000212  ea800108          EOR      r1,r0,r8
000216  f001003f          AND      r0,r1,#0x3f
00021a  f8df827c          LDR      r8,|L3.1176|
00021e  f8580020          LDR      r0,[r8,r0,LSL #2]
000222  f8df8278          LDR      r8,|L3.1180|
000226  f3c12905          UBFX     r9,r1,#8,#6
00022a  f8588029          LDR      r8,[r8,r9,LSL #2]
00022e  ea800008          EOR      r0,r0,r8
000232  f8df826c          LDR      r8,|L3.1184|
000236  f3c14905          UBFX     r9,r1,#16,#6
00023a  f8588029          LDR      r8,[r8,r9,LSL #2]
00023e  ea800008          EOR      r0,r0,r8
000242  f8df8260          LDR      r8,|L3.1188|
000246  f3c16905          UBFX     r9,r1,#24,#6
00024a  f8588029          LDR      r8,[r8,r9,LSL #2]
00024e  ea800008          EOR      r0,r0,r8
000252  4043              EORS     r3,r3,r0
;;;679            DES_ROUND( Y, X );
000254  cc01              LDM      r4!,{r0}
000256  ea800103          EOR      r1,r0,r3
00025a  f001003f          AND      r0,r1,#0x3f
00025e  f8df8228          LDR      r8,|L3.1160|
000262  f8580020          LDR      r0,[r8,r0,LSL #2]
000266  f8df8224          LDR      r8,|L3.1164|
00026a  f3c12905          UBFX     r9,r1,#8,#6
00026e  f8588029          LDR      r8,[r8,r9,LSL #2]
000272  ea800008          EOR      r0,r0,r8
000276  f8df8218          LDR      r8,|L3.1168|
00027a  f3c14905          UBFX     r9,r1,#16,#6
00027e  f8588029          LDR      r8,[r8,r9,LSL #2]
000282  ea800008          EOR      r0,r0,r8
000286  f8df820c          LDR      r8,|L3.1172|
00028a  f3c16905          UBFX     r9,r1,#24,#6
00028e  f8588029          LDR      r8,[r8,r9,LSL #2]
000292  ea800008          EOR      r0,r0,r8
000296  4042              EORS     r2,r2,r0
000298  cc01              LDM      r4!,{r0}
00029a  ea4f7803          LSL      r8,r3,#28
00029e  ea481813          ORR      r8,r8,r3,LSR #4
0002a2  ea800108          EOR      r1,r0,r8
0002a6  f001003f          AND      r0,r1,#0x3f
0002aa  f8df81ec          LDR      r8,|L3.1176|
0002ae  f8580020          LDR      r0,[r8,r0,LSL #2]
0002b2  f8df81e8          LDR      r8,|L3.1180|
0002b6  f3c12905          UBFX     r9,r1,#8,#6
0002ba  f8588029          LDR      r8,[r8,r9,LSL #2]
0002be  ea800008          EOR      r0,r0,r8
0002c2  f8df81dc          LDR      r8,|L3.1184|
0002c6  f3c14905          UBFX     r9,r1,#16,#6
0002ca  f8588029          LDR      r8,[r8,r9,LSL #2]
0002ce  ea800008          EOR      r0,r0,r8
0002d2  f8df81d0          LDR      r8,|L3.1188|
0002d6  f3c16905          UBFX     r9,r1,#24,#6
0002da  f8588029          LDR      r8,[r8,r9,LSL #2]
0002de  ea800008          EOR      r0,r0,r8
0002e2  4042              EORS     r2,r2,r0
0002e4  1c7f              ADDS     r7,r7,#1              ;676
                  |L3.742|
0002e6  2f08              CMP      r7,#8                 ;676
0002e8  f6ffaf6c          BLT      |L3.452|
;;;680        }
;;;681    
;;;682        for( i = 0; i < 8; i++ )
0002ec  2700              MOVS     r7,#0
0002ee  e090              B        |L3.1042|
                  |L3.752|
;;;683        {
;;;684            DES_ROUND( Y, X );
0002f0  cc01              LDM      r4!,{r0}
0002f2  ea800103          EOR      r1,r0,r3
0002f6  f001003f          AND      r0,r1,#0x3f
0002fa  f8df818c          LDR      r8,|L3.1160|
0002fe  f8580020          LDR      r0,[r8,r0,LSL #2]
000302  f8df8188          LDR      r8,|L3.1164|
000306  f3c12905          UBFX     r9,r1,#8,#6
00030a  f8588029          LDR      r8,[r8,r9,LSL #2]
00030e  ea800008          EOR      r0,r0,r8
000312  f8df817c          LDR      r8,|L3.1168|
000316  f3c14905          UBFX     r9,r1,#16,#6
00031a  f8588029          LDR      r8,[r8,r9,LSL #2]
00031e  ea800008          EOR      r0,r0,r8
000322  f8df8170          LDR      r8,|L3.1172|
000326  f3c16905          UBFX     r9,r1,#24,#6
00032a  f8588029          LDR      r8,[r8,r9,LSL #2]
00032e  ea800008          EOR      r0,r0,r8
000332  4042              EORS     r2,r2,r0
000334  cc01              LDM      r4!,{r0}
000336  ea4f7803          LSL      r8,r3,#28
00033a  ea481813          ORR      r8,r8,r3,LSR #4
00033e  ea800108          EOR      r1,r0,r8
000342  f001003f          AND      r0,r1,#0x3f
000346  f8df8150          LDR      r8,|L3.1176|
00034a  f8580020          LDR      r0,[r8,r0,LSL #2]
00034e  f8df814c          LDR      r8,|L3.1180|
000352  f3c12905          UBFX     r9,r1,#8,#6
000356  f8588029          LDR      r8,[r8,r9,LSL #2]
00035a  ea800008          EOR      r0,r0,r8
00035e  f8df8140          LDR      r8,|L3.1184|
000362  f3c14905          UBFX     r9,r1,#16,#6
000366  f8588029          LDR      r8,[r8,r9,LSL #2]
00036a  ea800008          EOR      r0,r0,r8
00036e  f8df8134          LDR      r8,|L3.1188|
000372  f3c16905          UBFX     r9,r1,#24,#6
000376  f8588029          LDR      r8,[r8,r9,LSL #2]
00037a  ea800008          EOR      r0,r0,r8
00037e  4042              EORS     r2,r2,r0
;;;685            DES_ROUND( X, Y );
000380  cc01              LDM      r4!,{r0}
000382  ea800102          EOR      r1,r0,r2
000386  f001003f          AND      r0,r1,#0x3f
00038a  f8df80fc          LDR      r8,|L3.1160|
00038e  f8580020          LDR      r0,[r8,r0,LSL #2]
000392  f8df80f8          LDR      r8,|L3.1164|
000396  f3c12905          UBFX     r9,r1,#8,#6
00039a  f8588029          LDR      r8,[r8,r9,LSL #2]
00039e  ea800008          EOR      r0,r0,r8
0003a2  f8df80ec          LDR      r8,|L3.1168|
0003a6  f3c14905          UBFX     r9,r1,#16,#6
0003aa  f8588029          LDR      r8,[r8,r9,LSL #2]
0003ae  ea800008          EOR      r0,r0,r8
0003b2  f8df80e0          LDR      r8,|L3.1172|
0003b6  f3c16905          UBFX     r9,r1,#24,#6
0003ba  f8588029          LDR      r8,[r8,r9,LSL #2]
0003be  ea800008          EOR      r0,r0,r8
0003c2  4043              EORS     r3,r3,r0
0003c4  cc01              LDM      r4!,{r0}
0003c6  ea4f7802          LSL      r8,r2,#28
0003ca  ea481812          ORR      r8,r8,r2,LSR #4
0003ce  ea800108          EOR      r1,r0,r8
0003d2  f001003f          AND      r0,r1,#0x3f
0003d6  f8df80c0          LDR      r8,|L3.1176|
0003da  f8580020          LDR      r0,[r8,r0,LSL #2]
0003de  f8df80bc          LDR      r8,|L3.1180|
0003e2  f3c12905          UBFX     r9,r1,#8,#6
0003e6  f8588029          LDR      r8,[r8,r9,LSL #2]
0003ea  ea800008          EOR      r0,r0,r8
0003ee  f8df80b0          LDR      r8,|L3.1184|
0003f2  f3c14905          UBFX     r9,r1,#16,#6
0003f6  f8588029          LDR      r8,[r8,r9,LSL #2]
0003fa  ea800008          EOR      r0,r0,r8
0003fe  f8df80a4          LDR      r8,|L3.1188|
000402  f3c16905          UBFX     r9,r1,#24,#6
000406  f8588029          LDR      r8,[r8,r9,LSL #2]
00040a  ea800008          EOR      r0,r0,r8
00040e  4043              EORS     r3,r3,r0
000410  1c7f              ADDS     r7,r7,#1              ;682
                  |L3.1042|
000412  2f08              CMP      r7,#8                 ;682
000414  f6ffaf6c          BLT      |L3.752|
;;;686        }
;;;687    
;;;688        DES_FP( Y, X );
000418  07d8              LSLS     r0,r3,#31
00041a  ea400353          ORR      r3,r0,r3,LSR #1
00041e  ea830002          EOR      r0,r3,r2
000422  f00031aa          AND      r1,r0,#0xaaaaaaaa
000426  404b              EORS     r3,r3,r1
000428  404a              EORS     r2,r2,r1
00042a  07d0              LSLS     r0,r2,#31
00042c  ea400252          ORR      r2,r0,r2,LSR #1
000430  ea832012          EOR      r0,r3,r2,LSR #8
000434  f00011ff          AND      r1,r0,#0xff00ff
000438  404b              EORS     r3,r3,r1
00043a  ea822201          EOR      r2,r2,r1,LSL #8
00043e  ea830092          EOR      r0,r3,r2,LSR #2
000442  f0003133          AND      r1,r0,#0x33333333
000446  404b              EORS     r3,r3,r1
000448  ea820281          EOR      r2,r2,r1,LSL #2
00044c  ea824013          EOR      r0,r2,r3,LSR #16
000450  b281              UXTH     r1,r0
000452  404a              EORS     r2,r2,r1
000454  ea834301          EOR      r3,r3,r1,LSL #16
000458  ea821013          EOR      r0,r2,r3,LSR #4
00045c  f000310f          AND      r1,r0,#0xf0f0f0f
000460  404a              EORS     r2,r2,r1
000462  ea831301          EOR      r3,r3,r1,LSL #4
;;;689    
;;;690        PUT_UINT32_BE( Y, output, 0 );
000466  0e18              LSRS     r0,r3,#24
000468  7030              STRB     r0,[r6,#0]
00046a  0c18              LSRS     r0,r3,#16
00046c  7070              STRB     r0,[r6,#1]
00046e  0a18              LSRS     r0,r3,#8
000470  70b0              STRB     r0,[r6,#2]
000472  70f3              STRB     r3,[r6,#3]
;;;691        PUT_UINT32_BE( X, output, 4 );
000474  0e10              LSRS     r0,r2,#24
000476  7130              STRB     r0,[r6,#4]
000478  0c10              LSRS     r0,r2,#16
00047a  7170              STRB     r0,[r6,#5]
00047c  0a10              LSRS     r0,r2,#8
00047e  71b0              STRB     r0,[r6,#6]
000480  71f2              STRB     r2,[r6,#7]
;;;692    
;;;693        return( 0 );
000482  2000              MOVS     r0,#0
;;;694    }
000484  e8bd83f0          POP      {r4-r9,pc}
;;;695    
                          ENDP

                  |L3.1160|
                          DCD      ||SB8||
                  |L3.1164|
                          DCD      ||SB6||
                  |L3.1168|
                          DCD      ||SB4||
                  |L3.1172|
                          DCD      ||SB2||
                  |L3.1176|
                          DCD      ||SB7||
                  |L3.1180|
                          DCD      ||SB5||
                  |L3.1184|
                          DCD      ||SB3||
                  |L3.1188|
                          DCD      ||SB1||

                          AREA ||i.des3_set2key||, CODE, READONLY, ALIGN=1

                  des3_set2key PROC
;;;469    
;;;470    static void des3_set2key( uint32_t esk[96],
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;471                              uint32_t dsk[96],
;;;472                              const unsigned char key[DES_KEY_SIZE*2] )
;;;473    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;474        int i;
;;;475    
;;;476        des_setkey( esk, key );
00000a  4639              MOV      r1,r7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       des_setkey
;;;477        des_setkey( dsk + 32, key + 8 );
000012  f1070108          ADD      r1,r7,#8
000016  f1050080          ADD      r0,r5,#0x80
00001a  f7fffffe          BL       des_setkey
;;;478    
;;;479        for( i = 0; i < 32; i += 2 )
00001e  2400              MOVS     r4,#0
000020  e033              B        |L4.138|
                  |L4.34|
;;;480        {
;;;481            dsk[i     ] = esk[30 - i];
000022  f1c4001e          RSB      r0,r4,#0x1e
000026  f8560020          LDR      r0,[r6,r0,LSL #2]
00002a  f8450024          STR      r0,[r5,r4,LSL #2]
;;;482            dsk[i +  1] = esk[31 - i];
00002e  f1c4001f          RSB      r0,r4,#0x1f
000032  f8561020          LDR      r1,[r6,r0,LSL #2]
000036  1c60              ADDS     r0,r4,#1
000038  f8451020          STR      r1,[r5,r0,LSL #2]
;;;483    
;;;484            esk[i + 32] = dsk[62 - i];
00003c  f1c4003e          RSB      r0,r4,#0x3e
000040  f8551020          LDR      r1,[r5,r0,LSL #2]
000044  f1040020          ADD      r0,r4,#0x20
000048  f8461020          STR      r1,[r6,r0,LSL #2]
;;;485            esk[i + 33] = dsk[63 - i];
00004c  f1c4003f          RSB      r0,r4,#0x3f
000050  f8551020          LDR      r1,[r5,r0,LSL #2]
000054  f1040021          ADD      r0,r4,#0x21
000058  f8461020          STR      r1,[r6,r0,LSL #2]
;;;486    
;;;487            esk[i + 64] = esk[i    ];
00005c  f8561024          LDR      r1,[r6,r4,LSL #2]
000060  301f              ADDS     r0,r0,#0x1f
000062  f8461020          STR      r1,[r6,r0,LSL #2]
;;;488            esk[i + 65] = esk[i + 1];
000066  1c60              ADDS     r0,r4,#1
000068  f8561020          LDR      r1,[r6,r0,LSL #2]
00006c  3040              ADDS     r0,r0,#0x40
00006e  f8461020          STR      r1,[r6,r0,LSL #2]
;;;489    
;;;490            dsk[i + 64] = dsk[i    ];
000072  f8551024          LDR      r1,[r5,r4,LSL #2]
000076  1e40              SUBS     r0,r0,#1
000078  f8451020          STR      r1,[r5,r0,LSL #2]
;;;491            dsk[i + 65] = dsk[i + 1];
00007c  1c60              ADDS     r0,r4,#1
00007e  f8551020          LDR      r1,[r5,r0,LSL #2]
000082  3040              ADDS     r0,r0,#0x40
000084  f8451020          STR      r1,[r5,r0,LSL #2]
000088  1ca4              ADDS     r4,r4,#2              ;479
                  |L4.138|
00008a  2c20              CMP      r4,#0x20              ;479
00008c  dbc9              BLT      |L4.34|
;;;492        }
;;;493    }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;494    
                          ENDP


                          AREA ||i.des3_set2key_dec||, CODE, READONLY, ALIGN=1

                  des3_set2key_dec PROC
;;;510     */
;;;511    int des3_set2key_dec( des3_context *ctx, const unsigned char key[DES_KEY_SIZE * 2] )
000000  b530              PUSH     {r4,r5,lr}
;;;512    {
000002  b0e1              SUB      sp,sp,#0x184
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;513        uint32_t sk[96];
;;;514    
;;;515        des3_set2key( sk, ctx->sk, key );
000008  4622              MOV      r2,r4
00000a  1d29              ADDS     r1,r5,#4
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       des3_set2key
;;;516        memset( sk,  0, sizeof( sk ) );
000012  f44f71c0          MOV      r1,#0x180
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
;;;517    
;;;518        return( 0 );
00001c  2000              MOVS     r0,#0
;;;519    }
00001e  b061              ADD      sp,sp,#0x184
000020  bd30              POP      {r4,r5,pc}
;;;520    
                          ENDP


                          AREA ||i.des3_set2key_enc||, CODE, READONLY, ALIGN=1

                  des3_set2key_enc PROC
;;;497     */
;;;498    int des3_set2key_enc( des3_context *ctx, const unsigned char key[DES_KEY_SIZE * 2] )
000000  b530              PUSH     {r4,r5,lr}
;;;499    {
000002  b0e1              SUB      sp,sp,#0x184
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;500        uint32_t sk[96];
;;;501    
;;;502        des3_set2key( ctx->sk, sk, key );
000008  4622              MOV      r2,r4
00000a  a901              ADD      r1,sp,#4
00000c  1d28              ADDS     r0,r5,#4
00000e  f7fffffe          BL       des3_set2key
;;;503        memset( sk,  0, sizeof( sk ) );
000012  f44f71c0          MOV      r1,#0x180
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
;;;504    
;;;505        return( 0 );
00001c  2000              MOVS     r0,#0
;;;506    }
00001e  b061              ADD      sp,sp,#0x184
000020  bd30              POP      {r4,r5,pc}
;;;507    
                          ENDP


                          AREA ||i.des3_set3key||, CODE, READONLY, ALIGN=1

                  des3_set3key PROC
;;;520    
;;;521    static void des3_set3key( uint32_t esk[96],
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;522                              uint32_t dsk[96],
;;;523                              const unsigned char key[24] )
;;;524    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;525        int i;
;;;526    
;;;527        des_setkey( esk, key );
00000a  4639              MOV      r1,r7
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       des_setkey
;;;528        des_setkey( dsk + 32, key +  8 );
000012  f1070108          ADD      r1,r7,#8
000016  f1060080          ADD      r0,r6,#0x80
00001a  f7fffffe          BL       des_setkey
;;;529        des_setkey( esk + 64, key + 16 );
00001e  f1070110          ADD      r1,r7,#0x10
000022  f5057080          ADD      r0,r5,#0x100
000026  f7fffffe          BL       des_setkey
;;;530    
;;;531        for( i = 0; i < 32; i += 2 )
00002a  2400              MOVS     r4,#0
00002c  e02d              B        |L7.138|
                  |L7.46|
;;;532        {
;;;533            dsk[i     ] = esk[94 - i];
00002e  f1c4005e          RSB      r0,r4,#0x5e
000032  f8550020          LDR      r0,[r5,r0,LSL #2]
000036  f8460024          STR      r0,[r6,r4,LSL #2]
;;;534            dsk[i +  1] = esk[95 - i];
00003a  f1c4005f          RSB      r0,r4,#0x5f
00003e  f8551020          LDR      r1,[r5,r0,LSL #2]
000042  1c60              ADDS     r0,r4,#1
000044  f8461020          STR      r1,[r6,r0,LSL #2]
;;;535    
;;;536            esk[i + 32] = dsk[62 - i];
000048  f1c4003e          RSB      r0,r4,#0x3e
00004c  f8561020          LDR      r1,[r6,r0,LSL #2]
000050  f1040020          ADD      r0,r4,#0x20
000054  f8451020          STR      r1,[r5,r0,LSL #2]
;;;537            esk[i + 33] = dsk[63 - i];
000058  f1c4003f          RSB      r0,r4,#0x3f
00005c  f8561020          LDR      r1,[r6,r0,LSL #2]
000060  f1040021          ADD      r0,r4,#0x21
000064  f8451020          STR      r1,[r5,r0,LSL #2]
;;;538    
;;;539            dsk[i + 64] = esk[30 - i];
000068  f1c4001e          RSB      r0,r4,#0x1e
00006c  f8551020          LDR      r1,[r5,r0,LSL #2]
000070  f1040040          ADD      r0,r4,#0x40
000074  f8461020          STR      r1,[r6,r0,LSL #2]
;;;540            dsk[i + 65] = esk[31 - i];
000078  f1c4001f          RSB      r0,r4,#0x1f
00007c  f8551020          LDR      r1,[r5,r0,LSL #2]
000080  f1040041          ADD      r0,r4,#0x41
000084  f8461020          STR      r1,[r6,r0,LSL #2]
000088  1ca4              ADDS     r4,r4,#2              ;531
                  |L7.138|
00008a  2c20              CMP      r4,#0x20              ;531
00008c  dbcf              BLT      |L7.46|
;;;541        }
;;;542    }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;543    
                          ENDP


                          AREA ||i.des3_set3key_dec||, CODE, READONLY, ALIGN=1

                  des3_set3key_dec PROC
;;;559     */
;;;560    int des3_set3key_dec( des3_context *ctx, const unsigned char key[DES_KEY_SIZE * 3] )
000000  b530              PUSH     {r4,r5,lr}
;;;561    {
000002  b0e1              SUB      sp,sp,#0x184
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;562        uint32_t sk[96];
;;;563    
;;;564        des3_set3key( sk, ctx->sk, key );
000008  4622              MOV      r2,r4
00000a  1d29              ADDS     r1,r5,#4
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       des3_set3key
;;;565        memset( sk, 0, sizeof( sk ) );
000012  f44f71c0          MOV      r1,#0x180
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
;;;566    
;;;567        return( 0 );
00001c  2000              MOVS     r0,#0
;;;568    }
00001e  b061              ADD      sp,sp,#0x184
000020  bd30              POP      {r4,r5,pc}
;;;569    
                          ENDP


                          AREA ||i.des3_set3key_enc||, CODE, READONLY, ALIGN=1

                  des3_set3key_enc PROC
;;;546     */
;;;547    int des3_set3key_enc( des3_context *ctx, const unsigned char key[DES_KEY_SIZE * 3] )
000000  b530              PUSH     {r4,r5,lr}
;;;548    {
000002  b0e1              SUB      sp,sp,#0x184
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;549        uint32_t sk[96];
;;;550    
;;;551        des3_set3key( ctx->sk, sk, key );
000008  4622              MOV      r2,r4
00000a  a901              ADD      r1,sp,#4
00000c  1d28              ADDS     r0,r5,#4
00000e  f7fffffe          BL       des3_set3key
;;;552        memset( sk, 0, sizeof( sk ) );
000012  f44f71c0          MOV      r1,#0x180
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
;;;553    
;;;554        return( 0 );
00001c  2000              MOVS     r0,#0
;;;555    }
00001e  b061              ADD      sp,sp,#0x184
000020  bd30              POP      {r4,r5,pc}
;;;556    
                          ENDP


                          AREA ||i.des_crypt_cbc||, CODE, READONLY, ALIGN=1

                  des_crypt_cbc PROC
;;;603     */
;;;604    int des_crypt_cbc( des_context *ctx,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;605                        int mode,
;;;606                        size_t length,
;;;607                        unsigned char iv[8],
;;;608                        const unsigned char *input,
;;;609                        unsigned char *output )
;;;610    {
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd850a          LDRD     r8,r5,[sp,#0x28]
;;;611        int i;
;;;612        unsigned char temp[8];
;;;613    
;;;614        if( length % 8 )
000010  f0060007          AND      r0,r6,#7
000014  b118              CBZ      r0,|L10.30|
;;;615            return( POLARSSL_ERR_DES_INVALID_INPUT_LENGTH );
000016  f06f0031          MVN      r0,#0x31
                  |L10.26|
;;;616    
;;;617        if( mode == DES_ENCRYPT )
;;;618        {
;;;619            while( length > 0 )
;;;620            {
;;;621                for( i = 0; i < 8; i++ )
;;;622                    output[i] = (unsigned char)( input[i] ^ iv[i] );
;;;623    
;;;624                des_crypt_ecb( ctx, output, output );
;;;625                memcpy( iv, output, 8 );
;;;626    
;;;627                input  += 8;
;;;628                output += 8;
;;;629                length -= 8;
;;;630            }
;;;631        }
;;;632        else /* DES_DECRYPT */
;;;633        {
;;;634            while( length > 0 )
;;;635            {
;;;636                memcpy( temp, input, 8 );
;;;637                des_crypt_ecb( ctx, input, output );
;;;638    
;;;639                for( i = 0; i < 8; i++ )
;;;640                    output[i] = (unsigned char)( output[i] ^ iv[i] );
;;;641    
;;;642                memcpy( iv, temp, 8 );
;;;643    
;;;644                input  += 8;
;;;645                output += 8;
;;;646                length -= 8;
;;;647            }
;;;648        }
;;;649    
;;;650        return( 0 );
;;;651    }
00001a  e8bd87fc          POP      {r2-r10,pc}
                  |L10.30|
00001e  f1b90f01          CMP      r9,#1                 ;617
000022  d11a              BNE      |L10.90|
000024  e016              B        |L10.84|
                  |L10.38|
000026  2400              MOVS     r4,#0                 ;621
000028  e005              B        |L10.54|
                  |L10.42|
00002a  f8180004          LDRB     r0,[r8,r4]            ;622
00002e  5d39              LDRB     r1,[r7,r4]            ;622
000030  4048              EORS     r0,r0,r1              ;622
000032  5528              STRB     r0,[r5,r4]            ;622
000034  1c64              ADDS     r4,r4,#1              ;621
                  |L10.54|
000036  2c08              CMP      r4,#8                 ;621
000038  dbf7              BLT      |L10.42|
00003a  462a              MOV      r2,r5                 ;624
00003c  4629              MOV      r1,r5                 ;624
00003e  4650              MOV      r0,r10                ;624
000040  f7fffffe          BL       des_crypt_ecb
000044  6828              LDR      r0,[r5,#0]            ;625
000046  6038              STR      r0,[r7,#0]            ;625
000048  6868              LDR      r0,[r5,#4]            ;625
00004a  6078              STR      r0,[r7,#4]            ;625
00004c  f1080808          ADD      r8,r8,#8              ;627
000050  3508              ADDS     r5,r5,#8              ;628
000052  3e08              SUBS     r6,r6,#8              ;629
                  |L10.84|
000054  2e00              CMP      r6,#0                 ;619
000056  d1e6              BNE      |L10.38|
000058  e01e              B        |L10.152|
                  |L10.90|
00005a  e01b              B        |L10.148|
                  |L10.92|
00005c  f8d80000          LDR      r0,[r8,#0]            ;636
000060  9000              STR      r0,[sp,#0]            ;636
000062  f8d80004          LDR      r0,[r8,#4]            ;636
000066  9001              STR      r0,[sp,#4]            ;636
000068  462a              MOV      r2,r5                 ;637
00006a  4641              MOV      r1,r8                 ;637
00006c  4650              MOV      r0,r10                ;637
00006e  f7fffffe          BL       des_crypt_ecb
000072  2400              MOVS     r4,#0                 ;639
000074  e004              B        |L10.128|
                  |L10.118|
000076  5d28              LDRB     r0,[r5,r4]            ;640
000078  5d39              LDRB     r1,[r7,r4]            ;640
00007a  4048              EORS     r0,r0,r1              ;640
00007c  5528              STRB     r0,[r5,r4]            ;640
00007e  1c64              ADDS     r4,r4,#1              ;639
                  |L10.128|
000080  2c08              CMP      r4,#8                 ;639
000082  dbf8              BLT      |L10.118|
000084  9800              LDR      r0,[sp,#0]            ;642
000086  6038              STR      r0,[r7,#0]            ;642
000088  9801              LDR      r0,[sp,#4]            ;642
00008a  6078              STR      r0,[r7,#4]            ;642
00008c  f1080808          ADD      r8,r8,#8              ;644
000090  3508              ADDS     r5,r5,#8              ;645
000092  3e08              SUBS     r6,r6,#8              ;646
                  |L10.148|
000094  2e00              CMP      r6,#0                 ;634
000096  d1e1              BNE      |L10.92|
                  |L10.152|
000098  2000              MOVS     r0,#0                 ;650
00009a  e7be              B        |L10.26|
;;;652    
                          ENDP


                          AREA ||i.des_crypt_ecb||, CODE, READONLY, ALIGN=2

                  des_crypt_ecb PROC
;;;572     */
;;;573    int des_crypt_ecb( des_context *ctx,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;574                        const unsigned char input[8],
;;;575                        unsigned char output[8] )
;;;576    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;577        int i;
;;;578        uint32_t X, Y, T, *SK;
;;;579    
;;;580        SK = ctx->sk;
00000a  1d3e              ADDS     r6,r7,#4
;;;581    
;;;582        GET_UINT32_BE( X, input, 0 );
00000c  7820              LDRB     r0,[r4,#0]
00000e  0600              LSLS     r0,r0,#24
000010  f8948001          LDRB     r8,[r4,#1]
000014  ea404008          ORR      r0,r0,r8,LSL #16
000018  f8948002          LDRB     r8,[r4,#2]
00001c  ea402008          ORR      r0,r0,r8,LSL #8
000020  f8948003          LDRB     r8,[r4,#3]
000024  ea400208          ORR      r2,r0,r8
;;;583        GET_UINT32_BE( Y, input, 4 );
000028  7920              LDRB     r0,[r4,#4]
00002a  0600              LSLS     r0,r0,#24
00002c  f8948005          LDRB     r8,[r4,#5]
000030  ea404008          ORR      r0,r0,r8,LSL #16
000034  f8948006          LDRB     r8,[r4,#6]
000038  ea402008          ORR      r0,r0,r8,LSL #8
00003c  f8948007          LDRB     r8,[r4,#7]
000040  ea400308          ORR      r3,r0,r8
;;;584    
;;;585        DES_IP( X, Y );
000044  ea831012          EOR      r0,r3,r2,LSR #4
000048  f000310f          AND      r1,r0,#0xf0f0f0f
00004c  404b              EORS     r3,r3,r1
00004e  ea821201          EOR      r2,r2,r1,LSL #4
000052  ea834012          EOR      r0,r3,r2,LSR #16
000056  b281              UXTH     r1,r0
000058  404b              EORS     r3,r3,r1
00005a  ea824201          EOR      r2,r2,r1,LSL #16
00005e  ea820093          EOR      r0,r2,r3,LSR #2
000062  f0003133          AND      r1,r0,#0x33333333
000066  404a              EORS     r2,r2,r1
000068  ea830381          EOR      r3,r3,r1,LSL #2
00006c  ea822013          EOR      r0,r2,r3,LSR #8
000070  f00011ff          AND      r1,r0,#0xff00ff
000074  404a              EORS     r2,r2,r1
000076  ea832301          EOR      r3,r3,r1,LSL #8
00007a  0058              LSLS     r0,r3,#1
00007c  ea4073d3          ORR      r3,r0,r3,LSR #31
000080  ea820003          EOR      r0,r2,r3
000084  f00031aa          AND      r1,r0,#0xaaaaaaaa
000088  404b              EORS     r3,r3,r1
00008a  404a              EORS     r2,r2,r1
00008c  0050              LSLS     r0,r2,#1
00008e  ea4072d2          ORR      r2,r0,r2,LSR #31
;;;586    
;;;587        for( i = 0; i < 8; i++ )
000092  f04f0c00          MOV      r12,#0
000096  e091              B        |L11.444|
                  |L11.152|
;;;588        {
;;;589            DES_ROUND( Y, X );
000098  ce01              LDM      r6!,{r0}
00009a  ea800103          EOR      r1,r0,r3
00009e  f001003f          AND      r0,r1,#0x3f
0000a2  f8df8190          LDR      r8,|L11.564|
0000a6  f8580020          LDR      r0,[r8,r0,LSL #2]
0000aa  f8df818c          LDR      r8,|L11.568|
0000ae  f3c12905          UBFX     r9,r1,#8,#6
0000b2  f8588029          LDR      r8,[r8,r9,LSL #2]
0000b6  ea800008          EOR      r0,r0,r8
0000ba  f8df8180          LDR      r8,|L11.572|
0000be  f3c14905          UBFX     r9,r1,#16,#6
0000c2  f8588029          LDR      r8,[r8,r9,LSL #2]
0000c6  ea800008          EOR      r0,r0,r8
0000ca  f8df8174          LDR      r8,|L11.576|
0000ce  f3c16905          UBFX     r9,r1,#24,#6
0000d2  f8588029          LDR      r8,[r8,r9,LSL #2]
0000d6  ea800008          EOR      r0,r0,r8
0000da  4042              EORS     r2,r2,r0
0000dc  ce01              LDM      r6!,{r0}
0000de  ea4f7803          LSL      r8,r3,#28
0000e2  ea481813          ORR      r8,r8,r3,LSR #4
0000e6  ea800108          EOR      r1,r0,r8
0000ea  f001003f          AND      r0,r1,#0x3f
0000ee  f8df8154          LDR      r8,|L11.580|
0000f2  f8580020          LDR      r0,[r8,r0,LSL #2]
0000f6  f8df8150          LDR      r8,|L11.584|
0000fa  f3c12905          UBFX     r9,r1,#8,#6
0000fe  f8588029          LDR      r8,[r8,r9,LSL #2]
000102  ea800008          EOR      r0,r0,r8
000106  f8df8144          LDR      r8,|L11.588|
00010a  f3c14905          UBFX     r9,r1,#16,#6
00010e  f8588029          LDR      r8,[r8,r9,LSL #2]
000112  ea800008          EOR      r0,r0,r8
000116  f8df8138          LDR      r8,|L11.592|
00011a  f3c16905          UBFX     r9,r1,#24,#6
00011e  f8588029          LDR      r8,[r8,r9,LSL #2]
000122  ea800008          EOR      r0,r0,r8
000126  4042              EORS     r2,r2,r0
;;;590            DES_ROUND( X, Y );
000128  ce01              LDM      r6!,{r0}
00012a  ea800102          EOR      r1,r0,r2
00012e  f001003f          AND      r0,r1,#0x3f
000132  f8df8100          LDR      r8,|L11.564|
000136  f8580020          LDR      r0,[r8,r0,LSL #2]
00013a  f8df80fc          LDR      r8,|L11.568|
00013e  f3c12905          UBFX     r9,r1,#8,#6
000142  f8588029          LDR      r8,[r8,r9,LSL #2]
000146  ea800008          EOR      r0,r0,r8
00014a  f8df80f0          LDR      r8,|L11.572|
00014e  f3c14905          UBFX     r9,r1,#16,#6
000152  f8588029          LDR      r8,[r8,r9,LSL #2]
000156  ea800008          EOR      r0,r0,r8
00015a  f8df80e4          LDR      r8,|L11.576|
00015e  f3c16905          UBFX     r9,r1,#24,#6
000162  f8588029          LDR      r8,[r8,r9,LSL #2]
000166  ea800008          EOR      r0,r0,r8
00016a  4043              EORS     r3,r3,r0
00016c  ce01              LDM      r6!,{r0}
00016e  ea4f7802          LSL      r8,r2,#28
000172  ea481812          ORR      r8,r8,r2,LSR #4
000176  ea800108          EOR      r1,r0,r8
00017a  f001003f          AND      r0,r1,#0x3f
00017e  f8df80c4          LDR      r8,|L11.580|
000182  f8580020          LDR      r0,[r8,r0,LSL #2]
000186  f8df80c0          LDR      r8,|L11.584|
00018a  f3c12905          UBFX     r9,r1,#8,#6
00018e  f8588029          LDR      r8,[r8,r9,LSL #2]
000192  ea800008          EOR      r0,r0,r8
000196  f8df80b4          LDR      r8,|L11.588|
00019a  f3c14905          UBFX     r9,r1,#16,#6
00019e  f8588029          LDR      r8,[r8,r9,LSL #2]
0001a2  ea800008          EOR      r0,r0,r8
0001a6  f8df80a8          LDR      r8,|L11.592|
0001aa  f3c16905          UBFX     r9,r1,#24,#6
0001ae  f8588029          LDR      r8,[r8,r9,LSL #2]
0001b2  ea800008          EOR      r0,r0,r8
0001b6  4043              EORS     r3,r3,r0
0001b8  f10c0c01          ADD      r12,r12,#1            ;587
                  |L11.444|
0001bc  f1bc0f08          CMP      r12,#8                ;587
0001c0  f6ffaf6a          BLT      |L11.152|
;;;591        }
;;;592    
;;;593        DES_FP( Y, X );
0001c4  07d8              LSLS     r0,r3,#31
0001c6  ea400353          ORR      r3,r0,r3,LSR #1
0001ca  ea830002          EOR      r0,r3,r2
0001ce  f00031aa          AND      r1,r0,#0xaaaaaaaa
0001d2  404b              EORS     r3,r3,r1
0001d4  404a              EORS     r2,r2,r1
0001d6  07d0              LSLS     r0,r2,#31
0001d8  ea400252          ORR      r2,r0,r2,LSR #1
0001dc  ea832012          EOR      r0,r3,r2,LSR #8
0001e0  f00011ff          AND      r1,r0,#0xff00ff
0001e4  404b              EORS     r3,r3,r1
0001e6  ea822201          EOR      r2,r2,r1,LSL #8
0001ea  ea830092          EOR      r0,r3,r2,LSR #2
0001ee  f0003133          AND      r1,r0,#0x33333333
0001f2  404b              EORS     r3,r3,r1
0001f4  ea820281          EOR      r2,r2,r1,LSL #2
0001f8  ea824013          EOR      r0,r2,r3,LSR #16
0001fc  b281              UXTH     r1,r0
0001fe  404a              EORS     r2,r2,r1
000200  ea834301          EOR      r3,r3,r1,LSL #16
000204  ea821013          EOR      r0,r2,r3,LSR #4
000208  f000310f          AND      r1,r0,#0xf0f0f0f
00020c  404a              EORS     r2,r2,r1
00020e  ea831301          EOR      r3,r3,r1,LSL #4
;;;594    
;;;595        PUT_UINT32_BE( Y, output, 0 );
000212  0e18              LSRS     r0,r3,#24
000214  7028              STRB     r0,[r5,#0]
000216  0c18              LSRS     r0,r3,#16
000218  7068              STRB     r0,[r5,#1]
00021a  0a18              LSRS     r0,r3,#8
00021c  70a8              STRB     r0,[r5,#2]
00021e  70eb              STRB     r3,[r5,#3]
;;;596        PUT_UINT32_BE( X, output, 4 );
000220  0e10              LSRS     r0,r2,#24
000222  7128              STRB     r0,[r5,#4]
000224  0c10              LSRS     r0,r2,#16
000226  7168              STRB     r0,[r5,#5]
000228  0a10              LSRS     r0,r2,#8
00022a  71a8              STRB     r0,[r5,#6]
00022c  71ea              STRB     r2,[r5,#7]
;;;597    
;;;598        return( 0 );
00022e  2000              MOVS     r0,#0
;;;599    }
000230  e8bd83f0          POP      {r4-r9,pc}
;;;600    
                          ENDP

                  |L11.564|
                          DCD      ||SB8||
                  |L11.568|
                          DCD      ||SB6||
                  |L11.572|
                          DCD      ||SB4||
                  |L11.576|
                          DCD      ||SB2||
                  |L11.580|
                          DCD      ||SB7||
                  |L11.584|
                          DCD      ||SB5||
                  |L11.588|
                          DCD      ||SB3||
                  |L11.592|
                          DCD      ||SB1||

                          AREA ||i.des_key_check_key_parity||, CODE, READONLY, ALIGN=2

                  des_key_check_key_parity PROC
;;;306     */
;;;307    int des_key_check_key_parity( const unsigned char key[DES_KEY_SIZE] )
000000  b510              PUSH     {r4,lr}
;;;308    {
000002  4602              MOV      r2,r0
;;;309        int i;
;;;310    
;;;311        for( i = 0; i < DES_KEY_SIZE; i++ )
000004  2100              MOVS     r1,#0
000006  e00b              B        |L12.32|
                  |L12.8|
;;;312            if ( key[i] != odd_parity_table[key[i] / 2] )
000008  5c50              LDRB     r0,[r2,r1]
00000a  eb0073d0          ADD      r3,r0,r0,LSR #31
00000e  105b              ASRS     r3,r3,#1
000010  4c05              LDR      r4,|L12.40|
000012  5ce3              LDRB     r3,[r4,r3]
000014  5c54              LDRB     r4,[r2,r1]
000016  42a3              CMP      r3,r4
000018  d001              BEQ      |L12.30|
;;;313                return( 1 );
00001a  2001              MOVS     r0,#1
                  |L12.28|
;;;314    
;;;315        return( 0 );
;;;316    }
00001c  bd10              POP      {r4,pc}
                  |L12.30|
00001e  1c49              ADDS     r1,r1,#1              ;311
                  |L12.32|
000020  2908              CMP      r1,#8                 ;311
000022  dbf1              BLT      |L12.8|
000024  2000              MOVS     r0,#0                 ;315
000026  e7f9              B        |L12.28|
;;;317    
                          ENDP

                  |L12.40|
                          DCD      odd_parity_table

                          AREA ||i.des_key_check_weak||, CODE, READONLY, ALIGN=2

                  des_key_check_weak PROC
;;;361    
;;;362    int des_key_check_weak( const unsigned char key[DES_KEY_SIZE] )
000000  b570              PUSH     {r4-r6,lr}
;;;363    {
000002  4605              MOV      r5,r0
;;;364        int i;
;;;365    
;;;366        for( i = 0; i < WEAK_KEY_COUNT; i++ )
000004  2400              MOVS     r4,#0
000006  e00a              B        |L13.30|
                  |L13.8|
;;;367            if( memcmp( weak_key_table[i], key, DES_KEY_SIZE) == 0)
000008  4907              LDR      r1,|L13.40|
00000a  eb0100c4          ADD      r0,r1,r4,LSL #3
00000e  2208              MOVS     r2,#8
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       memcmp
000016  b908              CBNZ     r0,|L13.28|
;;;368                return( 1 );
000018  2001              MOVS     r0,#1
                  |L13.26|
;;;369    
;;;370        return( 0 );
;;;371    }
00001a  bd70              POP      {r4-r6,pc}
                  |L13.28|
00001c  1c64              ADDS     r4,r4,#1              ;366
                  |L13.30|
00001e  2c10              CMP      r4,#0x10              ;366
000020  dbf2              BLT      |L13.8|
000022  2000              MOVS     r0,#0                 ;370
000024  e7f9              B        |L13.26|
;;;372    
                          ENDP

000026  0000              DCW      0x0000
                  |L13.40|
                          DCD      weak_key_table

                          AREA ||i.des_key_set_parity||, CODE, READONLY, ALIGN=2

                  des_key_set_parity PROC
;;;295    
;;;296    void des_key_set_parity( unsigned char key[DES_KEY_SIZE] )
000000  b510              PUSH     {r4,lr}
;;;297    {
000002  4601              MOV      r1,r0
;;;298        int i;
;;;299    
;;;300        for( i = 0; i < DES_KEY_SIZE; i++ )
000004  2000              MOVS     r0,#0
000006  e007              B        |L14.24|
                  |L14.8|
;;;301            key[i] = odd_parity_table[key[i] / 2];
000008  5c0a              LDRB     r2,[r1,r0]
00000a  eb0273d2          ADD      r3,r2,r2,LSR #31
00000e  105b              ASRS     r3,r3,#1
000010  4c03              LDR      r4,|L14.32|
000012  5ce3              LDRB     r3,[r4,r3]
000014  540b              STRB     r3,[r1,r0]
000016  1c40              ADDS     r0,r0,#1              ;300
                  |L14.24|
000018  2808              CMP      r0,#8                 ;300
00001a  dbf5              BLT      |L14.8|
;;;302    }
00001c  bd10              POP      {r4,pc}
;;;303    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      odd_parity_table

                          AREA ||i.des_setkey||, CODE, READONLY, ALIGN=2

                  des_setkey PROC
;;;372    
;;;373    static void des_setkey( uint32_t SK[32], const unsigned char key[DES_KEY_SIZE] )
000000  b5f0              PUSH     {r4-r7,lr}
;;;374    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;375        int i;
;;;376        uint32_t X, Y, T;
;;;377    
;;;378        GET_UINT32_BE( X, key, 0 );
000006  7816              LDRB     r6,[r2,#0]
000008  0636              LSLS     r6,r6,#24
00000a  7857              LDRB     r7,[r2,#1]
00000c  ea464607          ORR      r6,r6,r7,LSL #16
000010  7897              LDRB     r7,[r2,#2]
000012  ea462607          ORR      r6,r6,r7,LSL #8
000016  78d7              LDRB     r7,[r2,#3]
000018  ea460007          ORR      r0,r6,r7
;;;379        GET_UINT32_BE( Y, key, 4 );
00001c  7916              LDRB     r6,[r2,#4]
00001e  0636              LSLS     r6,r6,#24
000020  7957              LDRB     r7,[r2,#5]
000022  ea464607          ORR      r6,r6,r7,LSL #16
000026  7997              LDRB     r7,[r2,#6]
000028  ea462607          ORR      r6,r6,r7,LSL #8
00002c  79d7              LDRB     r7,[r2,#7]
00002e  ea460107          ORR      r1,r6,r7
;;;380    
;;;381        /*
;;;382         * Permuted Choice 1
;;;383         */
;;;384        T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
000032  ea801611          EOR      r6,r0,r1,LSR #4
000036  f006350f          AND      r5,r6,#0xf0f0f0f
00003a  4068              EORS     r0,r0,r5
00003c  ea811105          EOR      r1,r1,r5,LSL #4
;;;385        T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
000040  ea810600          EOR      r6,r1,r0
000044  f0063510          AND      r5,r6,#0x10101010
000048  4068              EORS     r0,r0,r5
00004a  4069              EORS     r1,r1,r5
;;;386    
;;;387        X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
00004c  f000060f          AND      r6,r0,#0xf
000050  4faf              LDR      r7,|L15.784|
000052  f8576026          LDR      r6,[r7,r6,LSL #2]
000056  00f6              LSLS     r6,r6,#3
000058  f3c02c03          UBFX     r12,r0,#8,#4
00005c  f857702c          LDR      r7,[r7,r12,LSL #2]
000060  ea460687          ORR      r6,r6,r7,LSL #2
000064  4faa              LDR      r7,|L15.784|
000066  f3c04c03          UBFX     r12,r0,#16,#4
00006a  f857702c          LDR      r7,[r7,r12,LSL #2]
00006e  ea460647          ORR      r6,r6,r7,LSL #1
000072  4fa7              LDR      r7,|L15.784|
000074  f3c06c03          UBFX     r12,r0,#24,#4
000078  f857702c          LDR      r7,[r7,r12,LSL #2]
00007c  433e              ORRS     r6,r6,r7
00007e  4fa4              LDR      r7,|L15.784|
000080  f3c01c43          UBFX     r12,r0,#5,#4
000084  f857702c          LDR      r7,[r7,r12,LSL #2]
000088  ea4616c7          ORR      r6,r6,r7,LSL #7
00008c  4fa0              LDR      r7,|L15.784|
00008e  f3c03c43          UBFX     r12,r0,#13,#4
000092  f857702c          LDR      r7,[r7,r12,LSL #2]
000096  ea461687          ORR      r6,r6,r7,LSL #6
00009a  4f9d              LDR      r7,|L15.784|
00009c  f3c05c43          UBFX     r12,r0,#21,#4
0000a0  f857702c          LDR      r7,[r7,r12,LSL #2]
0000a4  ea461647          ORR      r6,r6,r7,LSL #5
0000a8  270f              MOVS     r7,#0xf
0000aa  ea077750          AND      r7,r7,r0,LSR #29
0000ae  f8dfc260          LDR      r12,|L15.784|
0000b2  f85c7027          LDR      r7,[r12,r7,LSL #2]
0000b6  ea461007          ORR      r0,r6,r7,LSL #4
;;;388            | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
;;;389            | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
;;;390            | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
;;;391    
;;;392        Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
0000ba  4e96              LDR      r6,|L15.788|
0000bc  f3c10743          UBFX     r7,r1,#1,#4
0000c0  f8566027          LDR      r6,[r6,r7,LSL #2]
0000c4  00f6              LSLS     r6,r6,#3
0000c6  4f93              LDR      r7,|L15.788|
0000c8  f3c12c43          UBFX     r12,r1,#9,#4
0000cc  f857702c          LDR      r7,[r7,r12,LSL #2]
0000d0  ea460787          ORR      r7,r6,r7,LSL #2
0000d4  4e8f              LDR      r6,|L15.788|
0000d6  f3c14c43          UBFX     r12,r1,#17,#4
0000da  f856602c          LDR      r6,[r6,r12,LSL #2]
0000de  ea470646          ORR      r6,r7,r6,LSL #1
0000e2  4f8c              LDR      r7,|L15.788|
0000e4  f3c16c43          UBFX     r12,r1,#25,#4
0000e8  f857702c          LDR      r7,[r7,r12,LSL #2]
0000ec  433e              ORRS     r6,r6,r7
0000ee  4f89              LDR      r7,|L15.788|
0000f0  f3c11c03          UBFX     r12,r1,#4,#4
0000f4  f857702c          LDR      r7,[r7,r12,LSL #2]
0000f8  ea4616c7          ORR      r6,r6,r7,LSL #7
0000fc  4f85              LDR      r7,|L15.788|
0000fe  f3c13c03          UBFX     r12,r1,#12,#4
000102  f857702c          LDR      r7,[r7,r12,LSL #2]
000106  ea461687          ORR      r6,r6,r7,LSL #6
00010a  4f82              LDR      r7,|L15.788|
00010c  f3c15c03          UBFX     r12,r1,#20,#4
000110  f857702c          LDR      r7,[r7,r12,LSL #2]
000114  ea461647          ORR      r6,r6,r7,LSL #5
000118  270f              MOVS     r7,#0xf
00011a  ea077711          AND      r7,r7,r1,LSR #28
00011e  f8dfc1f4          LDR      r12,|L15.788|
000122  f85c7027          LDR      r7,[r12,r7,LSL #2]
000126  ea461107          ORR      r1,r6,r7,LSL #4
;;;393            | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
;;;394            | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
;;;395            | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
;;;396    
;;;397        X &= 0x0FFFFFFF;
00012a  f0204070          BIC      r0,r0,#0xf0000000
;;;398        Y &= 0x0FFFFFFF;
00012e  f0214170          BIC      r1,r1,#0xf0000000
;;;399    
;;;400        /*
;;;401         * calculate subkeys
;;;402         */
;;;403        for( i = 0; i < 16; i++ )
000132  2400              MOVS     r4,#0
000134  e0e8              B        |L15.776|
                  |L15.310|
;;;404        {
;;;405            if( i < 2 || i == 8 || i == 15 )
000136  2c02              CMP      r4,#2
000138  db03              BLT      |L15.322|
00013a  2c08              CMP      r4,#8
00013c  d001              BEQ      |L15.322|
00013e  2c0f              CMP      r4,#0xf
000140  d10a              BNE      |L15.344|
                  |L15.322|
;;;406            {
;;;407                X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
000142  0046              LSLS     r6,r0,#1
000144  ea4666d0          ORR      r6,r6,r0,LSR #27
000148  f0264070          BIC      r0,r6,#0xf0000000
;;;408                Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
00014c  004e              LSLS     r6,r1,#1
00014e  ea4666d1          ORR      r6,r6,r1,LSR #27
000152  f0264170          BIC      r1,r6,#0xf0000000
000156  e009              B        |L15.364|
                  |L15.344|
;;;409            }
;;;410            else
;;;411            {
;;;412                X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
000158  0086              LSLS     r6,r0,#2
00015a  ea466690          ORR      r6,r6,r0,LSR #26
00015e  f0264070          BIC      r0,r6,#0xf0000000
;;;413                Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
000162  008e              LSLS     r6,r1,#2
000164  ea466691          ORR      r6,r6,r1,LSR #26
000168  f0264170          BIC      r1,r6,#0xf0000000
                  |L15.364|
;;;414            }
;;;415    
;;;416            *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
00016c  f04f5610          MOV      r6,#0x24000000
000170  ea061600          AND      r6,r6,r0,LSL #4
000174  f04f5780          MOV      r7,#0x10000000
000178  ea077700          AND      r7,r7,r0,LSL #28
00017c  433e              ORRS     r6,r6,r7
00017e  f04f6700          MOV      r7,#0x8000000
000182  ea073780          AND      r7,r7,r0,LSL #14
000186  433e              ORRS     r6,r6,r7
000188  f04f7702          MOV      r7,#0x2080000
00018c  ea074780          AND      r7,r7,r0,LSL #18
000190  433e              ORRS     r6,r6,r7
000192  f04f7780          MOV      r7,#0x1000000
000196  ea071780          AND      r7,r7,r0,LSL #6
00019a  433e              ORRS     r6,r6,r7
00019c  f44f1700          MOV      r7,#0x200000
0001a0  ea072740          AND      r7,r7,r0,LSL #9
0001a4  433e              ORRS     r6,r6,r7
0001a6  f44f1780          MOV      r7,#0x100000
0001aa  ea070750          AND      r7,r7,r0,LSR #1
0001ae  433e              ORRS     r6,r6,r7
0001b0  f44f2780          MOV      r7,#0x40000
0001b4  ea072780          AND      r7,r7,r0,LSL #10
0001b8  433e              ORRS     r6,r6,r7
0001ba  f44f3700          MOV      r7,#0x20000
0001be  ea070780          AND      r7,r7,r0,LSL #2
0001c2  433e              ORRS     r6,r6,r7
0001c4  f44f3780          MOV      r7,#0x10000
0001c8  ea072790          AND      r7,r7,r0,LSR #10
0001cc  433e              ORRS     r6,r6,r7
0001ce  f44f5700          MOV      r7,#0x2000
0001d2  ea073751          AND      r7,r7,r1,LSR #13
0001d6  433e              ORRS     r6,r6,r7
0001d8  f44f5780          MOV      r7,#0x1000
0001dc  ea071711          AND      r7,r7,r1,LSR #4
0001e0  433e              ORRS     r6,r6,r7
0001e2  f44f6700          MOV      r7,#0x800
0001e6  ea071781          AND      r7,r7,r1,LSL #6
0001ea  433e              ORRS     r6,r6,r7
0001ec  f44f6780          MOV      r7,#0x400
0001f0  ea070751          AND      r7,r7,r1,LSR #1
0001f4  433e              ORRS     r6,r6,r7
0001f6  f44f7700          MOV      r7,#0x200
0001fa  ea073791          AND      r7,r7,r1,LSR #14
0001fe  433e              ORRS     r6,r6,r7
000200  f4017780          AND      r7,r1,#0x100
000204  433e              ORRS     r6,r6,r7
000206  2720              MOVS     r7,#0x20
000208  ea071751          AND      r7,r7,r1,LSR #5
00020c  433e              ORRS     r6,r6,r7
00020e  2710              MOVS     r7,#0x10
000210  ea072791          AND      r7,r7,r1,LSR #10
000214  433e              ORRS     r6,r6,r7
000216  2708              MOVS     r7,#8
000218  ea0707d1          AND      r7,r7,r1,LSR #3
00021c  433e              ORRS     r6,r6,r7
00021e  2704              MOVS     r7,#4
000220  ea074791          AND      r7,r7,r1,LSR #18
000224  433e              ORRS     r6,r6,r7
000226  2702              MOVS     r7,#2
000228  ea076791          AND      r7,r7,r1,LSR #26
00022c  433e              ORRS     r6,r6,r7
00022e  f3c16700          UBFX     r7,r1,#24,#1
000232  433e              ORRS     r6,r6,r7
000234  c340              STM      r3!,{r6}
;;;417                    | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
;;;418                    | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
;;;419                    | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
;;;420                    | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
;;;421                    | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
;;;422                    | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
;;;423                    | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
;;;424                    | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
;;;425                    | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
;;;426                    | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
;;;427    
;;;428            *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
000236  f04f5600          MOV      r6,#0x20000000
00023a  ea0636c0          AND      r6,r6,r0,LSL #15
00023e  f04f5780          MOV      r7,#0x10000000
000242  ea074740          AND      r7,r7,r0,LSL #17
000246  433e              ORRS     r6,r6,r7
000248  f04f6700          MOV      r7,#0x8000000
00024c  ea072780          AND      r7,r7,r0,LSL #10
000250  433e              ORRS     r6,r6,r7
000252  f04f6780          MOV      r7,#0x4000000
000256  ea075780          AND      r7,r7,r0,LSL #22
00025a  433e              ORRS     r6,r6,r7
00025c  f04f7700          MOV      r7,#0x2000000
000260  ea070790          AND      r7,r7,r0,LSR #2
000264  433e              ORRS     r6,r6,r7
000266  f04f7780          MOV      r7,#0x1000000
00026a  ea070740          AND      r7,r7,r0,LSL #1
00026e  433e              ORRS     r6,r6,r7
000270  f44f1700          MOV      r7,#0x200000
000274  ea074700          AND      r7,r7,r0,LSL #16
000278  433e              ORRS     r6,r6,r7
00027a  f44f1780          MOV      r7,#0x100000
00027e  ea0727c0          AND      r7,r7,r0,LSL #11
000282  433e              ORRS     r6,r6,r7
000284  f44f2700          MOV      r7,#0x80000
000288  ea0707c0          AND      r7,r7,r0,LSL #3
00028c  433e              ORRS     r6,r6,r7
00028e  f44f2780          MOV      r7,#0x40000
000292  ea071790          AND      r7,r7,r0,LSR #6
000296  433e              ORRS     r6,r6,r7
000298  f44f3700          MOV      r7,#0x20000
00029c  ea0737c0          AND      r7,r7,r0,LSL #15
0002a0  433e              ORRS     r6,r6,r7
0002a2  f44f3780          MOV      r7,#0x10000
0002a6  ea071710          AND      r7,r7,r0,LSR #4
0002aa  433e              ORRS     r6,r6,r7
0002ac  f44f5700          MOV      r7,#0x2000
0002b0  ea070791          AND      r7,r7,r1,LSR #2
0002b4  433e              ORRS     r6,r6,r7
0002b6  f44f5780          MOV      r7,#0x1000
0002ba  ea072701          AND      r7,r7,r1,LSL #8
0002be  433e              ORRS     r6,r6,r7
0002c0  f6400708          MOV      r7,#0x808
0002c4  ea073791          AND      r7,r7,r1,LSR #14
0002c8  433e              ORRS     r6,r6,r7
0002ca  f44f6780          MOV      r7,#0x400
0002ce  ea072751          AND      r7,r7,r1,LSR #9
0002d2  433e              ORRS     r6,r6,r7
0002d4  f4017700          AND      r7,r1,#0x200
0002d8  433e              ORRS     r6,r6,r7
0002da  f44f7780          MOV      r7,#0x100
0002de  ea0717c1          AND      r7,r7,r1,LSL #7
0002e2  433e              ORRS     r6,r6,r7
0002e4  2720              MOVS     r7,#0x20
0002e6  ea0717d1          AND      r7,r7,r1,LSR #7
0002ea  433e              ORRS     r6,r6,r7
0002ec  2711              MOVS     r7,#0x11
0002ee  ea0707d1          AND      r7,r7,r1,LSR #3
0002f2  433e              ORRS     r6,r6,r7
0002f4  2704              MOVS     r7,#4
0002f6  ea070781          AND      r7,r7,r1,LSL #2
0002fa  433e              ORRS     r6,r6,r7
0002fc  2702              MOVS     r7,#2
0002fe  ea075751          AND      r7,r7,r1,LSR #21
000302  433e              ORRS     r6,r6,r7
000304  c340              STM      r3!,{r6}
000306  1c64              ADDS     r4,r4,#1              ;403
                  |L15.776|
000308  2c10              CMP      r4,#0x10              ;403
00030a  f6ffaf14          BLT      |L15.310|
;;;429                    | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
;;;430                    | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
;;;431                    | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
;;;432                    | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
;;;433                    | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
;;;434                    | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
;;;435                    | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
;;;436                    | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
;;;437                    | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
;;;438                    | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
;;;439        }
;;;440    }
00030e  bdf0              POP      {r4-r7,pc}
;;;441    
                          ENDP

                  |L15.784|
                          DCD      LHs
                  |L15.788|
                          DCD      ||RHs||

                          AREA ||i.des_setkey_dec||, CODE, READONLY, ALIGN=1

                  des_setkey_dec PROC
;;;454     */
;;;455    int des_setkey_dec( des_context *ctx, const unsigned char key[DES_KEY_SIZE] )
000000  b570              PUSH     {r4-r6,lr}
;;;456    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;457        int i;
;;;458    
;;;459        des_setkey( ctx->sk, key );
000006  4631              MOV      r1,r6
000008  1d20              ADDS     r0,r4,#4
00000a  f7fffffe          BL       des_setkey
;;;460    
;;;461        for( i = 0; i < 16; i += 2 )
00000e  2500              MOVS     r5,#0
000010  e01d              B        |L16.78|
                  |L16.18|
;;;462        {
;;;463            SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
000012  1d21              ADDS     r1,r4,#4
000014  f8510025          LDR      r0,[r1,r5,LSL #2]
000018  f1c5021e          RSB      r2,r5,#0x1e
00001c  f8512022          LDR      r2,[r1,r2,LSL #2]
000020  f8412025          STR      r2,[r1,r5,LSL #2]
000024  f1c5021e          RSB      r2,r5,#0x1e
000028  f8410022          STR      r0,[r1,r2,LSL #2]
00002c  2000              MOVS     r0,#0
;;;464            SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
00002e  1c6a              ADDS     r2,r5,#1
000030  f8510022          LDR      r0,[r1,r2,LSL #2]
000034  f1c5021f          RSB      r2,r5,#0x1f
000038  f8513022          LDR      r3,[r1,r2,LSL #2]
00003c  1c6a              ADDS     r2,r5,#1
00003e  f8413022          STR      r3,[r1,r2,LSL #2]
000042  f1c5021f          RSB      r2,r5,#0x1f
000046  f8410022          STR      r0,[r1,r2,LSL #2]
00004a  2000              MOVS     r0,#0
00004c  1cad              ADDS     r5,r5,#2              ;461
                  |L16.78|
00004e  2d10              CMP      r5,#0x10              ;461
000050  dbdf              BLT      |L16.18|
;;;465        }
;;;466    
;;;467        return( 0 );
000052  2000              MOVS     r0,#0
;;;468    }
000054  bd70              POP      {r4-r6,pc}
;;;469    
                          ENDP


                          AREA ||i.des_setkey_enc||, CODE, READONLY, ALIGN=1

                  des_setkey_enc PROC
;;;444     */
;;;445    int des_setkey_enc( des_context *ctx, const unsigned char key[DES_KEY_SIZE] )
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;447        des_setkey( ctx->sk, key );
000006  4629              MOV      r1,r5
000008  1d20              ADDS     r0,r4,#4
00000a  f7fffffe          BL       des_setkey
;;;448    
;;;449        return( 0 );
00000e  2000              MOVS     r0,#0
;;;450    }
000010  bd70              POP      {r4-r6,pc}
;;;451    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ||SB1||
                          DCD      0x01010400
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x01010404
                          DCD      0x01010004
                          DCD      0x00010404
                          DCD      0x00000004
                          DCD      0x00010000
                          DCD      0x00000400
                          DCD      0x01010400
                          DCD      0x01010404
                          DCD      0x00000400
                          DCD      0x01000404
                          DCD      0x01010004
                          DCD      0x01000000
                          DCD      0x00000004
                          DCD      0x00000404
                          DCD      0x01000400
                          DCD      0x01000400
                          DCD      0x00010400
                          DCD      0x00010400
                          DCD      0x01010000
                          DCD      0x01010000
                          DCD      0x01000404
                          DCD      0x00010004
                          DCD      0x01000004
                          DCD      0x01000004
                          DCD      0x00010004
                          DCD      0x00000000
                          DCD      0x00000404
                          DCD      0x00010404
                          DCD      0x01000000
                          DCD      0x00010000
                          DCD      0x01010404
                          DCD      0x00000004
                          DCD      0x01010000
                          DCD      0x01010400
                          DCD      0x01000000
                          DCD      0x01000000
                          DCD      0x00000400
                          DCD      0x01010004
                          DCD      0x00010000
                          DCD      0x00010400
                          DCD      0x01000004
                          DCD      0x00000400
                          DCD      0x00000004
                          DCD      0x01000404
                          DCD      0x00010404
                          DCD      0x01010404
                          DCD      0x00010004
                          DCD      0x01010000
                          DCD      0x01000404
                          DCD      0x01000004
                          DCD      0x00000404
                          DCD      0x00010404
                          DCD      0x01010400
                          DCD      0x00000404
                          DCD      0x01000400
                          DCD      0x01000400
                          DCD      0x00000000
                          DCD      0x00010004
                          DCD      0x00010400
                          DCD      0x00000000
                          DCD      0x01010004
                  ||SB2||
                          DCD      0x80108020
                          DCD      0x80008000
                          DCD      0x00008000
                          DCD      0x00108020
                          DCD      0x00100000
                          DCD      0x00000020
                          DCD      0x80100020
                          DCD      0x80008020
                          DCD      0x80000020
                          DCD      0x80108020
                          DCD      0x80108000
                          DCD      0x80000000
                          DCD      0x80008000
                          DCD      0x00100000
                          DCD      0x00000020
                          DCD      0x80100020
                          DCD      0x00108000
                          DCD      0x00100020
                          DCD      0x80008020
                          DCD      0x00000000
                          DCD      0x80000000
                          DCD      0x00008000
                          DCD      0x00108020
                          DCD      0x80100000
                          DCD      0x00100020
                          DCD      0x80000020
                          DCD      0x00000000
                          DCD      0x00108000
                          DCD      0x00008020
                          DCD      0x80108000
                          DCD      0x80100000
                          DCD      0x00008020
                          DCD      0x00000000
                          DCD      0x00108020
                          DCD      0x80100020
                          DCD      0x00100000
                          DCD      0x80008020
                          DCD      0x80100000
                          DCD      0x80108000
                          DCD      0x00008000
                          DCD      0x80100000
                          DCD      0x80008000
                          DCD      0x00000020
                          DCD      0x80108020
                          DCD      0x00108020
                          DCD      0x00000020
                          DCD      0x00008000
                          DCD      0x80000000
                          DCD      0x00008020
                          DCD      0x80108000
                          DCD      0x00100000
                          DCD      0x80000020
                          DCD      0x00100020
                          DCD      0x80008020
                          DCD      0x80000020
                          DCD      0x00100020
                          DCD      0x00108000
                          DCD      0x00000000
                          DCD      0x80008000
                          DCD      0x00008020
                          DCD      0x80000000
                          DCD      0x80100020
                          DCD      0x80108020
                          DCD      0x00108000
                  ||SB3||
                          DCD      0x00000208
                          DCD      0x08020200
                          DCD      0x00000000
                          DCD      0x08020008
                          DCD      0x08000200
                          DCD      0x00000000
                          DCD      0x00020208
                          DCD      0x08000200
                          DCD      0x00020008
                          DCD      0x08000008
                          DCD      0x08000008
                          DCD      0x00020000
                          DCD      0x08020208
                          DCD      0x00020008
                          DCD      0x08020000
                          DCD      0x00000208
                          DCD      0x08000000
                          DCD      0x00000008
                          DCD      0x08020200
                          DCD      0x00000200
                          DCD      0x00020200
                          DCD      0x08020000
                          DCD      0x08020008
                          DCD      0x00020208
                          DCD      0x08000208
                          DCD      0x00020200
                          DCD      0x00020000
                          DCD      0x08000208
                          DCD      0x00000008
                          DCD      0x08020208
                          DCD      0x00000200
                          DCD      0x08000000
                          DCD      0x08020200
                          DCD      0x08000000
                          DCD      0x00020008
                          DCD      0x00000208
                          DCD      0x00020000
                          DCD      0x08020200
                          DCD      0x08000200
                          DCD      0x00000000
                          DCD      0x00000200
                          DCD      0x00020008
                          DCD      0x08020208
                          DCD      0x08000200
                          DCD      0x08000008
                          DCD      0x00000200
                          DCD      0x00000000
                          DCD      0x08020008
                          DCD      0x08000208
                          DCD      0x00020000
                          DCD      0x08000000
                          DCD      0x08020208
                          DCD      0x00000008
                          DCD      0x00020208
                          DCD      0x00020200
                          DCD      0x08000008
                          DCD      0x08020000
                          DCD      0x08000208
                          DCD      0x00000208
                          DCD      0x08020000
                          DCD      0x00020208
                          DCD      0x00000008
                          DCD      0x08020008
                          DCD      0x00020200
                  ||SB4||
                          DCD      0x00802001
                          DCD      0x00002081
                          DCD      0x00002081
                          DCD      0x00000080
                          DCD      0x00802080
                          DCD      0x00800081
                          DCD      0x00800001
                          DCD      0x00002001
                          DCD      0x00000000
                          DCD      0x00802000
                          DCD      0x00802000
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00000000
                          DCD      0x00800080
                          DCD      0x00800001
                          DCD      0x00000001
                          DCD      0x00002000
                          DCD      0x00800000
                          DCD      0x00802001
                          DCD      0x00000080
                          DCD      0x00800000
                          DCD      0x00002001
                          DCD      0x00002080
                          DCD      0x00800081
                          DCD      0x00000001
                          DCD      0x00002080
                          DCD      0x00800080
                          DCD      0x00002000
                          DCD      0x00802080
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00800080
                          DCD      0x00800001
                          DCD      0x00802000
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00802000
                          DCD      0x00002080
                          DCD      0x00800080
                          DCD      0x00800081
                          DCD      0x00000001
                          DCD      0x00802001
                          DCD      0x00002081
                          DCD      0x00002081
                          DCD      0x00000080
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00000001
                          DCD      0x00002000
                          DCD      0x00800001
                          DCD      0x00002001
                          DCD      0x00802080
                          DCD      0x00800081
                          DCD      0x00002001
                          DCD      0x00002080
                          DCD      0x00800000
                          DCD      0x00802001
                          DCD      0x00000080
                          DCD      0x00800000
                          DCD      0x00002000
                          DCD      0x00802080
                  ||SB5||
                          DCD      0x00000100
                          DCD      0x02080100
                          DCD      0x02080000
                          DCD      0x42000100
                          DCD      0x00080000
                          DCD      0x00000100
                          DCD      0x40000000
                          DCD      0x02080000
                          DCD      0x40080100
                          DCD      0x00080000
                          DCD      0x02000100
                          DCD      0x40080100
                          DCD      0x42000100
                          DCD      0x42080000
                          DCD      0x00080100
                          DCD      0x40000000
                          DCD      0x02000000
                          DCD      0x40080000
                          DCD      0x40080000
                          DCD      0x00000000
                          DCD      0x40000100
                          DCD      0x42080100
                          DCD      0x42080100
                          DCD      0x02000100
                          DCD      0x42080000
                          DCD      0x40000100
                          DCD      0x00000000
                          DCD      0x42000000
                          DCD      0x02080100
                          DCD      0x02000000
                          DCD      0x42000000
                          DCD      0x00080100
                          DCD      0x00080000
                          DCD      0x42000100
                          DCD      0x00000100
                          DCD      0x02000000
                          DCD      0x40000000
                          DCD      0x02080000
                          DCD      0x42000100
                          DCD      0x40080100
                          DCD      0x02000100
                          DCD      0x40000000
                          DCD      0x42080000
                          DCD      0x02080100
                          DCD      0x40080100
                          DCD      0x00000100
                          DCD      0x02000000
                          DCD      0x42080000
                          DCD      0x42080100
                          DCD      0x00080100
                          DCD      0x42000000
                          DCD      0x42080100
                          DCD      0x02080000
                          DCD      0x00000000
                          DCD      0x40080000
                          DCD      0x42000000
                          DCD      0x00080100
                          DCD      0x02000100
                          DCD      0x40000100
                          DCD      0x00080000
                          DCD      0x00000000
                          DCD      0x40080000
                          DCD      0x02080100
                          DCD      0x40000100
                  ||SB6||
                          DCD      0x20000010
                          DCD      0x20400000
                          DCD      0x00004000
                          DCD      0x20404010
                          DCD      0x20400000
                          DCD      0x00000010
                          DCD      0x20404010
                          DCD      0x00400000
                          DCD      0x20004000
                          DCD      0x00404010
                          DCD      0x00400000
                          DCD      0x20000010
                          DCD      0x00400010
                          DCD      0x20004000
                          DCD      0x20000000
                          DCD      0x00004010
                          DCD      0x00000000
                          DCD      0x00400010
                          DCD      0x20004010
                          DCD      0x00004000
                          DCD      0x00404000
                          DCD      0x20004010
                          DCD      0x00000010
                          DCD      0x20400010
                          DCD      0x20400010
                          DCD      0x00000000
                          DCD      0x00404010
                          DCD      0x20404000
                          DCD      0x00004010
                          DCD      0x00404000
                          DCD      0x20404000
                          DCD      0x20000000
                          DCD      0x20004000
                          DCD      0x00000010
                          DCD      0x20400010
                          DCD      0x00404000
                          DCD      0x20404010
                          DCD      0x00400000
                          DCD      0x00004010
                          DCD      0x20000010
                          DCD      0x00400000
                          DCD      0x20004000
                          DCD      0x20000000
                          DCD      0x00004010
                          DCD      0x20000010
                          DCD      0x20404010
                          DCD      0x00404000
                          DCD      0x20400000
                          DCD      0x00404010
                          DCD      0x20404000
                          DCD      0x00000000
                          DCD      0x20400010
                          DCD      0x00000010
                          DCD      0x00004000
                          DCD      0x20400000
                          DCD      0x00404010
                          DCD      0x00004000
                          DCD      0x00400010
                          DCD      0x20004010
                          DCD      0x00000000
                          DCD      0x20404000
                          DCD      0x20000000
                          DCD      0x00400010
                          DCD      0x20004010
                  ||SB7||
                          DCD      0x00200000
                          DCD      0x04200002
                          DCD      0x04000802
                          DCD      0x00000000
                          DCD      0x00000800
                          DCD      0x04000802
                          DCD      0x00200802
                          DCD      0x04200800
                          DCD      0x04200802
                          DCD      0x00200000
                          DCD      0x00000000
                          DCD      0x04000002
                          DCD      0x00000002
                          DCD      0x04000000
                          DCD      0x04200002
                          DCD      0x00000802
                          DCD      0x04000800
                          DCD      0x00200802
                          DCD      0x00200002
                          DCD      0x04000800
                          DCD      0x04000002
                          DCD      0x04200000
                          DCD      0x04200800
                          DCD      0x00200002
                          DCD      0x04200000
                          DCD      0x00000800
                          DCD      0x00000802
                          DCD      0x04200802
                          DCD      0x00200800
                          DCD      0x00000002
                          DCD      0x04000000
                          DCD      0x00200800
                          DCD      0x04000000
                          DCD      0x00200800
                          DCD      0x00200000
                          DCD      0x04000802
                          DCD      0x04000802
                          DCD      0x04200002
                          DCD      0x04200002
                          DCD      0x00000002
                          DCD      0x00200002
                          DCD      0x04000000
                          DCD      0x04000800
                          DCD      0x00200000
                          DCD      0x04200800
                          DCD      0x00000802
                          DCD      0x00200802
                          DCD      0x04200800
                          DCD      0x00000802
                          DCD      0x04000002
                          DCD      0x04200802
                          DCD      0x04200000
                          DCD      0x00200800
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x04200802
                          DCD      0x00000000
                          DCD      0x00200802
                          DCD      0x04200000
                          DCD      0x00000800
                          DCD      0x04000002
                          DCD      0x04000800
                          DCD      0x00000800
                          DCD      0x00200002
                  ||SB8||
                          DCD      0x10001040
                          DCD      0x00001000
                          DCD      0x00040000
                          DCD      0x10041040
                          DCD      0x10000000
                          DCD      0x10001040
                          DCD      0x00000040
                          DCD      0x10000000
                          DCD      0x00040040
                          DCD      0x10040000
                          DCD      0x10041040
                          DCD      0x00041000
                          DCD      0x10041000
                          DCD      0x00041040
                          DCD      0x00001000
                          DCD      0x00000040
                          DCD      0x10040000
                          DCD      0x10000040
                          DCD      0x10001000
                          DCD      0x00001040
                          DCD      0x00041000
                          DCD      0x00040040
                          DCD      0x10040040
                          DCD      0x10041000
                          DCD      0x00001040
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x10040040
                          DCD      0x10000040
                          DCD      0x10001000
                          DCD      0x00041040
                          DCD      0x00040000
                          DCD      0x00041040
                          DCD      0x00040000
                          DCD      0x10041000
                          DCD      0x00001000
                          DCD      0x00000040
                          DCD      0x10040040
                          DCD      0x00001000
                          DCD      0x00041040
                          DCD      0x10001000
                          DCD      0x00000040
                          DCD      0x10000040
                          DCD      0x10040000
                          DCD      0x10040040
                          DCD      0x10000000
                          DCD      0x00040000
                          DCD      0x10001040
                          DCD      0x00000000
                          DCD      0x10041040
                          DCD      0x00040040
                          DCD      0x10000040
                          DCD      0x10040000
                          DCD      0x10001000
                          DCD      0x10001040
                          DCD      0x00000000
                          DCD      0x10041040
                          DCD      0x00041000
                          DCD      0x00041000
                          DCD      0x00001040
                          DCD      0x00001040
                          DCD      0x00040040
                          DCD      0x10000000
                          DCD      0x10041000
                  LHs
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000100
                          DCD      0x00000101
                          DCD      0x00010000
                          DCD      0x00010001
                          DCD      0x00010100
                          DCD      0x00010101
                          DCD      0x01000000
                          DCD      0x01000001
                          DCD      0x01000100
                          DCD      0x01000101
                          DCD      0x01010000
                          DCD      0x01010001
                          DCD      0x01010100
                          DCD      0x01010101
                  ||RHs||
                          DCD      0x00000000
                          DCD      0x01000000
                          DCD      0x00010000
                          DCD      0x01010000
                          DCD      0x00000100
                          DCD      0x01000100
                          DCD      0x00010100
                          DCD      0x01010100
                          DCD      0x00000001
                          DCD      0x01000001
                          DCD      0x00010001
                          DCD      0x01010001
                          DCD      0x00000101
                          DCD      0x01000101
                          DCD      0x00010101
                          DCD      0x01010101
                  odd_parity_table
000880  01020407          DCB      0x01,0x02,0x04,0x07
000884  080b0d0e          DCB      0x08,0x0b,0x0d,0x0e
000888  10131516          DCB      0x10,0x13,0x15,0x16
00088c  191a1c1f          DCB      0x19,0x1a,0x1c,0x1f
000890  20232526          DCB      0x20,0x23,0x25,0x26
000894  292a2c2f          DCB      0x29,0x2a,0x2c,0x2f
000898  31323437          DCB      0x31,0x32,0x34,0x37
00089c  383b3d3e          DCB      0x38,0x3b,0x3d,0x3e
0008a0  40434546          DCB      0x40,0x43,0x45,0x46
0008a4  494a4c4f          DCB      0x49,0x4a,0x4c,0x4f
0008a8  51525457          DCB      0x51,0x52,0x54,0x57
0008ac  585b5d5e          DCB      0x58,0x5b,0x5d,0x5e
0008b0  61626467          DCB      0x61,0x62,0x64,0x67
0008b4  686b6d6e          DCB      0x68,0x6b,0x6d,0x6e
0008b8  70737576          DCB      0x70,0x73,0x75,0x76
0008bc  797a7c7f          DCB      0x79,0x7a,0x7c,0x7f
0008c0  80838586          DCB      0x80,0x83,0x85,0x86
0008c4  898a8c8f          DCB      0x89,0x8a,0x8c,0x8f
0008c8  91929497          DCB      0x91,0x92,0x94,0x97
0008cc  989b9d9e          DCB      0x98,0x9b,0x9d,0x9e
0008d0  a1a2a4a7          DCB      0xa1,0xa2,0xa4,0xa7
0008d4  a8abadae          DCB      0xa8,0xab,0xad,0xae
0008d8  b0b3b5b6          DCB      0xb0,0xb3,0xb5,0xb6
0008dc  b9babcbf          DCB      0xb9,0xba,0xbc,0xbf
0008e0  c1c2c4c7          DCB      0xc1,0xc2,0xc4,0xc7
0008e4  c8cbcdce          DCB      0xc8,0xcb,0xcd,0xce
0008e8  d0d3d5d6          DCB      0xd0,0xd3,0xd5,0xd6
0008ec  d9dadcdf          DCB      0xd9,0xda,0xdc,0xdf
0008f0  e0e3e5e6          DCB      0xe0,0xe3,0xe5,0xe6
0008f4  e9eaecef          DCB      0xe9,0xea,0xec,0xef
0008f8  f1f2f4f7          DCB      0xf1,0xf2,0xf4,0xf7
0008fc  f8fbfdfe          DCB      0xf8,0xfb,0xfd,0xfe
                  weak_key_table
000900  01010101          DCB      0x01,0x01,0x01,0x01
000904  01010101          DCB      0x01,0x01,0x01,0x01
000908  fefefefe          DCB      0xfe,0xfe,0xfe,0xfe
00090c  fefefefe          DCB      0xfe,0xfe,0xfe,0xfe
000910  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
000914  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
000918  e0e0e0e0          DCB      0xe0,0xe0,0xe0,0xe0
00091c  f1f1f1f1          DCB      0xf1,0xf1,0xf1,0xf1
000920  011f011f          DCB      0x01,0x1f,0x01,0x1f
000924  010e010e          DCB      0x01,0x0e,0x01,0x0e
000928  1f011f01          DCB      0x1f,0x01,0x1f,0x01
00092c  0e010e01          DCB      0x0e,0x01,0x0e,0x01
000930  01e001e0          DCB      0x01,0xe0,0x01,0xe0
000934  01f101f1          DCB      0x01,0xf1,0x01,0xf1
000938  e001e001          DCB      0xe0,0x01,0xe0,0x01
00093c  f101f101          DCB      0xf1,0x01,0xf1,0x01
000940  01fe01fe          DCB      0x01,0xfe,0x01,0xfe
000944  01fe01fe          DCB      0x01,0xfe,0x01,0xfe
000948  fe01fe01          DCB      0xfe,0x01,0xfe,0x01
00094c  fe01fe01          DCB      0xfe,0x01,0xfe,0x01
000950  1fe01fe0          DCB      0x1f,0xe0,0x1f,0xe0
000954  0ef10ef1          DCB      0x0e,0xf1,0x0e,0xf1
000958  e01fe01f          DCB      0xe0,0x1f,0xe0,0x1f
00095c  f10ef10e          DCB      0xf1,0x0e,0xf1,0x0e
000960  1ffe1ffe          DCB      0x1f,0xfe,0x1f,0xfe
000964  0efe0efe          DCB      0x0e,0xfe,0x0e,0xfe
000968  fe1ffe1f          DCB      0xfe,0x1f,0xfe,0x1f
00096c  fe0efe0e          DCB      0xfe,0x0e,0xfe,0x0e
000970  e0fee0fe          DCB      0xe0,0xfe,0xe0,0xfe
000974  f1fef1fe          DCB      0xf1,0xfe,0xf1,0xfe
000978  fee0fee0          DCB      0xfe,0xe0,0xfe,0xe0
00097c  fef1fef1          DCB      0xfe,0xf1,0xfe,0xf1
