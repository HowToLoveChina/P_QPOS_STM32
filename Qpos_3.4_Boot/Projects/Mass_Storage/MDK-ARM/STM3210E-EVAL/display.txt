; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\display.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\display.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\display.crf ..\src\Display.c]
                          THUMB

                          AREA ||i.ClearALLPage||, CODE, READONLY, ALIGN=1

                  ClearALLPage PROC
;;;518    //清楚某一个PAge的column到LCD_COLUMN_NUM
;;;519    void ClearALLPage(unsigned char page,unsigned char column)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;521        unsigned char i = 0;
000006  2500              MOVS     r5,#0
;;;522        HAL_DISP_SetXY(page,0);	    
000008  2100              MOVS     r1,#0
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       HAL_DISP_SetXY
;;;523        for(i=column;i<LCD_COLUMN_NUM;i++)	 	
000010  4625              MOV      r5,r4
000012  e005              B        |L1.32|
                  |L1.20|
;;;524        {				
;;;525            HAL_DISP_WriteByte(0x00,LCD_DATA);
000014  2102              MOVS     r1,#2
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       HAL_DISP_WriteByte
00001c  1c68              ADDS     r0,r5,#1              ;523
00001e  b2c5              UXTB     r5,r0                 ;523
                  |L1.32|
000020  2d83              CMP      r5,#0x83              ;523
000022  dbf7              BLT      |L1.20|
;;;526        }      
;;;527    }
000024  bd70              POP      {r4-r6,pc}
;;;528    //清楚某一个PAge的column到LCD_COLUMN_NUM
                          ENDP


                          AREA ||i.ClearLines||, CODE, READONLY, ALIGN=1

                  ClearLines PROC
;;;528    //清楚某一个PAge的column到LCD_COLUMN_NUM
;;;529    void ClearLines(unsigned char page1,unsigned char page2)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;530    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;531       unsigned char i,j;    
;;;532    	for(i=page1;i<page2+1;i++)				
000008  462c              MOV      r4,r5
00000a  e00f              B        |L2.44|
                  |L2.12|
;;;533    	{
;;;534    		HAL_DISP_SetXY(i,0);	    
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       HAL_DISP_SetXY
;;;535    		for(j=0;j<LCD_COLUMN_NUM;j++)	 	
000014  2700              MOVS     r7,#0
000016  e005              B        |L2.36|
                  |L2.24|
;;;536    		{				
;;;537    			HAL_DISP_WriteByte(0x00,LCD_DATA);
000018  2102              MOVS     r1,#2
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       HAL_DISP_WriteByte
000020  1c78              ADDS     r0,r7,#1              ;535
000022  b2c7              UXTB     r7,r0                 ;535
                  |L2.36|
000024  2f83              CMP      r7,#0x83              ;535
000026  dbf7              BLT      |L2.24|
000028  1c60              ADDS     r0,r4,#1              ;532
00002a  b2c4              UXTB     r4,r0                 ;532
                  |L2.44|
00002c  1c70              ADDS     r0,r6,#1              ;532
00002e  4284              CMP      r4,r0                 ;532
000030  dbec              BLT      |L2.12|
;;;538    		}
;;;539    	}     
;;;540    }
000032  e8bd81f0          POP      {r4-r8,pc}
;;;541    //*******************************************************
                          ENDP


                          AREA ||i.Display_Init||, CODE, READONLY, ALIGN=1

                  Display_Init PROC
;;;695    }
;;;696    void Display_Init(void)
000000  b510              PUSH     {r4,lr}
;;;697    {
;;;698        ST7567_GPIO_Init_QY();
000002  f7fffffe          BL       ST7567_GPIO_Init_QY
;;;699    	SPI_Init_QY();
000006  f7fffffe          BL       SPI_Init_QY
;;;700    	ST7567_Power_On_QY();	
00000a  f7fffffe          BL       ST7567_Power_On_QY
;;;701        HAL_DISP_CLS();  
00000e  f7fffffe          BL       HAL_DISP_CLS
;;;702    }
000012  bd10              POP      {r4,pc}
;;;703    //*****************************end of file***********************************************
                          ENDP


                          AREA ||i.HAL_DISP_CLS||, CODE, READONLY, ALIGN=1

                  HAL_DISP_CLS PROC
;;;481    **/
;;;482    void HAL_DISP_CLS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;483    {
;;;484    	unsigned char i,j;    
;;;485    	for(i=0;i<LCD_LINE_NUM;i++)				
000002  2400              MOVS     r4,#0
000004  e00f              B        |L4.38|
                  |L4.6|
;;;486    	{
;;;487    		HAL_DISP_SetXY(i,0);	    
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_DISP_SetXY
;;;488    		for(j=0;j<LCD_COLUMN_NUM;j++)	 	
00000e  2500              MOVS     r5,#0
000010  e005              B        |L4.30|
                  |L4.18|
;;;489    		{				
;;;490    			HAL_DISP_WriteByte(0,LCD_DATA);
000012  2102              MOVS     r1,#2
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       HAL_DISP_WriteByte
00001a  1c68              ADDS     r0,r5,#1              ;488
00001c  b2c5              UXTB     r5,r0                 ;488
                  |L4.30|
00001e  2d83              CMP      r5,#0x83              ;488
000020  dbf7              BLT      |L4.18|
000022  1c60              ADDS     r0,r4,#1              ;485
000024  b2c4              UXTB     r4,r0                 ;485
                  |L4.38|
000026  2c41              CMP      r4,#0x41              ;485
000028  dbed              BLT      |L4.6|
;;;491    		}
;;;492    	}
;;;493    }
00002a  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP


                          AREA ||i.HAL_DISP_ResetLCD||, CODE, READONLY, ALIGN=2

                  HAL_DISP_ResetLCD PROC
;;;545    //********************************************************/
;;;546    void HAL_DISP_ResetLCD(void)
000000  b510              PUSH     {r4,lr}
;;;547    {
;;;548    											//reset,because the LCD need initialize the register,
;;;549    											//so the reset need some times,before write,we set
;;;550    											//1ms,for reset,and 5ms after reset.
;;;551    	GPIO_ResetBits(LCD_RESBGPIO,LCD_RESBGPIOPIN);	
000002  f44f4180          MOV      r1,#0x4000
000006  4807              LDR      r0,|L5.36|
000008  f7fffffe          BL       GPIO_ResetBits
;;;552    	Delay_ms(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       Delay_ms
;;;553    	GPIO_SetBits(LCD_RESBGPIO,LCD_RESBGPIOPIN);
000012  f44f4180          MOV      r1,#0x4000
000016  4803              LDR      r0,|L5.36|
000018  f7fffffe          BL       GPIO_SetBits
;;;554    	Delay_ms(5);
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       Delay_ms
;;;555    
;;;556    }
000022  bd10              POP      {r4,pc}
;;;557    
                          ENDP

                  |L5.36|
                          DCD      0x40010c00

                          AREA ||i.HAL_DISP_SET||, CODE, READONLY, ALIGN=1

                  HAL_DISP_SET PROC
;;;503    **/
;;;504    void HAL_DISP_SET(void)
000000  b570              PUSH     {r4-r6,lr}
;;;505    {
;;;506    	unsigned char i,j;    
;;;507    	for(i=0;i<LCD_LINE_NUM;i++)				
000002  2400              MOVS     r4,#0
000004  e00f              B        |L6.38|
                  |L6.6|
;;;508    	{
;;;509    		HAL_DISP_SetXY(i,0);	    
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_DISP_SetXY
;;;510    		for(j=0;j<LCD_COLUMN_NUM;j++)	 	
00000e  2500              MOVS     r5,#0
000010  e005              B        |L6.30|
                  |L6.18|
;;;511    		{				
;;;512    			HAL_DISP_WriteByte(0xFF,LCD_DATA);
000012  2102              MOVS     r1,#2
000014  20ff              MOVS     r0,#0xff
000016  f7fffffe          BL       HAL_DISP_WriteByte
00001a  1c68              ADDS     r0,r5,#1              ;510
00001c  b2c5              UXTB     r5,r0                 ;510
                  |L6.30|
00001e  2d83              CMP      r5,#0x83              ;510
000020  dbf7              BLT      |L6.18|
000022  1c60              ADDS     r0,r4,#1              ;507
000024  b2c4              UXTB     r4,r0                 ;507
                  |L6.38|
000026  2c41              CMP      r4,#0x41              ;507
000028  dbed              BLT      |L6.6|
;;;513    		}
;;;514    	}
;;;515    
;;;516    }
00002a  bd70              POP      {r4-r6,pc}
;;;517    
                          ENDP


                          AREA ||i.HAL_DISP_SetXY||, CODE, READONLY, ALIGN=1

                  HAL_DISP_SetXY PROC
;;;465    **/
;;;466    void HAL_DISP_SetXY(unsigned char page, unsigned char column)
000000  b570              PUSH     {r4-r6,lr}
;;;467    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;468    	HAL_DISP_WriteByte(SET_PAGE_ADDR(page),LCD_COMMAND);			// Page or line
000006  f04500b0          ORR      r0,r5,#0xb0
00000a  2101              MOVS     r1,#1
00000c  f7fffffe          BL       HAL_DISP_WriteByte
;;;469    	HAL_DISP_WriteByte(SET_COLUMN_ADDR_FISRT(column) ,LCD_COMMAND);		// Column high			
000010  2110              MOVS     r1,#0x10
000012  ea411024          ORR      r0,r1,r4,ASR #4
000016  2101              MOVS     r1,#1
000018  f7fffffe          BL       HAL_DISP_WriteByte
;;;470    	HAL_DISP_WriteByte(SET_COLUMN_ADDR_SECOND(column) ,LCD_COMMAND);	// Column low
00001c  f004000f          AND      r0,r4,#0xf
000020  2101              MOVS     r1,#1
000022  f7fffffe          BL       HAL_DISP_WriteByte
;;;471    }
000026  bd70              POP      {r4-r6,pc}
;;;472    /**
                          ENDP


                          AREA ||i.HAL_DISP_WriteByte||, CODE, READONLY, ALIGN=2

                  HAL_DISP_WriteByte PROC
;;;409    **/
;;;410    void HAL_DISP_WriteByte(uint8_t uCmdOrData,uint8_t ucLCD_ISCommand)
000000  b538              PUSH     {r3-r5,lr}
;;;411    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;412    
;;;413    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;414    	GPIO_InitStructure.GPIO_Pin = LCD_A0GPIOPIN;
000006  2040              MOVS     r0,#0x40
000008  f8ad0000          STRH     r0,[sp,#0]
;;;415    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000c  2003              MOVS     r0,#3
00000e  f88d0002          STRB     r0,[sp,#2]
;;;416    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
000012  2010              MOVS     r0,#0x10
000014  f88d0003          STRB     r0,[sp,#3]
;;;417    	GPIO_Init(LCD_A0GPIO, &GPIO_InitStructure); 
000018  4669              MOV      r1,sp
00001a  4817              LDR      r0,|L8.120|
00001c  f7fffffe          BL       GPIO_Init
;;;418    		
;;;419    	GPIO_SetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);
000020  f44f5100          MOV      r1,#0x2000
000024  4815              LDR      r0,|L8.124|
000026  f7fffffe          BL       GPIO_SetBits
;;;420    	GPIO_ResetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);	
00002a  f44f5100          MOV      r1,#0x2000
00002e  4813              LDR      r0,|L8.124|
000030  f7fffffe          BL       GPIO_ResetBits
;;;421    	if(ucLCD_ISCommand == LCD_COMMAND)
000034  2c01              CMP      r4,#1
000036  d104              BNE      |L8.66|
;;;422    	{
;;;423            GPIO_ResetBits(LCD_A0GPIO,LCD_A0GPIOPIN);	 
000038  2140              MOVS     r1,#0x40
00003a  480f              LDR      r0,|L8.120|
00003c  f7fffffe          BL       GPIO_ResetBits
000040  e003              B        |L8.74|
                  |L8.66|
;;;424        }
;;;425        else
;;;426        {
;;;427    		GPIO_SetBits(LCD_A0GPIO,LCD_A0GPIOPIN);  	
000042  2140              MOVS     r1,#0x40
000044  480c              LDR      r0,|L8.120|
000046  f7fffffe          BL       GPIO_SetBits
                  |L8.74|
;;;428        }
;;;429    	SPI_SendData_QY(uCmdOrData);
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       SPI_SendData_QY
;;;430    	GPIO_SetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);	
000050  f44f5100          MOV      r1,#0x2000
000054  4809              LDR      r0,|L8.124|
000056  f7fffffe          BL       GPIO_SetBits
;;;431    
;;;432    	GPIO_InitStructure.GPIO_Pin = LCD_A0GPIOPIN;
00005a  2040              MOVS     r0,#0x40
00005c  f8ad0000          STRH     r0,[sp,#0]
;;;433    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000060  2003              MOVS     r0,#3
000062  f88d0002          STRB     r0,[sp,#2]
;;;434    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
000066  2004              MOVS     r0,#4
000068  f88d0003          STRB     r0,[sp,#3]
;;;435    	GPIO_Init(LCD_A0GPIO, &GPIO_InitStructure); 
00006c  4669              MOV      r1,sp
00006e  4802              LDR      r0,|L8.120|
000070  f7fffffe          BL       GPIO_Init
;;;436    
;;;437    }
000074  bd38              POP      {r3-r5,pc}
;;;438    /**
                          ENDP

000076  0000              DCW      0x0000
                  |L8.120|
                          DCD      0x40010800
                  |L8.124|
                          DCD      0x40010c00

                          AREA ||i.HAL_DISP_WriteString||, CODE, READONLY, ALIGN=2

                  HAL_DISP_WriteString PROC
;;;445    **/
;;;446    void HAL_DISP_WriteString(const unsigned char *uDisplayData,unsigned char uDataNum)
000000  b570              PUSH     {r4-r6,lr}
;;;447    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;448    	 uint8_t i = 0;
000006  2400              MOVS     r4,#0
;;;449    	 GPIO_ResetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);	
000008  f44f5100          MOV      r1,#0x2000
00000c  4809              LDR      r0,|L9.52|
00000e  f7fffffe          BL       GPIO_ResetBits
;;;450    	 for( i = 0; i< uDataNum;i++)
000012  bf00              NOP      
000014  e005              B        |L9.34|
                  |L9.22|
;;;451    	 {
;;;452    		HAL_DISP_WriteByte(uDisplayData[i],LCD_DATA);
000016  5d28              LDRB     r0,[r5,r4]
000018  2102              MOVS     r1,#2
00001a  f7fffffe          BL       HAL_DISP_WriteByte
00001e  1c60              ADDS     r0,r4,#1              ;450
000020  b2c4              UXTB     r4,r0                 ;450
                  |L9.34|
000022  42b4              CMP      r4,r6                 ;450
000024  dbf7              BLT      |L9.22|
;;;453    	 }
;;;454    	 GPIO_SetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);	  	 
000026  f44f5100          MOV      r1,#0x2000
00002a  4802              LDR      r0,|L9.52|
00002c  f7fffffe          BL       GPIO_SetBits
;;;455    }
000030  bd70              POP      {r4-r6,pc}
;;;456    /**
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
                          DCD      0x40010c00

                          AREA ||i.MID_DISP_ShowChar16X8||, CODE, READONLY, ALIGN=1

                  MID_DISP_ShowChar16X8 PROC
;;;656    
;;;657    void MID_DISP_ShowChar16X8(unsigned char page,unsigned char column,unsigned char Order,const unsigned char *pASCIIchar)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;658    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;659    	unsigned int  x;
;;;660    	x = (Order - 0x20)*16; 
00000c  f1a70020          SUB      r0,r7,#0x20
000010  0105              LSLS     r5,r0,#4
;;;661    	HAL_DISP_SetXY(page,column);
000012  4641              MOV      r1,r8
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       HAL_DISP_SetXY
;;;662    	HAL_DISP_WriteString(pASCIIchar+x,8);
00001a  1960              ADDS     r0,r4,r5
00001c  2108              MOVS     r1,#8
00001e  f7fffffe          BL       HAL_DISP_WriteString
;;;663        x = x+8;	     
000022  3508              ADDS     r5,r5,#8
;;;664    	HAL_DISP_SetXY(page+1,column);
000024  1c71              ADDS     r1,r6,#1
000026  b2c8              UXTB     r0,r1
000028  4641              MOV      r1,r8
00002a  f7fffffe          BL       HAL_DISP_SetXY
;;;665    	HAL_DISP_WriteString(pASCIIchar+x,8);    
00002e  1960              ADDS     r0,r4,r5
000030  2108              MOVS     r1,#8
000032  f7fffffe          BL       HAL_DISP_WriteString
;;;666    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;667    /**
                          ENDP


                          AREA ||i.MID_DISP_ShowCharStr||, CODE, READONLY, ALIGN=2

                  MID_DISP_ShowCharStr PROC
;;;676    **/
;;;677    void MID_DISP_ShowCharStr(unsigned char page,unsigned char column,unsigned char *pStr,unsigned char len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;678    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;679        unsigned char i = 0;
00000c  2600              MOVS     r6,#0
;;;680    	for(i = 0; i< len ;i++)
00000e  bf00              NOP      
000010  e015              B        |L11.62|
                  |L11.18|
;;;681    	{
;;;682    		if((column+8) > 128)
000012  f1050008          ADD      r0,r5,#8
000016  2880              CMP      r0,#0x80
000018  dd02              BLE      |L11.32|
;;;683    		{
;;;684    			page = page +2;
00001a  1ca0              ADDS     r0,r4,#2
00001c  b2c4              UXTB     r4,r0
;;;685    			column = 0;
00001e  2500              MOVS     r5,#0
                  |L11.32|
;;;686            }
;;;687    		if((page + 1) > 7)
000020  1c60              ADDS     r0,r4,#1
000022  2807              CMP      r0,#7
000024  dd00              BLE      |L11.40|
;;;688    		{
;;;689    			page = 0;
000026  2400              MOVS     r4,#0
                  |L11.40|
;;;690            }
;;;691    		
;;;692            MID_DISP_ShowChar16X8(page,column,pStr[i],cuc16X8ASCII);
000028  5dba              LDRB     r2,[r7,r6]
00002a  4b07              LDR      r3,|L11.72|
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       MID_DISP_ShowChar16X8
;;;693    		column = column +8;
000034  f1050008          ADD      r0,r5,#8
000038  b2c5              UXTB     r5,r0
00003a  1c70              ADDS     r0,r6,#1              ;680
00003c  b2c6              UXTB     r6,r0                 ;680
                  |L11.62|
00003e  4546              CMP      r6,r8                 ;680
000040  dbe7              BLT      |L11.18|
;;;694        }
;;;695    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;696    void Display_Init(void)
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      cuc16X8ASCII

                          AREA ||i.SPI_Init_QY||, CODE, READONLY, ALIGN=2

                  SPI_Init_QY PROC
;;;327    }
;;;328    void SPI_Init_QY(void)
000000  b500              PUSH     {lr}
;;;329    {
000002  b085              SUB      sp,sp,#0x14
;;;330        SPI_InitTypeDef   SPI_InitStructure;
;;;331    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;332        SPI_I2S_DeInit(LCD_SPI);	
000004  4818              LDR      r0,|L12.104|
000006  f7fffffe          BL       SPI_I2S_DeInit
;;;333    	/*!< SPI Periph clock enable */
;;;334    	RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE); 
00000a  2101              MOVS     r1,#1
00000c  0308              LSLS     r0,r1,#12
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;335    	 SPI_Cmd(LCD_SPI, DISABLE);  
000012  2100              MOVS     r1,#0
000014  4814              LDR      r0,|L12.104|
000016  f7fffffe          BL       SPI_Cmd
;;;336    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00001a  2000              MOVS     r0,#0
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;337    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;			
000020  f44f7082          MOV      r0,#0x104
000024  f8ad0002          STRH     r0,[sp,#2]
;;;338    	/*!< SPI Config */	
;;;339    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000028  2000              MOVS     r0,#0
00002a  f8ad0004          STRH     r0,[sp,#4]
;;;340    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00002e  2002              MOVS     r0,#2
000030  f8ad0006          STRH     r0,[sp,#6]
;;;341    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000034  2001              MOVS     r0,#1
000036  f8ad0008          STRH     r0,[sp,#8]
;;;342    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
00003a  0240              LSLS     r0,r0,#9
00003c  f8ad000a          STRH     r0,[sp,#0xa]
;;;343    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
000040  2008              MOVS     r0,#8
000042  f8ad000c          STRH     r0,[sp,#0xc]
;;;344    
;;;345    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000046  2000              MOVS     r0,#0
000048  f8ad000e          STRH     r0,[sp,#0xe]
;;;346    	SPI_InitStructure.SPI_CRCPolynomial = 7;
00004c  2007              MOVS     r0,#7
00004e  f8ad0010          STRH     r0,[sp,#0x10]
;;;347    	SPI_Init(LCD_SPI, &SPI_InitStructure);   
000052  4669              MOV      r1,sp
000054  4804              LDR      r0,|L12.104|
000056  f7fffffe          BL       SPI_Init
;;;348        SPI_Cmd(LCD_SPI, ENABLE); /*!< SD_SPI enable */    
00005a  2101              MOVS     r1,#1
00005c  4802              LDR      r0,|L12.104|
00005e  f7fffffe          BL       SPI_Cmd
;;;349    }
000062  b005              ADD      sp,sp,#0x14
000064  bd00              POP      {pc}
;;;350    
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
                          DCD      0x40013000

                          AREA ||i.SPI_RecvData_QY||, CODE, READONLY, ALIGN=2

                  SPI_RecvData_QY PROC
;;;380      */
;;;381    uint8_t SPI_RecvData_QY(void)
000000  b510              PUSH     {r4,lr}
;;;382    {
;;;383    	uint8_t Data = 0;
000002  2400              MOVS     r4,#0
;;;384    
;;;385    	/*!< Wait until the transmit buffer is empty */
;;;386    	while (SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET)
000004  bf00              NOP      
                  |L13.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L13.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L13.6|
;;;387    	{
;;;388    	}
;;;389    	/*!< Send the byte */
;;;390    	SPI_I2S_SendData(LCD_SPI, 0x00);
000012  2100              MOVS     r1,#0
000014  4807              LDR      r0,|L13.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;391    
;;;392    	/*!< Wait until a data is received */
;;;393    	while (SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
00001a  bf00              NOP      
                  |L13.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L13.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L13.28|
;;;394    	{
;;;395    	}
;;;396    	/*!< Get the received data */
;;;397    	Data = (uint8_t)SPI_I2S_ReceiveData(LCD_SPI);
000028  4802              LDR      r0,|L13.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c4              UXTB     r4,r0
;;;398    
;;;399    	/*!< Return the shifted data */
;;;400    	return Data;
000030  4620              MOV      r0,r4
;;;401    }
000032  bd10              POP      {r4,pc}
;;;402    /**
                          ENDP

                  |L13.52|
                          DCD      0x40013000

                          AREA ||i.SPI_SendData_QY||, CODE, READONLY, ALIGN=2

                  SPI_SendData_QY PROC
;;;355      */
;;;356    uint8_t SPI_SendData_QY(uint8_t Data)
000000  b510              PUSH     {r4,lr}
;;;357    {
000002  4604              MOV      r4,r0
;;;358    	/*!< Wait until the transmit buffer is empty */
;;;359     	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET)
000004  bf00              NOP      
                  |L14.6|
000006  2102              MOVS     r1,#2
000008  4808              LDR      r0,|L14.44|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L14.6|
;;;360     	{
;;;361     	}
;;;362    
;;;363     	/*!< Send the byte */
;;;364     	SPI_I2S_SendData(LCD_SPI, Data);
000012  4621              MOV      r1,r4
000014  4805              LDR      r0,|L14.44|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;365    
;;;366    	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
00001a  bf00              NOP      
                  |L14.28|
00001c  2180              MOVS     r1,#0x80
00001e  4803              LDR      r0,|L14.44|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d1f9              BNE      |L14.28|
;;;367    		/*!< Wait to receive a byte*/
;;;368    //	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
;;;369    	{
;;;370    	}
;;;371    
;;;372     	/*!< Return the byte read from the SPI bus */ 
;;;373    //	return (uint8_t)SPI_I2S_ReceiveData(LCD_SPI);
;;;374    }
000028  bd10              POP      {r4,pc}
;;;375    
                          ENDP

00002a  0000              DCW      0x0000
                  |L14.44|
                          DCD      0x40013000

                          AREA ||i.ST7567_GPIO_Init_QY||, CODE, READONLY, ALIGN=2

                  ST7567_GPIO_Init_QY PROC
;;;274    extern unsigned char USB_Plugin;
;;;275    void ST7567_GPIO_Init_QY()
000000  b508              PUSH     {r3,lr}
;;;276    {
;;;277        GPIO_InitTypeDef  GPIO_InitStructure;
;;;278        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOA,ENABLE);
000002  2101              MOVS     r1,#1
000004  200c              MOVS     r0,#0xc
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;279    #if 1
;;;280    	/*!< Configure ST7567 RESB pins: LCD_RESB ,and set this bit is "1"*/
;;;281    	GPIO_InitStructure.GPIO_Pin = LCD_RESBGPIOPIN;
00000a  f44f4080          MOV      r0,#0x4000
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;282    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;283    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;284    	GPIO_Init(LCD_RESBGPIO, &GPIO_InitStructure);    
00001e  4669              MOV      r1,sp
000020  4824              LDR      r0,|L15.180|
000022  f7fffffe          BL       GPIO_Init
;;;285        GPIO_SetBits(LCD_RESBGPIO,LCD_RESBGPIOPIN);	
000026  f44f4180          MOV      r1,#0x4000
00002a  4822              LDR      r0,|L15.180|
00002c  f7fffffe          BL       GPIO_SetBits
;;;286    
;;;287    	/*!< Configure ST7567 A0 pins: LCD_A0 ,and set this bit is "1"*/
;;;288    	GPIO_InitStructure.GPIO_Pin = LCD_A0GPIOPIN;
000030  2040              MOVS     r0,#0x40
000032  f8ad0000          STRH     r0,[sp,#0]
;;;289    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
000036  2004              MOVS     r0,#4
000038  f88d0003          STRB     r0,[sp,#3]
;;;290    	GPIO_Init(LCD_A0GPIO, &GPIO_InitStructure); 	
00003c  4669              MOV      r1,sp
00003e  481e              LDR      r0,|L15.184|
000040  f7fffffe          BL       GPIO_Init
;;;291    //    GPIO_SetBits(LCD_A0GPIO,LCD_A0GPIOPIN);	
;;;292    
;;;293    	/*!< Configure ST7567 CS pins: LCD_CS ,and set this bit is "1"*/
;;;294    	GPIO_InitStructure.GPIO_Pin = LCD_CSBGPIOPIN;
000044  f44f5000          MOV      r0,#0x2000
000048  f8ad0000          STRH     r0,[sp,#0]
;;;295    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
00004c  2010              MOVS     r0,#0x10
00004e  f88d0003          STRB     r0,[sp,#3]
;;;296    	GPIO_Init(LCD_CSBGPIO, &GPIO_InitStructure);    
000052  4669              MOV      r1,sp
000054  4817              LDR      r0,|L15.180|
000056  f7fffffe          BL       GPIO_Init
;;;297        GPIO_SetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);	 
00005a  f44f5100          MOV      r1,#0x2000
00005e  4815              LDR      r0,|L15.180|
000060  f7fffffe          BL       GPIO_SetBits
;;;298        /*!< Configure ST7567 LIGTHCTR pins: LCD_LIGTHCTR ,and set this bit is "1"*/
;;;299    	GPIO_InitStructure.GPIO_Pin = LCD_LIGTHCTRPIN;
000064  f44f5080          MOV      r0,#0x1000
000068  f8ad0000          STRH     r0,[sp,#0]
;;;300    	GPIO_Init(LCD_LIGTHCTR, &GPIO_InitStructure);    
00006c  4669              MOV      r1,sp
00006e  4811              LDR      r0,|L15.180|
000070  f7fffffe          BL       GPIO_Init
;;;301        GPIO_ResetBits(LCD_LIGTHCTR,LCD_LIGTHCTRPIN);    
000074  f44f5180          MOV      r1,#0x1000
000078  480e              LDR      r0,|L15.180|
00007a  f7fffffe          BL       GPIO_ResetBits
;;;302    #endif
;;;303    //SPI GPIO 配置    
;;;304    	GPIO_InitStructure.GPIO_Pin = LCD_SPICLKGPIOPIN;
00007e  2020              MOVS     r0,#0x20
000080  f8ad0000          STRH     r0,[sp,#0]
;;;305    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000084  2003              MOVS     r0,#3
000086  f88d0002          STRB     r0,[sp,#2]
;;;306    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;    
00008a  2018              MOVS     r0,#0x18
00008c  f88d0003          STRB     r0,[sp,#3]
;;;307    	GPIO_Init(LCD_SPICLKGPIO, &GPIO_InitStructure); 
000090  4669              MOV      r1,sp
000092  4809              LDR      r0,|L15.184|
000094  f7fffffe          BL       GPIO_Init
;;;308        
;;;309    	GPIO_InitStructure.GPIO_Pin = LCD_SPIMOSIGPIOPIN;
000098  2080              MOVS     r0,#0x80
00009a  f8ad0000          STRH     r0,[sp,#0]
;;;310    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00009e  2003              MOVS     r0,#3
0000a0  f88d0002          STRB     r0,[sp,#2]
;;;311    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;    
0000a4  2018              MOVS     r0,#0x18
0000a6  f88d0003          STRB     r0,[sp,#3]
;;;312    	GPIO_Init(LCD_SPIMOSIGPIO, &GPIO_InitStructure);
0000aa  4669              MOV      r1,sp
0000ac  4802              LDR      r0,|L15.184|
0000ae  f7fffffe          BL       GPIO_Init
;;;313    
;;;314    	//LCD只发送不接收
;;;315      
;;;316    //	GPIO_InitStructure.GPIO_Pin = LCD_SPIMISOGPIOPIN;
;;;317    //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;318    //	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;    
;;;319    //	GPIO_Init(LCD_SPIMISOGPIO, &GPIO_InitStructure); 
;;;320    
;;;321    ////FLASH 引脚
;;;322    //	GPIO_InitStructure.GPIO_Pin = Flash_CSBGPIOPIN;
;;;323    //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;324    //	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;    
;;;325    //	GPIO_Init(Flash_CSBGPIO, &GPIO_InitStructure);
;;;326    //    GPIO_ResetBits(Flash_CSBGPIO,Flash_CSBGPIOPIN); 
;;;327    }
0000b2  bd08              POP      {r3,pc}
;;;328    void SPI_Init_QY(void)
                          ENDP

                  |L15.180|
                          DCD      0x40010c00
                  |L15.184|
                          DCD      0x40010800

                          AREA ||i.ST7567_Into_Power_Save_QY||, CODE, READONLY, ALIGN=1

                  ST7567_Into_Power_Save_QY PROC
;;;573    **/
;;;574    void ST7567_Into_Power_Save_QY(void)
000000  b510              PUSH     {r4,lr}
;;;575    {
;;;576    	//Display　OFF
;;;577    	HAL_DISP_WriteByte(DISPLAYOFF,LCD_COMMAND);	
000002  2101              MOVS     r1,#1
000004  20ae              MOVS     r0,#0xae
000006  f7fffffe          BL       HAL_DISP_WriteByte
;;;578        //ALL Pixel ON
;;;579    	HAL_DISP_WriteByte(ALL_PIXEL_ON(0x01),LCD_COMMAND);		
00000a  2101              MOVS     r1,#1
00000c  20a5              MOVS     r0,#0xa5
00000e  f7fffffe          BL       HAL_DISP_WriteByte
;;;580    }
000012  bd10              POP      {r4,pc}
;;;581    /**
                          ENDP


                          AREA ||i.ST7567_OUT_Power_Save_QY||, CODE, READONLY, ALIGN=1

                  ST7567_OUT_Power_Save_QY PROC
;;;591    **/
;;;592    void ST7567_OUT_Power_Save_QY(void)
000000  b510              PUSH     {r4,lr}
;;;593    {
;;;594    	//ALL Pixel ON
;;;595    	HAL_DISP_WriteByte(ALL_PIXEL_ON(0x00),LCD_COMMAND);		
000002  2101              MOVS     r1,#1
000004  20a4              MOVS     r0,#0xa4
000006  f7fffffe          BL       HAL_DISP_WriteByte
;;;596    	//Display ON
;;;597    	HAL_DISP_WriteByte(DISPLAYON,LCD_COMMAND);   	
00000a  2101              MOVS     r1,#1
00000c  20af              MOVS     r0,#0xaf
00000e  f7fffffe          BL       HAL_DISP_WriteByte
;;;598    }
000012  bd10              POP      {r4,pc}
;;;599    /**
                          ENDP


                          AREA ||i.ST7567_Power_OFF_QY||, CODE, READONLY, ALIGN=1

                  ST7567_Power_OFF_QY PROC
;;;609    **/
;;;610    void ST7567_Power_OFF_QY(void)
000000  b510              PUSH     {r4,lr}
;;;611    {
;;;612    	//Display　OFF
;;;613    	HAL_DISP_WriteByte(DISPLAYOFF,LCD_COMMAND);	
000002  2101              MOVS     r1,#1
000004  20ae              MOVS     r0,#0xae
000006  f7fffffe          BL       HAL_DISP_WriteByte
;;;614    	//ALL Pixel ON
;;;615    	HAL_DISP_WriteByte(ALL_PIXEL_ON(0x00),LCD_COMMAND);	
00000a  2101              MOVS     r1,#1
00000c  20a4              MOVS     r0,#0xa4
00000e  f7fffffe          BL       HAL_DISP_WriteByte
;;;616    	//等待5ms
;;;617    	Delay_ms(1);  
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       Delay_ms
;;;618    }
000018  bd10              POP      {r4,pc}
;;;619    /**
                          ENDP


                          AREA ||i.ST7567_Power_On_QY||, CODE, READONLY, ALIGN=2

                  ST7567_Power_On_QY PROC
;;;626    **/
;;;627    void ST7567_Power_On_QY(void)
000000  b510              PUSH     {r4,lr}
;;;628    {
;;;629    	GPIO_ResetBits(LCD_RESBGPIO,LCD_RESBGPIOPIN);	
000002  f44f4180          MOV      r1,#0x4000
000006  482f              LDR      r0,|L19.196|
000008  f7fffffe          BL       GPIO_ResetBits
;;;630    	Delay_ms(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       Delay_ms
;;;631     	GPIO_SetBits(LCD_RESBGPIO,LCD_RESBGPIOPIN);	
000012  f44f4180          MOV      r1,#0x4000
000016  482b              LDR      r0,|L19.196|
000018  f7fffffe          BL       GPIO_SetBits
;;;632      	Delay_ms(5);    
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       Delay_ms
;;;633     	HAL_DISP_WriteByte(RESET_DISP,LCD_COMMAND);         //initialize interal function	,Software Reset
000022  2101              MOVS     r1,#1
000024  20e2              MOVS     r0,#0xe2
000026  f7fffffe          BL       HAL_DISP_WriteByte
;;;634     	Delay_ms(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       Delay_ms
;;;635     	HAL_DISP_WriteByte(POWER_CONTROL(0x01,0x01,0x01),LCD_COMMAND);         //power control(VB,VR,VF=1,1,1)
000030  2101              MOVS     r1,#1
000032  202f              MOVS     r0,#0x2f
000034  f7fffffe          BL       HAL_DISP_WriteByte
;;;636     	Delay_ms(1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       Delay_ms
;;;637     	HAL_DISP_WriteByte(REGULATION_RATIO(0x03),LCD_COMMAND);         //Regulator resistor select
00003e  2101              MOVS     r1,#1
000040  2023              MOVS     r0,#0x23
000042  f7fffffe          BL       HAL_DISP_WriteByte
;;;638     	Delay_ms(1);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       Delay_ms
;;;639     	HAL_DISP_WriteByte(BIAS_SELECT(0x01),LCD_COMMAND);         //set LCD bias=1/6
00004c  2101              MOVS     r1,#1
00004e  20a3              MOVS     r0,#0xa3
000050  f7fffffe          BL       HAL_DISP_WriteByte
;;;640     	Delay_ms(1);
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       Delay_ms
;;;641     	HAL_DISP_WriteByte(SET_EV_FIRST,LCD_COMMAND);         //set reference voltage
00005a  2101              MOVS     r1,#1
00005c  2081              MOVS     r0,#0x81
00005e  f7fffffe          BL       HAL_DISP_WriteByte
;;;642     	HAL_DISP_WriteByte(SET_EV_SECOND(0x24),LCD_COMMAND);	
000062  2101              MOVS     r1,#1
000064  2024              MOVS     r0,#0x24
000066  f7fffffe          BL       HAL_DISP_WriteByte
;;;643    	Delay_ms(1);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       Delay_ms
;;;644     	HAL_DISP_WriteByte(COM_DIRECTION(0x08),LCD_COMMAND);         //set SHL COM1 to COM64
000070  2101              MOVS     r1,#1
000072  20c8              MOVS     r0,#0xc8
000074  f7fffffe          BL       HAL_DISP_WriteByte
;;;645     	Delay_ms(1);
000078  2001              MOVS     r0,#1
00007a  f7fffffe          BL       Delay_ms
;;;646     	HAL_DISP_WriteByte(SEG_DIRECTION(0x00),LCD_COMMAND);         //ADC select SEG1 to SEG132
00007e  2101              MOVS     r1,#1
000080  20a0              MOVS     r0,#0xa0
000082  f7fffffe          BL       HAL_DISP_WriteByte
;;;647     	Delay_ms(1);
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       Delay_ms
;;;648     	HAL_DISP_WriteByte(SET_START_LINE(0x00),LCD_COMMAND);         //Initial Display Line
00008c  2101              MOVS     r1,#1
00008e  2040              MOVS     r0,#0x40
000090  f7fffffe          BL       HAL_DISP_WriteByte
;;;649     	Delay_ms(1);
000094  2001              MOVS     r0,#1
000096  f7fffffe          BL       Delay_ms
;;;650     	HAL_DISP_WriteByte(INVERSE_DISPLAY(0x00),LCD_COMMAND);         //set reverse display OFF
00009a  2101              MOVS     r1,#1
00009c  20a6              MOVS     r0,#0xa6
00009e  f7fffffe          BL       HAL_DISP_WriteByte
;;;651     	Delay_ms(1);
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       Delay_ms
;;;652    	HAL_DISP_WriteByte(DISPLAYON,LCD_COMMAND);         //turns the display ON
0000a8  2101              MOVS     r1,#1
0000aa  20af              MOVS     r0,#0xaf
0000ac  f7fffffe          BL       HAL_DISP_WriteByte
;;;653     	Delay_ms(1);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       Delay_ms
;;;654      	GPIO_ResetBits(LCD_CSBGPIO,LCD_CSBGPIOPIN);        
0000b6  f44f5100          MOV      r1,#0x2000
0000ba  4802              LDR      r0,|L19.196|
0000bc  f7fffffe          BL       GPIO_ResetBits
;;;655    }
0000c0  bd10              POP      {r4,pc}
;;;656    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L19.196|
                          DCD      0x40010c00

                          AREA ||.data||, DATA, ALIGN=0

                  cuc16X8ASCII
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  000000f8          DCB      0x00,0x00,0x00,0xf8
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000033          DCB      0x00,0x00,0x00,0x33
00001c  30000000          DCB      0x30,0x00,0x00,0x00
000020  00100c06          DCB      0x00,0x10,0x0c,0x06
000024  100c0600          DCB      0x10,0x0c,0x06,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  40c07840          DCB      0x40,0xc0,0x78,0x40
000034  c0784000          DCB      0xc0,0x78,0x40,0x00
000038  043f0404          DCB      0x04,0x3f,0x04,0x04
00003c  3f040400          DCB      0x3f,0x04,0x04,0x00
000040  007088fc          DCB      0x00,0x70,0x88,0xfc
000044  08300000          DCB      0x08,0x30,0x00,0x00
000048  001820ff          DCB      0x00,0x18,0x20,0xff
00004c  211e0000          DCB      0x21,0x1e,0x00,0x00
000050  f008f000          DCB      0xf0,0x08,0xf0,0x00
000054  e0180000          DCB      0xe0,0x18,0x00,0x00
000058  00211c03          DCB      0x00,0x21,0x1c,0x03
00005c  1e211e00          DCB      0x1e,0x21,0x1e,0x00
000060  00f00888          DCB      0x00,0xf0,0x08,0x88
000064  70000000          DCB      0x70,0x00,0x00,0x00
000068  1e212324          DCB      0x1e,0x21,0x23,0x24
00006c  19272110          DCB      0x19,0x27,0x21,0x10
000070  10160e00          DCB      0x10,0x16,0x0e,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  000000e0          DCB      0x00,0x00,0x00,0xe0
000084  18040200          DCB      0x18,0x04,0x02,0x00
000088  00000007          DCB      0x00,0x00,0x00,0x07
00008c  18204000          DCB      0x18,0x20,0x40,0x00
000090  00020418          DCB      0x00,0x02,0x04,0x18
000094  e0000000          DCB      0xe0,0x00,0x00,0x00
000098  00402018          DCB      0x00,0x40,0x20,0x18
00009c  07000000          DCB      0x07,0x00,0x00,0x00
0000a0  404080f0          DCB      0x40,0x40,0x80,0xf0
0000a4  80404000          DCB      0x80,0x40,0x40,0x00
0000a8  0202010f          DCB      0x02,0x02,0x01,0x0f
0000ac  01020200          DCB      0x01,0x02,0x02,0x00
0000b0  000000f0          DCB      0x00,0x00,0x00,0xf0
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  0101011f          DCB      0x01,0x01,0x01,0x1f
0000bc  01010100          DCB      0x01,0x01,0x01,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  80b07000          DCB      0x80,0xb0,0x70,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00010101          DCB      0x00,0x01,0x01,0x01
0000dc  01010101          DCB      0x01,0x01,0x01,0x01
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00303000          DCB      0x00,0x30,0x30,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  80601804          DCB      0x80,0x60,0x18,0x04
0000f8  00601806          DCB      0x00,0x60,0x18,0x06
0000fc  01000000          DCB      0x01,0x00,0x00,0x00
000100  e0100808          DCB      0xe0,0x10,0x08,0x08
000104  10e00000          DCB      0x10,0xe0,0x00,0x00
000108  0f102020          DCB      0x0f,0x10,0x20,0x20
00010c  100f0000          DCB      0x10,0x0f,0x00,0x00
000110  1010f800          DCB      0x10,0x10,0xf8,0x00
000114  00000000          DCB      0x00,0x00,0x00,0x00
000118  20203f20          DCB      0x20,0x20,0x3f,0x20
00011c  20000000          DCB      0x20,0x00,0x00,0x00
000120  70080808          DCB      0x70,0x08,0x08,0x08
000124  88700000          DCB      0x88,0x70,0x00,0x00
000128  30282422          DCB      0x30,0x28,0x24,0x22
00012c  21300000          DCB      0x21,0x30,0x00,0x00
000130  30088888          DCB      0x30,0x08,0x88,0x88
000134  48300000          DCB      0x48,0x30,0x00,0x00
000138  18202020          DCB      0x18,0x20,0x20,0x20
00013c  110e0000          DCB      0x11,0x0e,0x00,0x00
000140  00c02010          DCB      0x00,0xc0,0x20,0x10
000144  f8000000          DCB      0xf8,0x00,0x00,0x00
000148  07042424          DCB      0x07,0x04,0x24,0x24
00014c  3f240000          DCB      0x3f,0x24,0x00,0x00
000150  f8088888          DCB      0xf8,0x08,0x88,0x88
000154  08080000          DCB      0x08,0x08,0x00,0x00
000158  19212020          DCB      0x19,0x21,0x20,0x20
00015c  110e0000          DCB      0x11,0x0e,0x00,0x00
000160  e0108888          DCB      0xe0,0x10,0x88,0x88
000164  18000000          DCB      0x18,0x00,0x00,0x00
000168  0f112020          DCB      0x0f,0x11,0x20,0x20
00016c  110e0000          DCB      0x11,0x0e,0x00,0x00
000170  380808c8          DCB      0x38,0x08,0x08,0xc8
000174  38080000          DCB      0x38,0x08,0x00,0x00
000178  00003f00          DCB      0x00,0x00,0x3f,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  70880808          DCB      0x70,0x88,0x08,0x08
000184  88700000          DCB      0x88,0x70,0x00,0x00
000188  1c222121          DCB      0x1c,0x22,0x21,0x21
00018c  221c0000          DCB      0x22,0x1c,0x00,0x00
000190  e0100808          DCB      0xe0,0x10,0x08,0x08
000194  10e00000          DCB      0x10,0xe0,0x00,0x00
000198  00312222          DCB      0x00,0x31,0x22,0x22
00019c  110f0000          DCB      0x11,0x0f,0x00,0x00
0001a0  000000c0          DCB      0x00,0x00,0x00,0xc0
0001a4  c0000000          DCB      0xc0,0x00,0x00,0x00
0001a8  00000030          DCB      0x00,0x00,0x00,0x30
0001ac  30000000          DCB      0x30,0x00,0x00,0x00
0001b0  00000080          DCB      0x00,0x00,0x00,0x80
0001b4  00000000          DCB      0x00,0x00,0x00,0x00
0001b8  00008060          DCB      0x00,0x00,0x80,0x60
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  00008040          DCB      0x00,0x00,0x80,0x40
0001c4  20100800          DCB      0x20,0x10,0x08,0x00
0001c8  00010204          DCB      0x00,0x01,0x02,0x04
0001cc  08102000          DCB      0x08,0x10,0x20,0x00
0001d0  40404040          DCB      0x40,0x40,0x40,0x40
0001d4  40404000          DCB      0x40,0x40,0x40,0x00
0001d8  04040404          DCB      0x04,0x04,0x04,0x04
0001dc  04040400          DCB      0x04,0x04,0x04,0x00
0001e0  00081020          DCB      0x00,0x08,0x10,0x20
0001e4  40800000          DCB      0x40,0x80,0x00,0x00
0001e8  00201008          DCB      0x00,0x20,0x10,0x08
0001ec  04020100          DCB      0x04,0x02,0x01,0x00
0001f0  00704808          DCB      0x00,0x70,0x48,0x08
0001f4  0808f000          DCB      0x08,0x08,0xf0,0x00
0001f8  00000030          DCB      0x00,0x00,0x00,0x30
0001fc  36010000          DCB      0x36,0x01,0x00,0x00
000200  c030c828          DCB      0xc0,0x30,0xc8,0x28
000204  e810e000          DCB      0xe8,0x10,0xe0,0x00
000208  07182724          DCB      0x07,0x18,0x27,0x24
00020c  23140b00          DCB      0x23,0x14,0x0b,0x00
000210  0000c038          DCB      0x00,0x00,0xc0,0x38
000214  e0000000          DCB      0xe0,0x00,0x00,0x00
000218  203c2302          DCB      0x20,0x3c,0x23,0x02
00021c  02273820          DCB      0x02,0x27,0x38,0x20
000220  08f88888          DCB      0x08,0xf8,0x88,0x88
000224  88700000          DCB      0x88,0x70,0x00,0x00
000228  203f2020          DCB      0x20,0x3f,0x20,0x20
00022c  20110e00          DCB      0x20,0x11,0x0e,0x00
000230  c0300808          DCB      0xc0,0x30,0x08,0x08
000234  08083800          DCB      0x08,0x08,0x38,0x00
000238  07182020          DCB      0x07,0x18,0x20,0x20
00023c  20100800          DCB      0x20,0x10,0x08,0x00
000240  08f80808          DCB      0x08,0xf8,0x08,0x08
000244  0810e000          DCB      0x08,0x10,0xe0,0x00
000248  203f2020          DCB      0x20,0x3f,0x20,0x20
00024c  20100f00          DCB      0x20,0x10,0x0f,0x00
000250  08f88888          DCB      0x08,0xf8,0x88,0x88
000254  e8081000          DCB      0xe8,0x08,0x10,0x00
000258  203f2020          DCB      0x20,0x3f,0x20,0x20
00025c  23201800          DCB      0x23,0x20,0x18,0x00
000260  08f88888          DCB      0x08,0xf8,0x88,0x88
000264  e8081000          DCB      0xe8,0x08,0x10,0x00
000268  203f2000          DCB      0x20,0x3f,0x20,0x00
00026c  03000000          DCB      0x03,0x00,0x00,0x00
000270  c0300808          DCB      0xc0,0x30,0x08,0x08
000274  08380000          DCB      0x08,0x38,0x00,0x00
000278  07182020          DCB      0x07,0x18,0x20,0x20
00027c  221e0200          DCB      0x22,0x1e,0x02,0x00
000280  08f80800          DCB      0x08,0xf8,0x08,0x00
000284  0008f808          DCB      0x00,0x08,0xf8,0x08
000288  203f2101          DCB      0x20,0x3f,0x21,0x01
00028c  01213f20          DCB      0x01,0x21,0x3f,0x20
000290  000808f8          DCB      0x00,0x08,0x08,0xf8
000294  08080000          DCB      0x08,0x08,0x00,0x00
000298  0020203f          DCB      0x00,0x20,0x20,0x3f
00029c  20200000          DCB      0x20,0x20,0x00,0x00
0002a0  00000808          DCB      0x00,0x00,0x08,0x08
0002a4  f8080800          DCB      0xf8,0x08,0x08,0x00
0002a8  c0808080          DCB      0xc0,0x80,0x80,0x80
0002ac  7f000000          DCB      0x7f,0x00,0x00,0x00
0002b0  08f888c0          DCB      0x08,0xf8,0x88,0xc0
0002b4  28180800          DCB      0x28,0x18,0x08,0x00
0002b8  203f2001          DCB      0x20,0x3f,0x20,0x01
0002bc  26382000          DCB      0x26,0x38,0x20,0x00
0002c0  08f80800          DCB      0x08,0xf8,0x08,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  203f2020          DCB      0x20,0x3f,0x20,0x20
0002cc  20203000          DCB      0x20,0x20,0x30,0x00
0002d0  08f8f800          DCB      0x08,0xf8,0xf8,0x00
0002d4  f8f80800          DCB      0xf8,0xf8,0x08,0x00
0002d8  203f003f          DCB      0x20,0x3f,0x00,0x3f
0002dc  003f2000          DCB      0x00,0x3f,0x20,0x00
0002e0  08f830c0          DCB      0x08,0xf8,0x30,0xc0
0002e4  0008f808          DCB      0x00,0x08,0xf8,0x08
0002e8  203f2000          DCB      0x20,0x3f,0x20,0x00
0002ec  07183f00          DCB      0x07,0x18,0x3f,0x00
0002f0  e0100808          DCB      0xe0,0x10,0x08,0x08
0002f4  0810e000          DCB      0x08,0x10,0xe0,0x00
0002f8  0f102020          DCB      0x0f,0x10,0x20,0x20
0002fc  20100f00          DCB      0x20,0x10,0x0f,0x00
000300  08f80808          DCB      0x08,0xf8,0x08,0x08
000304  0808f000          DCB      0x08,0x08,0xf0,0x00
000308  203f2101          DCB      0x20,0x3f,0x21,0x01
00030c  01010000          DCB      0x01,0x01,0x00,0x00
000310  e0100808          DCB      0xe0,0x10,0x08,0x08
000314  0810e000          DCB      0x08,0x10,0xe0,0x00
000318  0f182424          DCB      0x0f,0x18,0x24,0x24
00031c  38504f00          DCB      0x38,0x50,0x4f,0x00
000320  08f88888          DCB      0x08,0xf8,0x88,0x88
000324  88887000          DCB      0x88,0x88,0x70,0x00
000328  203f2000          DCB      0x20,0x3f,0x20,0x00
00032c  030c3020          DCB      0x03,0x0c,0x30,0x20
000330  00708808          DCB      0x00,0x70,0x88,0x08
000334  08083800          DCB      0x08,0x08,0x38,0x00
000338  00382021          DCB      0x00,0x38,0x20,0x21
00033c  21221c00          DCB      0x21,0x22,0x1c,0x00
000340  180808f8          DCB      0x18,0x08,0x08,0xf8
000344  08081800          DCB      0x08,0x08,0x18,0x00
000348  0000203f          DCB      0x00,0x00,0x20,0x3f
00034c  20000000          DCB      0x20,0x00,0x00,0x00
000350  08f80800          DCB      0x08,0xf8,0x08,0x00
000354  0008f808          DCB      0x00,0x08,0xf8,0x08
000358  001f2020          DCB      0x00,0x1f,0x20,0x20
00035c  20201f00          DCB      0x20,0x20,0x1f,0x00
000360  08788800          DCB      0x08,0x78,0x88,0x00
000364  00c83808          DCB      0x00,0xc8,0x38,0x08
000368  00000738          DCB      0x00,0x00,0x07,0x38
00036c  0e010000          DCB      0x0e,0x01,0x00,0x00
000370  f80800f8          DCB      0xf8,0x08,0x00,0xf8
000374  0008f800          DCB      0x00,0x08,0xf8,0x00
000378  033c0700          DCB      0x03,0x3c,0x07,0x00
00037c  073c0300          DCB      0x07,0x3c,0x03,0x00
000380  08186880          DCB      0x08,0x18,0x68,0x80
000384  80681808          DCB      0x80,0x68,0x18,0x08
000388  20302c03          DCB      0x20,0x30,0x2c,0x03
00038c  032c3020          DCB      0x03,0x2c,0x30,0x20
000390  0838c800          DCB      0x08,0x38,0xc8,0x00
000394  c8380800          DCB      0xc8,0x38,0x08,0x00
000398  0000203f          DCB      0x00,0x00,0x20,0x3f
00039c  20000000          DCB      0x20,0x00,0x00,0x00
0003a0  10080808          DCB      0x10,0x08,0x08,0x08
0003a4  c8380800          DCB      0xc8,0x38,0x08,0x00
0003a8  20382621          DCB      0x20,0x38,0x26,0x21
0003ac  20201800          DCB      0x20,0x20,0x18,0x00
0003b0  000000fe          DCB      0x00,0x00,0x00,0xfe
0003b4  02020200          DCB      0x02,0x02,0x02,0x00
0003b8  0000007f          DCB      0x00,0x00,0x00,0x7f
0003bc  40404000          DCB      0x40,0x40,0x40,0x00
0003c0  000c30c0          DCB      0x00,0x0c,0x30,0xc0
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000001          DCB      0x00,0x00,0x00,0x01
0003cc  0638c000          DCB      0x06,0x38,0xc0,0x00
0003d0  00020202          DCB      0x00,0x02,0x02,0x02
0003d4  fe000000          DCB      0xfe,0x00,0x00,0x00
0003d8  00404040          DCB      0x00,0x40,0x40,0x40
0003dc  7f000000          DCB      0x7f,0x00,0x00,0x00
0003e0  00000402          DCB      0x00,0x00,0x04,0x02
0003e4  02020400          DCB      0x02,0x02,0x04,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  80808080          DCB      0x80,0x80,0x80,0x80
0003fc  80808080          DCB      0x80,0x80,0x80,0x80
000400  00020204          DCB      0x00,0x02,0x02,0x04
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00008080          DCB      0x00,0x00,0x80,0x80
000414  80800000          DCB      0x80,0x80,0x00,0x00
000418  00192422          DCB      0x00,0x19,0x24,0x22
00041c  22223f20          DCB      0x22,0x22,0x3f,0x20
000420  08f80080          DCB      0x08,0xf8,0x00,0x80
000424  80000000          DCB      0x80,0x00,0x00,0x00
000428  003f1120          DCB      0x00,0x3f,0x11,0x20
00042c  20110e00          DCB      0x20,0x11,0x0e,0x00
000430  00000080          DCB      0x00,0x00,0x00,0x80
000434  80800000          DCB      0x80,0x80,0x00,0x00
000438  000e1120          DCB      0x00,0x0e,0x11,0x20
00043c  20201100          DCB      0x20,0x20,0x11,0x00
000440  00000080          DCB      0x00,0x00,0x00,0x80
000444  8088f800          DCB      0x80,0x88,0xf8,0x00
000448  000e1120          DCB      0x00,0x0e,0x11,0x20
00044c  20103f20          DCB      0x20,0x10,0x3f,0x20
000450  00008080          DCB      0x00,0x00,0x80,0x80
000454  80800000          DCB      0x80,0x80,0x00,0x00
000458  001f2222          DCB      0x00,0x1f,0x22,0x22
00045c  22221300          DCB      0x22,0x22,0x13,0x00
000460  008080f0          DCB      0x00,0x80,0x80,0xf0
000464  88888818          DCB      0x88,0x88,0x88,0x18
000468  0020203f          DCB      0x00,0x20,0x20,0x3f
00046c  20200000          DCB      0x20,0x20,0x00,0x00
000470  00008080          DCB      0x00,0x00,0x80,0x80
000474  80808000          DCB      0x80,0x80,0x80,0x00
000478  006b9494          DCB      0x00,0x6b,0x94,0x94
00047c  94936000          DCB      0x94,0x93,0x60,0x00
000480  08f80080          DCB      0x08,0xf8,0x00,0x80
000484  80800000          DCB      0x80,0x80,0x00,0x00
000488  203f2100          DCB      0x20,0x3f,0x21,0x00
00048c  00203f20          DCB      0x00,0x20,0x3f,0x20
000490  00809898          DCB      0x00,0x80,0x98,0x98
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  0020203f          DCB      0x00,0x20,0x20,0x3f
00049c  20200000          DCB      0x20,0x20,0x00,0x00
0004a0  00000080          DCB      0x00,0x00,0x00,0x80
0004a4  98980000          DCB      0x98,0x98,0x00,0x00
0004a8  00c08080          DCB      0x00,0xc0,0x80,0x80
0004ac  807f0000          DCB      0x80,0x7f,0x00,0x00
0004b0  08f80000          DCB      0x08,0xf8,0x00,0x00
0004b4  80808000          DCB      0x80,0x80,0x80,0x00
0004b8  203f2402          DCB      0x20,0x3f,0x24,0x02
0004bc  2d302000          DCB      0x2d,0x30,0x20,0x00
0004c0  000808f8          DCB      0x00,0x08,0x08,0xf8
0004c4  00000000          DCB      0x00,0x00,0x00,0x00
0004c8  0020203f          DCB      0x00,0x20,0x20,0x3f
0004cc  20200000          DCB      0x20,0x20,0x00,0x00
0004d0  80808080          DCB      0x80,0x80,0x80,0x80
0004d4  80808000          DCB      0x80,0x80,0x80,0x00
0004d8  203f2000          DCB      0x20,0x3f,0x20,0x00
0004dc  3f20003f          DCB      0x3f,0x20,0x00,0x3f
0004e0  80800080          DCB      0x80,0x80,0x00,0x80
0004e4  80800000          DCB      0x80,0x80,0x00,0x00
0004e8  203f2100          DCB      0x20,0x3f,0x21,0x00
0004ec  00203f20          DCB      0x00,0x20,0x3f,0x20
0004f0  00008080          DCB      0x00,0x00,0x80,0x80
0004f4  80800000          DCB      0x80,0x80,0x00,0x00
0004f8  001f2020          DCB      0x00,0x1f,0x20,0x20
0004fc  20201f00          DCB      0x20,0x20,0x1f,0x00
000500  80800080          DCB      0x80,0x80,0x00,0x80
000504  80000000          DCB      0x80,0x00,0x00,0x00
000508  80ffa120          DCB      0x80,0xff,0xa1,0x20
00050c  20110e00          DCB      0x20,0x11,0x0e,0x00
000510  00000080          DCB      0x00,0x00,0x00,0x80
000514  80808000          DCB      0x80,0x80,0x80,0x00
000518  000e1120          DCB      0x00,0x0e,0x11,0x20
00051c  20a0ff80          DCB      0x20,0xa0,0xff,0x80
000520  80808000          DCB      0x80,0x80,0x80,0x00
000524  80808000          DCB      0x80,0x80,0x80,0x00
000528  20203f21          DCB      0x20,0x20,0x3f,0x21
00052c  20000100          DCB      0x20,0x00,0x01,0x00
000530  00008080          DCB      0x00,0x00,0x80,0x80
000534  80808000          DCB      0x80,0x80,0x80,0x00
000538  00332424          DCB      0x00,0x33,0x24,0x24
00053c  24241900          DCB      0x24,0x24,0x19,0x00
000540  008080e0          DCB      0x00,0x80,0x80,0xe0
000544  80800000          DCB      0x80,0x80,0x00,0x00
000548  0000001f          DCB      0x00,0x00,0x00,0x1f
00054c  20200000          DCB      0x20,0x20,0x00,0x00
000550  80800000          DCB      0x80,0x80,0x00,0x00
000554  00808000          DCB      0x00,0x80,0x80,0x00
000558  001f2020          DCB      0x00,0x1f,0x20,0x20
00055c  20103f20          DCB      0x20,0x10,0x3f,0x20
000560  80808000          DCB      0x80,0x80,0x80,0x00
000564  00808080          DCB      0x00,0x80,0x80,0x80
000568  00010e30          DCB      0x00,0x01,0x0e,0x30
00056c  08060100          DCB      0x08,0x06,0x01,0x00
000570  80800080          DCB      0x80,0x80,0x00,0x80
000574  00808080          DCB      0x00,0x80,0x80,0x80
000578  0f300c03          DCB      0x0f,0x30,0x0c,0x03
00057c  0c300f00          DCB      0x0c,0x30,0x0f,0x00
000580  00808000          DCB      0x00,0x80,0x80,0x00
000584  80808000          DCB      0x80,0x80,0x80,0x00
000588  0020312e          DCB      0x00,0x20,0x31,0x2e
00058c  0e312000          DCB      0x0e,0x31,0x20,0x00
000590  80808000          DCB      0x80,0x80,0x80,0x00
000594  00808080          DCB      0x00,0x80,0x80,0x80
000598  80818e70          DCB      0x80,0x81,0x8e,0x70
00059c  18060100          DCB      0x18,0x06,0x01,0x00
0005a0  00808080          DCB      0x00,0x80,0x80,0x80
0005a4  80808000          DCB      0x80,0x80,0x80,0x00
0005a8  0021302c          DCB      0x00,0x21,0x30,0x2c
0005ac  22213000          DCB      0x22,0x21,0x30,0x00
0005b0  00000000          DCB      0x00,0x00,0x00,0x00
0005b4  807c0202          DCB      0x80,0x7c,0x02,0x02
0005b8  00000000          DCB      0x00,0x00,0x00,0x00
0005bc  003f4040          DCB      0x00,0x3f,0x40,0x40
0005c0  00000000          DCB      0x00,0x00,0x00,0x00
0005c4  ff000000          DCB      0xff,0x00,0x00,0x00
0005c8  00000000          DCB      0x00,0x00,0x00,0x00
0005cc  ff000000          DCB      0xff,0x00,0x00,0x00
0005d0  0002027c          DCB      0x00,0x02,0x02,0x7c
0005d4  80000000          DCB      0x80,0x00,0x00,0x00
0005d8  0040403f          DCB      0x00,0x40,0x40,0x3f
0005dc  00000000          DCB      0x00,0x00,0x00,0x00
0005e0  00060101          DCB      0x00,0x06,0x01,0x01
0005e4  02020404          DCB      0x02,0x02,0x04,0x04
0005e8  00000000          DCB      0x00,0x00,0x00,0x00
0005ec  00000000          DCB      0x00,0x00,0x00,0x00
0005f0  00000000          DCB      0x00,0x00,0x00,0x00
0005f4  00000000          DCB      0x00,0x00,0x00,0x00
0005f8  00000000          DCB      0x00,0x00,0x00,0x00
0005fc  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\Display.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_Display_c_f30b7a7a____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_Display_c_f30b7a7a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_Display_c_f30b7a7a____REVSH|
#line 144
|__asm___9_Display_c_f30b7a7a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
