; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\usb_prop.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\usb_prop.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\usb_prop.crf ..\src\usb_prop.c]
                          THUMB

                          AREA ||i.Get_Max_Lun||, CODE, READONLY, ALIGN=2

                  Get_Max_Lun PROC
;;;394    *******************************************************************************/
;;;395    uint8_t *Get_Max_Lun(uint16_t Length)
000000  4601              MOV      r1,r0
;;;396    {
;;;397      if (Length == 0)
000002  b929              CBNZ     r1,|L1.16|
;;;398      {
;;;399        pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
000004  2001              MOVS     r0,#1
000006  4a03              LDR      r2,|L1.20|
000008  6812              LDR      r2,[r2,#0]  ; pInformation
00000a  8210              STRH     r0,[r2,#0x10]
;;;400        return 0;
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;401      }
;;;402      else
;;;403      {
;;;404        return((uint8_t*)(&Max_Lun));
;;;405      }
;;;406    }
00000e  4770              BX       lr
                  |L1.16|
000010  4801              LDR      r0,|L1.24|
000012  e7fc              B        |L1.14|
;;;407    
                          ENDP

                  |L1.20|
                          DCD      pInformation
                  |L1.24|
                          DCD      Max_Lun

                          AREA ||i.MASS_Data_Setup||, CODE, READONLY, ALIGN=2

                  MASS_Data_Setup PROC
;;;264    *******************************************************************************/
;;;265    RESULT MASS_Data_Setup(uint8_t RequestNo)
000000  b570              PUSH     {r4-r6,lr}
;;;266    {
000002  4605              MOV      r5,r0
;;;267      uint8_t    *(*CopyRoutine)(uint16_t);
;;;268    
;;;269      CopyRoutine = NULL;
000004  2400              MOVS     r4,#0
;;;270      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000006  4814              LDR      r0,|L2.88|
000008  6800              LDR      r0,[r0,#0]  ; pInformation
00000a  7800              LDRB     r0,[r0,#0]
00000c  f000007f          AND      r0,r0,#0x7f
000010  2821              CMP      r0,#0x21
000012  d110              BNE      |L2.54|
;;;271          && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
000014  2dfe              CMP      r5,#0xfe
000016  d10e              BNE      |L2.54|
000018  480f              LDR      r0,|L2.88|
00001a  6800              LDR      r0,[r0,#0]  ; pInformation
00001c  8840              LDRH     r0,[r0,#2]
00001e  b950              CBNZ     r0,|L2.54|
;;;272          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
000020  480d              LDR      r0,|L2.88|
000022  6800              LDR      r0,[r0,#0]  ; pInformation
000024  8880              LDRH     r0,[r0,#4]
000026  b930              CBNZ     r0,|L2.54|
000028  480b              LDR      r0,|L2.88|
00002a  6800              LDR      r0,[r0,#0]  ; pInformation
00002c  88c0              LDRH     r0,[r0,#6]
00002e  2801              CMP      r0,#1
000030  d101              BNE      |L2.54|
;;;273      {
;;;274        CopyRoutine = Get_Max_Lun;
000032  4c0a              LDR      r4,|L2.92|
000034  e001              B        |L2.58|
                  |L2.54|
;;;275      }
;;;276      else
;;;277      {
;;;278        return USB_UNSUPPORT;
000036  2002              MOVS     r0,#2
                  |L2.56|
;;;279      }
;;;280    
;;;281      if (CopyRoutine == NULL)
;;;282      {
;;;283        return USB_UNSUPPORT;
;;;284      }
;;;285    
;;;286      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;287      pInformation->Ctrl_Info.Usb_wOffset = 0;
;;;288      (*CopyRoutine)(0);
;;;289    
;;;290      return USB_SUCCESS;
;;;291    
;;;292    }
000038  bd70              POP      {r4-r6,pc}
                  |L2.58|
00003a  b90c              CBNZ     r4,|L2.64|
00003c  2002              MOVS     r0,#2                 ;283
00003e  e7fb              B        |L2.56|
                  |L2.64|
000040  4805              LDR      r0,|L2.88|
000042  6800              LDR      r0,[r0,#0]            ;286  ; pInformation
000044  6184              STR      r4,[r0,#0x18]         ;286
000046  2100              MOVS     r1,#0                 ;287
000048  4803              LDR      r0,|L2.88|
00004a  6800              LDR      r0,[r0,#0]            ;287  ; pInformation
00004c  8241              STRH     r1,[r0,#0x12]         ;287
00004e  2000              MOVS     r0,#0                 ;288
000050  47a0              BLX      r4                    ;288
000052  2000              MOVS     r0,#0                 ;290
000054  e7f0              B        |L2.56|
;;;293    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      pInformation
                  |L2.92|
                          DCD      Get_Max_Lun

                          AREA ||i.MASS_GetConfigDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetConfigDescriptor PROC
;;;361    *******************************************************************************/
;;;362    uint8_t *MASS_GetConfigDescriptor(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;363    {
000002  4604              MOV      r4,r0
;;;364      return Standard_GetDescriptorData(Length, &Config_Descriptor );
000004  4902              LDR      r1,|L3.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       Standard_GetDescriptorData
;;;365    }
00000c  bd10              POP      {r4,pc}
;;;366    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      Config_Descriptor

                          AREA ||i.MASS_GetDeviceDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetDeviceDescriptor PROC
;;;349    *******************************************************************************/
;;;350    uint8_t *MASS_GetDeviceDescriptor(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;351    {
000002  4604              MOV      r4,r0
;;;352      return Standard_GetDescriptorData(Length, &Device_Descriptor );
000004  4902              LDR      r1,|L4.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       Standard_GetDescriptorData
;;;353    }
00000c  bd10              POP      {r4,pc}
;;;354    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      Device_Descriptor

                          AREA ||i.MASS_GetStringDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetStringDescriptor PROC
;;;373    *******************************************************************************/
;;;374    uint8_t *MASS_GetStringDescriptor(uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;375    {
000002  4605              MOV      r5,r0
;;;376      uint8_t wValue0 = pInformation->USBwValue0;
000004  4806              LDR      r0,|L5.32|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  78c4              LDRB     r4,[r0,#3]
;;;377    
;;;378      if (wValue0 > 5)
00000a  2c05              CMP      r4,#5
00000c  dd01              BLE      |L5.18|
;;;379      {
;;;380        return NULL;
00000e  2000              MOVS     r0,#0
                  |L5.16|
;;;381      }
;;;382      else
;;;383      {
;;;384        return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
;;;385      }
;;;386    }
000010  bd70              POP      {r4-r6,pc}
                  |L5.18|
000012  4804              LDR      r0,|L5.36|
000014  eb0001c4          ADD      r1,r0,r4,LSL #3       ;384
000018  4628              MOV      r0,r5                 ;384
00001a  f7fffffe          BL       Standard_GetDescriptorData
00001e  e7f7              B        |L5.16|
;;;387    
                          ENDP

                  |L5.32|
                          DCD      pInformation
                  |L5.36|
                          DCD      String_Descriptor

                          AREA ||i.MASS_Get_Interface_Setting||, CODE, READONLY, ALIGN=1

                  MASS_Get_Interface_Setting PROC
;;;329    *******************************************************************************/
;;;330    RESULT MASS_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
000000  4602              MOV      r2,r0
;;;331    {
;;;332      if (AlternateSetting > 0)
000002  2900              CMP      r1,#0
000004  dd01              BLE      |L6.10|
;;;333      {
;;;334        return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
000006  2002              MOVS     r0,#2
                  |L6.8|
;;;335      }
;;;336      else if (Interface > 0)
;;;337      {
;;;338        return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
;;;339      }
;;;340      return USB_SUCCESS;
;;;341    }
000008  4770              BX       lr
                  |L6.10|
00000a  2a00              CMP      r2,#0                 ;336
00000c  dd01              BLE      |L6.18|
00000e  2002              MOVS     r0,#2                 ;338
000010  e7fa              B        |L6.8|
                  |L6.18|
000012  2000              MOVS     r0,#0                 ;340
000014  e7f8              B        |L6.8|
;;;342    
                          ENDP


                          AREA ||i.MASS_NoData_Setup||, CODE, READONLY, ALIGN=2

                  MASS_NoData_Setup PROC
;;;300    *******************************************************************************/
;;;301    RESULT MASS_NoData_Setup(uint8_t RequestNo)
000000  b510              PUSH     {r4,lr}
;;;302    {
000002  4604              MOV      r4,r0
;;;303      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000004  4811              LDR      r0,|L7.76|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  7800              LDRB     r0,[r0,#0]
00000a  f000007f          AND      r0,r0,#0x7f
00000e  2821              CMP      r0,#0x21
000010  d11a              BNE      |L7.72|
;;;304          && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
000012  2cff              CMP      r4,#0xff
000014  d118              BNE      |L7.72|
000016  480d              LDR      r0,|L7.76|
000018  6800              LDR      r0,[r0,#0]  ; pInformation
00001a  8840              LDRH     r0,[r0,#2]
00001c  b9a0              CBNZ     r0,|L7.72|
;;;305          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
00001e  480b              LDR      r0,|L7.76|
000020  6800              LDR      r0,[r0,#0]  ; pInformation
000022  8880              LDRH     r0,[r0,#4]
000024  b980              CBNZ     r0,|L7.72|
000026  4809              LDR      r0,|L7.76|
000028  6800              LDR      r0,[r0,#0]  ; pInformation
00002a  88c0              LDRH     r0,[r0,#6]
00002c  b960              CBNZ     r0,|L7.72|
;;;306      {
;;;307        /* Initialize Endpoint 1 */
;;;308        ClearDTOG_TX(ENDP1);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       ClearDTOG_TX
;;;309    
;;;310        /* Initialize Endpoint 2 */
;;;311        ClearDTOG_RX(ENDP2);
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       ClearDTOG_RX
;;;312    
;;;313        /*initialize the CBW signature to enable the clear feature*/
;;;314        CBW.dSignature = BOT_CBW_SIGNATURE;
00003a  4805              LDR      r0,|L7.80|
00003c  4905              LDR      r1,|L7.84|
00003e  6008              STR      r0,[r1,#0]  ; CBW
;;;315        Bot_State = BOT_IDLE;
000040  2000              MOVS     r0,#0
000042  4905              LDR      r1,|L7.88|
000044  7008              STRB     r0,[r1,#0]
                  |L7.70|
;;;316    
;;;317        return USB_SUCCESS;
;;;318      }
;;;319      return USB_UNSUPPORT;
;;;320    }
000046  bd10              POP      {r4,pc}
                  |L7.72|
000048  2002              MOVS     r0,#2                 ;319
00004a  e7fc              B        |L7.70|
;;;321    
                          ENDP

                  |L7.76|
                          DCD      pInformation
                  |L7.80|
                          DCD      0x43425355
                  |L7.84|
                          DCD      ||CBW||
                  |L7.88|
                          DCD      Bot_State

                          AREA ||i.MASS_Reset||, CODE, READONLY, ALIGN=2

                  MASS_Reset PROC
;;;139    *******************************************************************************/
;;;140    void MASS_Reset()
000000  b510              PUSH     {r4,lr}
;;;141    {
;;;142      /* Set the device as not configured */
;;;143      Device_Info.Current_Configuration = 0;
000002  2000              MOVS     r0,#0
000004  4932              LDR      r1,|L8.208|
000006  7288              STRB     r0,[r1,#0xa]
;;;144    
;;;145      /* Current Feature initialization */
;;;146      pInformation->Current_Feature = MASS_ConfigDescriptor[7];
000008  4832              LDR      r0,|L8.212|
00000a  79c0              LDRB     r0,[r0,#7]  ; MASS_ConfigDescriptor
00000c  4932              LDR      r1,|L8.216|
00000e  6809              LDR      r1,[r1,#0]  ; pInformation
000010  7248              STRB     r0,[r1,#9]
;;;147    
;;;148      SetBTABLE(BTABLE_ADDRESS);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       SetBTABLE
;;;149    
;;;150      /* Initialize Endpoint 0 */
;;;151      SetEPType(ENDP0, EP_CONTROL);
000018  f44f7100          MOV      r1,#0x200
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SetEPType
;;;152      SetEPTxStatus(ENDP0, EP_TX_NAK);
000022  2120              MOVS     r1,#0x20
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       SetEPTxStatus
;;;153      SetEPRxAddr(ENDP0, ENDP0_RXADDR);
00002a  2118              MOVS     r1,#0x18
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       SetEPRxAddr
;;;154      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000032  482a              LDR      r0,|L8.220|
000034  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       SetEPRxCount
;;;155      SetEPTxAddr(ENDP0, ENDP0_TXADDR);
00003e  2158              MOVS     r1,#0x58
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SetEPTxAddr
;;;156      Clear_Status_Out(ENDP0);
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       Clear_Status_Out
;;;157      SetEPRxValid(ENDP0);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       SetEPRxValid
;;;158    
;;;159      /* Initialize Endpoint 1 */
;;;160      SetEPType(ENDP1, EP_BULK);
000052  2100              MOVS     r1,#0
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       SetEPType
;;;161      SetEPTxAddr(ENDP1, ENDP1_TXADDR);
00005a  2198              MOVS     r1,#0x98
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       SetEPTxAddr
;;;162      SetEPTxStatus(ENDP1, EP_TX_NAK);
000062  2120              MOVS     r1,#0x20
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       SetEPTxStatus
;;;163      SetEPRxStatus(ENDP1, EP_RX_DIS);
00006a  2100              MOVS     r1,#0
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       SetEPRxStatus
;;;164    
;;;165      /* Initialize Endpoint 2 */
;;;166      SetEPType(ENDP2, EP_BULK);
000072  2100              MOVS     r1,#0
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       SetEPType
;;;167      SetEPRxAddr(ENDP2, ENDP2_RXADDR);
00007a  21d8              MOVS     r1,#0xd8
00007c  2002              MOVS     r0,#2
00007e  f7fffffe          BL       SetEPRxAddr
;;;168      SetEPRxCount(ENDP2, Device_Property.MaxPacketSize);
000082  4816              LDR      r0,|L8.220|
000084  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000088  2002              MOVS     r0,#2
00008a  f7fffffe          BL       SetEPRxCount
;;;169      SetEPRxStatus(ENDP2, EP_RX_VALID);
00008e  f44f5140          MOV      r1,#0x3000
000092  2002              MOVS     r0,#2
000094  f7fffffe          BL       SetEPRxStatus
;;;170      SetEPTxStatus(ENDP2, EP_TX_DIS);
000098  2100              MOVS     r1,#0
00009a  2002              MOVS     r0,#2
00009c  f7fffffe          BL       SetEPTxStatus
;;;171    
;;;172    
;;;173      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
0000a0  480e              LDR      r0,|L8.220|
0000a2  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
0000a6  2000              MOVS     r0,#0
0000a8  f7fffffe          BL       SetEPRxCount
;;;174      SetEPRxValid(ENDP0);
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       SetEPRxValid
;;;175    
;;;176      /* Set the device to response on default address */
;;;177      SetDeviceAddress(0);
0000b2  2000              MOVS     r0,#0
0000b4  f7fffffe          BL       SetDeviceAddress
;;;178    
;;;179      bDeviceState = ATTACHED;
0000b8  2001              MOVS     r0,#1
0000ba  4909              LDR      r1,|L8.224|
0000bc  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;180    
;;;181      CBW.dSignature = BOT_CBW_SIGNATURE;
0000be  4809              LDR      r0,|L8.228|
0000c0  4909              LDR      r1,|L8.232|
0000c2  6008              STR      r0,[r1,#0]  ; CBW
;;;182      Bot_State = BOT_IDLE;
0000c4  2000              MOVS     r0,#0
0000c6  4909              LDR      r1,|L8.236|
0000c8  7008              STRB     r0,[r1,#0]
;;;183    
;;;184      USB_NotConfigured_LED();
0000ca  f7fffffe          BL       USB_NotConfigured_LED
;;;185    }
0000ce  bd10              POP      {r4,pc}
;;;186    
                          ENDP

                  |L8.208|
                          DCD      Device_Info
                  |L8.212|
                          DCD      MASS_ConfigDescriptor
                  |L8.216|
                          DCD      pInformation
                  |L8.220|
                          DCD      Device_Property
                  |L8.224|
                          DCD      bDeviceState
                  |L8.228|
                          DCD      0x43425355
                  |L8.232|
                          DCD      ||CBW||
                  |L8.236|
                          DCD      Bot_State

                          AREA ||i.MASS_Status_In||, CODE, READONLY, ALIGN=1

                  MASS_Status_In PROC
;;;240    *******************************************************************************/
;;;241    void MASS_Status_In(void)
000000  4770              BX       lr
;;;242    {
;;;243      return;
;;;244    }
;;;245    
                          ENDP


                          AREA ||i.MASS_Status_Out||, CODE, READONLY, ALIGN=1

                  MASS_Status_Out PROC
;;;252    *******************************************************************************/
;;;253    void MASS_Status_Out(void)
000000  4770              BX       lr
;;;254    {
;;;255      return;
;;;256    }
;;;257    
                          ENDP


                          AREA ||i.MASS_init||, CODE, READONLY, ALIGN=2

                  MASS_init PROC
;;;115    *******************************************************************************/
;;;116    void MASS_init()
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118      /* Update the serial number string descriptor with the data from the unique
;;;119      ID*/
;;;120      Get_SerialNum();
000002  f7fffffe          BL       Get_SerialNum
;;;121    
;;;122      pInformation->Current_Configuration = 0;
000006  2000              MOVS     r0,#0
000008  4905              LDR      r1,|L11.32|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  7288              STRB     r0,[r1,#0xa]
;;;123    
;;;124      /* Connect the device */
;;;125      PowerOn();
00000e  f7fffffe          BL       PowerOn
;;;126    
;;;127      /* Perform basic device initialization operations */
;;;128      USB_SIL_Init();
000012  f7fffffe          BL       USB_SIL_Init
;;;129    
;;;130      bDeviceState = UNCONNECTED;
000016  2000              MOVS     r0,#0
000018  4902              LDR      r1,|L11.36|
00001a  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;131    }
00001c  bd10              POP      {r4,pc}
;;;132    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      pInformation
                  |L11.36|
                          DCD      bDeviceState

                          AREA ||i.Mass_Storage_ClearFeature||, CODE, READONLY, ALIGN=2

                  Mass_Storage_ClearFeature PROC
;;;214    *******************************************************************************/
;;;215    void Mass_Storage_ClearFeature(void)
000000  b510              PUSH     {r4,lr}
;;;216    {
;;;217      /* when the host send a CBW with invalid signature or invalid length the two
;;;218         Endpoints (IN & OUT) shall stall until receiving a Mass Storage Reset     */
;;;219      if (CBW.dSignature != BOT_CBW_SIGNATURE)
000002  4804              LDR      r0,|L12.20|
000004  6800              LDR      r0,[r0,#0]  ; CBW
000006  4904              LDR      r1,|L12.24|
000008  4288              CMP      r0,r1
00000a  d002              BEQ      |L12.18|
;;;220        Bot_Abort(BOTH_DIR);
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       Bot_Abort
                  |L12.18|
;;;221    }
000012  bd10              POP      {r4,pc}
;;;222    
                          ENDP

                  |L12.20|
                          DCD      ||CBW||
                  |L12.24|
                          DCD      0x43425355

                          AREA ||i.Mass_Storage_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Mass_Storage_SetConfiguration PROC
;;;193    *******************************************************************************/
;;;194    void Mass_Storage_SetConfiguration(void)
000000  b510              PUSH     {r4,lr}
;;;195    {
;;;196      if (pInformation->Current_Configuration != 0)
000002  4808              LDR      r0,|L13.36|
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a80              LDRB     r0,[r0,#0xa]
000008  b158              CBZ      r0,|L13.34|
;;;197      {
;;;198        /* Device configured */
;;;199        bDeviceState = CONFIGURED;
00000a  2005              MOVS     r0,#5
00000c  4906              LDR      r1,|L13.40|
00000e  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;200       
;;;201        ClearDTOG_TX(ENDP1);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       ClearDTOG_TX
;;;202        ClearDTOG_RX(ENDP2);
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       ClearDTOG_RX
;;;203    
;;;204        Bot_State = BOT_IDLE; /* set the Bot state machine to the IDLE state */
00001c  2000              MOVS     r0,#0
00001e  4903              LDR      r1,|L13.44|
000020  7008              STRB     r0,[r1,#0]
                  |L13.34|
;;;205      }
;;;206    }
000022  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L13.36|
                          DCD      pInformation
                  |L13.40|
                          DCD      bDeviceState
                  |L13.44|
                          DCD      Bot_State

                          AREA ||i.Mass_Storage_SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  Mass_Storage_SetDeviceAddress PROC
;;;229    *******************************************************************************/
;;;230    void Mass_Storage_SetDeviceAddress (void)
000000  2004              MOVS     r0,#4
;;;231    {
;;;232      bDeviceState = ADDRESSED;
000002  4901              LDR      r1,|L14.8|
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;233    }
000006  4770              BX       lr
;;;234    /*******************************************************************************
                          ENDP

                  |L14.8|
                          DCD      bDeviceState

                          AREA ||.data||, DATA, ALIGN=2

                  Max_Lun
                          DCD      0x00000000
                  Device_Table
000004  03010000          DCB      0x03,0x01,0x00,0x00
                  Device_Property
                          DCD      MASS_init
                          DCD      MASS_Reset
                          DCD      MASS_Status_In
                          DCD      MASS_Status_Out
                          DCD      MASS_Data_Setup
                          DCD      MASS_NoData_Setup
                          DCD      MASS_Get_Interface_Setting
                          DCD      MASS_GetDeviceDescriptor
                          DCD      MASS_GetConfigDescriptor
                          DCD      MASS_GetStringDescriptor
                          DCD      0x00000000
000034  40000000          DCB      0x40,0x00,0x00,0x00
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_ClearFeature
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetDeviceAddress
                  Device_Descriptor
                          DCD      MASS_DeviceDescriptor
000060  0012              DCW      0x0012
000062  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      MASS_ConfigDescriptor
000068  0020              DCW      0x0020
00006a  0000              DCB      0x00,0x00
                  String_Descriptor
                          DCD      MASS_StringLangID
000070  0004              DCW      0x0004
000072  0000              DCB      0x00,0x00
                          DCD      MASS_StringVendor
000078  0026              DCW      0x0026
00007a  0000              DCB      0x00,0x00
                          DCD      MASS_StringProduct
000080  0026              DCW      0x0026
000082  0000              DCB      0x00,0x00
                          DCD      MASS_StringSerial
000088  001a              DCW      0x001a
00008a  0000              DCB      0x00,0x00
                          DCD      MASS_StringInterface
000090  0010              DCW      0x0010
000092  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_prop.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_Max_Lun____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_prop_c_Max_Lun____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_Max_Lun____REVSH|
#line 144
|__asm___10_usb_prop_c_Max_Lun____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
