; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\mass_mal.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\mass_mal.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\mass_mal.crf ..\src\mass_mal.c]
                          THUMB

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=2

                  MAL_GetStatus PROC
;;;87     *******************************************************************************/
;;;88     uint16_t MAL_GetStatus (uint8_t lun)
000000  4601              MOV      r1,r0
;;;89     {
;;;90     
;;;91     	/* only one zone is used */
;;;92     	Mass_Block_Count[0] = 0x03FF;
000002  f24030ff          MOV      r0,#0x3ff
000006  4a07              LDR      r2,|L1.36|
000008  6010              STR      r0,[r2,#0]  ; Mass_Block_Count
;;;93     	Mass_Block_Size[0]  = 0x0800;
00000a  f44f6000          MOV      r0,#0x800
00000e  4a06              LDR      r2,|L1.40|
000010  6010              STR      r0,[r2,#0]  ; Mass_Block_Size
;;;94     	Mass_Memory_Size[0] = (Mass_Block_Count[0] * Mass_Block_Size[0]);
000012  4804              LDR      r0,|L1.36|
000014  6800              LDR      r0,[r0,#0]  ; Mass_Block_Count
000016  6812              LDR      r2,[r2,#0]  ; Mass_Block_Size
000018  4350              MULS     r0,r2,r0
00001a  4a04              LDR      r2,|L1.44|
00001c  6010              STR      r0,[r2,#0]  ; Mass_Memory_Size
;;;95     	return MAL_OK;
00001e  2000              MOVS     r0,#0
;;;96     
;;;97     
;;;98     }
000020  4770              BX       lr
;;;99     
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      Mass_Block_Count
                  |L1.40|
                          DCD      Mass_Block_Size
                  |L1.44|
                          DCD      Mass_Memory_Size

                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=1

                  MAL_Init PROC
;;;51     *******************************************************************************/
;;;52     uint16_t MAL_Init(uint8_t lun)
000000  4601              MOV      r1,r0
;;;53     {
;;;54       return MAL_OK;
000002  2000              MOVS     r0,#0
;;;55     }
000004  4770              BX       lr
;;;56     /*******************************************************************************
                          ENDP


                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=1

                  MAL_Read PROC
;;;74     *******************************************************************************/
;;;75     uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;76     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;77     	memset(Readbuff, 0xff, Transfer_Length);
00000c  22ff              MOVS     r2,#0xff
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       __aeabi_memset
;;;78       return MAL_OK;
000016  2000              MOVS     r0,#0
;;;79     }
000018  e8bd81f0          POP      {r4-r8,pc}
;;;80     
                          ENDP


                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=1

                  MAL_Write PROC
;;;62     *******************************************************************************/
;;;63     uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Length)
000000  b510              PUSH     {r4,lr}
;;;64     {
000002  4604              MOV      r4,r0
;;;65       return MAL_OK;
000004  2000              MOVS     r0,#0
;;;66     }
000006  bd10              POP      {r4,pc}
;;;67     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  Mass_Memory_Size
                          %        8
                  Mass_Block_Size
                          %        8
                  Mass_Block_Count
                          %        8
                  Status
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\mass_mal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Status____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_mass_mal_c_Status____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Status____REVSH|
#line 144
|__asm___10_mass_mal_c_Status____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
