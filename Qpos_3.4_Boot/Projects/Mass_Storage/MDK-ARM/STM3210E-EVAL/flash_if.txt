; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\flash_if.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\flash_if.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\flash_if.crf ..\src\flash_if.c]
                          THUMB

                          AREA ||i.FLASH_If_Erase||, CODE, READONLY, ALIGN=1

                  FLASH_If_Erase PROC
;;;69     *******************************************************************************/
;;;70     uint16_t FLASH_If_Erase(uint32_t SectorAddress)
000000  b510              PUSH     {r4,lr}
;;;71     {
000002  4604              MOV      r4,r0
;;;72     #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)
;;;73       FLASH_ClearFlag(FLASH_FLAG_PGAERR | FLASH_FLAG_OPTVERR);
;;;74       FLASH_ErasePage(SectorAddress);
;;;75     #else
;;;76       FLASH_ErasePage(SectorAddress);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       FLASH_ErasePage
;;;77     #endif /* STM32L1XX_XD */
;;;78       
;;;79       return MAL_OK;
00000a  2000              MOVS     r0,#0
;;;80     }
00000c  bd10              POP      {r4,pc}
;;;81     
                          ENDP


                          AREA ||i.FLASH_If_Init||, CODE, READONLY, ALIGN=1

                  FLASH_If_Init PROC
;;;56     *******************************************************************************/
;;;57     uint16_t FLASH_If_Init(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59     	FLASH_Unlock();
000002  f7fffffe          BL       FLASH_Unlock
;;;60       	return MAL_OK;
000006  2000              MOVS     r0,#0
;;;61     }
000008  bd10              POP      {r4,pc}
;;;62     
                          ENDP


                          AREA ||i.FLASH_If_Read||, CODE, READONLY, ALIGN=1

                  FLASH_If_Read PROC
;;;170    *******************************************************************************/
;;;171    uint8_t *FLASH_If_Read (uint32_t SectorAddress, uint32_t DataLength)
000000  4770              BX       lr
;;;172    {
;;;173      return  (uint8_t*)(SectorAddress);
;;;174    }
;;;175    
                          ENDP


                          AREA ||i.FLASH_If_Write||, CODE, READONLY, ALIGN=2

                  FLASH_If_Write PROC
;;;88     *******************************************************************************/
;;;89     uint16_t FLASH_If_Write(uint32_t SectorAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;91       uint32_t idx = 0;
000006  2400              MOVS     r4,#0
;;;92     #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)
;;;93       __IO uint32_t* malPointer = (uint32_t *)MAL_Buffer;
;;;94       __IO uint32_t* memPointer = (uint32_t *)SectorAddress;
;;;95       __IO uint32_t memBuffer[32]; /* Temporary buffer holding data that will be written in a half-page space */
;;;96       __IO uint32_t* mempBuffer = memBuffer;  
;;;97       __IO uint32_t* tmp;
;;;98     #endif /* STM32L1XX_XD */      
;;;99       
;;;100      if  (DataLength & 0x3) /* Not an aligned data */
000008  f0050003          AND      r0,r5,#3
00000c  b160              CBZ      r0,|L4.40|
;;;101      {
;;;102        for (idx = DataLength; idx < ((DataLength & 0xFFFC) + 4); idx++)
00000e  462c              MOV      r4,r5
000010  e003              B        |L4.26|
                  |L4.18|
;;;103        {
;;;104          MAL_Buffer[idx] = 0xFF;
000012  20ff              MOVS     r0,#0xff
000014  490b              LDR      r1,|L4.68|
000016  5508              STRB     r0,[r1,r4]
000018  1c64              ADDS     r4,r4,#1              ;102
                  |L4.26|
00001a  f64f71fc          MOV      r1,#0xfffc            ;102
00001e  ea050001          AND      r0,r5,r1              ;102
000022  1d00              ADDS     r0,r0,#4              ;102
000024  42a0              CMP      r0,r4                 ;102
000026  d8f4              BHI      |L4.18|
                  |L4.40|
;;;105        }
;;;106      } 
;;;107      
;;;108    #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS) 
;;;109      /* Reinitialize the intermediate buffer pointer */
;;;110      mempBuffer = memBuffer;
;;;111      
;;;112      /* If the address is not aligned to half-page fill the first location with existing data */
;;;113      if (((uint32_t)memPointer & 0x7F) != 0)
;;;114      {
;;;115        /* get the aligned address */
;;;116        tmp = (uint32_t *)((uint32_t)memPointer & 0xFFFFFF80);
;;;117        
;;;118        /* Read the first part from the memory */
;;;119        while (tmp < memPointer)
;;;120        {
;;;121          *(uint32_t *)(mempBuffer++) = *(uint32_t *)(tmp++);
;;;122        }
;;;123      }    
;;;124      
;;;125      while (malPointer < (uint32_t*)(MAL_Buffer + DataLength))
;;;126      {    
;;;127        /* Fill with the received buffer */
;;;128        while (mempBuffer < (memBuffer + 32))
;;;129        {
;;;130          /* If there are still data available in the received buffer */
;;;131          if (malPointer < ((uint32_t *)MAL_Buffer + DataLength))
;;;132          {
;;;133            *(uint32_t *)(mempBuffer++) = *(uint32_t *)(malPointer++);
;;;134          }
;;;135          else /* no more data available in the received buffer: fill remaining with dummy 0 */
;;;136          {
;;;137            *(uint32_t *)(mempBuffer++) = 0;
;;;138          }
;;;139        }
;;;140       
;;;141        /* Write the buffer to the memory*/    
;;;142        FLASH_ProgramHalfPage(((uint32_t)memPointer & 0xFFFFFF80), (uint32_t *)(memBuffer));    
;;;143        
;;;144        /* Increment the memory pointer */ 
;;;145        memPointer = (uint32_t *)(((uint32_t)memPointer & 0xFFFFFF80) + (32*4));
;;;146        
;;;147        /* Reinitialize the intermediate buffer pointer */
;;;148        mempBuffer = memBuffer;
;;;149      }
;;;150      
;;;151    #else
;;;152      
;;;153      /* Data received are Word multiple */    
;;;154      for (idx = 0; idx <  DataLength; idx = idx + 4)
000028  2400              MOVS     r4,#0
00002a  e006              B        |L4.58|
                  |L4.44|
;;;155      {
;;;156        FLASH_ProgramWord(SectorAddress, *(uint32_t *)(MAL_Buffer + idx));  
00002c  4805              LDR      r0,|L4.68|
00002e  5901              LDR      r1,[r0,r4]
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       FLASH_ProgramWord
;;;157        SectorAddress += 4;
000036  1d36              ADDS     r6,r6,#4
000038  1d24              ADDS     r4,r4,#4              ;154
                  |L4.58|
00003a  42ac              CMP      r4,r5                 ;154
00003c  d3f6              BCC      |L4.44|
;;;158      } 
;;;159    #endif /* STM32L1XX_XD */
;;;160     
;;;161      return MAL_OK;
00003e  2000              MOVS     r0,#0
;;;162    }
000040  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP

000042  0000              DCW      0x0000
                  |L4.68|
                          DCD      MAL_Buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  MAL_Buffer
                          %        2048

;*** Start embedded assembler ***

#line 1 "..\\src\\flash_if.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_flash_if_c_79a35935____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_flash_if_c_79a35935____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_flash_if_c_79a35935____REVSH|
#line 144
|__asm___10_flash_if_c_79a35935____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
