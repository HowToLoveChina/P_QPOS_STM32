; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\usb_istr.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\usb_istr.crf ..\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;78     *******************************************************************************/
;;;79     void USB_Istr(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81       wIstr = _GetISTR();
000002  4837              LDR      r0,|L1.224|
000004  6800              LDR      r0,[r0,#0]
000006  4937              LDR      r1,|L1.228|
000008  8008              STRH     r0,[r1,#0]
;;;82     
;;;83     #if (IMR_MSK & ISTR_CTR)
;;;84       if (wIstr & ISTR_CTR & wInterrupt_Mask)
00000a  4608              MOV      r0,r1
00000c  8800              LDRH     r0,[r0,#0]  ; wIstr
00000e  f4004000          AND      r0,r0,#0x8000
000012  4935              LDR      r1,|L1.232|
000014  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000016  4008              ANDS     r0,r0,r1
000018  b108              CBZ      r0,|L1.30|
;;;85       {
;;;86         /* servicing of the endpoint correct transfer interrupt */
;;;87         /* clear of the CTR flag into the sub */
;;;88         CTR_LP();
00001a  f7fffffe          BL       CTR_LP
                  |L1.30|
;;;89     #ifdef CTR_CALLBACK
;;;90         CTR_Callback();
;;;91     #endif
;;;92       }
;;;93     #endif  
;;;94       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;95     #if (IMR_MSK & ISTR_RESET)
;;;96       if (wIstr & ISTR_RESET & wInterrupt_Mask)
00001e  4831              LDR      r0,|L1.228|
000020  8800              LDRH     r0,[r0,#0]  ; wIstr
000022  f4006080          AND      r0,r0,#0x400
000026  4930              LDR      r1,|L1.232|
000028  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00002a  4008              ANDS     r0,r0,r1
00002c  b130              CBZ      r0,|L1.60|
;;;97       {
;;;98         _SetISTR((uint16_t)CLR_RESET);
00002e  f64f30ff          MOV      r0,#0xfbff
000032  492b              LDR      r1,|L1.224|
000034  6008              STR      r0,[r1,#0]
;;;99         Device_Property.Reset();
000036  492d              LDR      r1,|L1.236|
000038  6848              LDR      r0,[r1,#4]  ; Device_Property
00003a  4780              BLX      r0
                  |L1.60|
;;;100    #ifdef RESET_CALLBACK
;;;101        RESET_Callback();
;;;102    #endif
;;;103      }
;;;104    #endif
;;;105      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;106    #if (IMR_MSK & ISTR_DOVR)
;;;107      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;108      {
;;;109        _SetISTR((uint16_t)CLR_DOVR);
;;;110    #ifdef DOVR_CALLBACK
;;;111        DOVR_Callback();
;;;112    #endif
;;;113      }
;;;114    #endif
;;;115      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;116    #if (IMR_MSK & ISTR_ERR)
;;;117      if (wIstr & ISTR_ERR & wInterrupt_Mask)
00003c  4829              LDR      r0,|L1.228|
00003e  8800              LDRH     r0,[r0,#0]  ; wIstr
000040  f4005000          AND      r0,r0,#0x2000
000044  4928              LDR      r1,|L1.232|
000046  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000048  4008              ANDS     r0,r0,r1
00004a  b118              CBZ      r0,|L1.84|
;;;118      {
;;;119        _SetISTR((uint16_t)CLR_ERR);
00004c  f64d70ff          MOV      r0,#0xdfff
000050  4923              LDR      r1,|L1.224|
000052  6008              STR      r0,[r1,#0]
                  |L1.84|
;;;120    #ifdef ERR_CALLBACK
;;;121        ERR_Callback();
;;;122    #endif
;;;123      }
;;;124    #endif
;;;125      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;126    #if (IMR_MSK & ISTR_WKUP)
;;;127      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
000054  4823              LDR      r0,|L1.228|
000056  8800              LDRH     r0,[r0,#0]  ; wIstr
000058  f4005080          AND      r0,r0,#0x1000
00005c  4922              LDR      r1,|L1.232|
00005e  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000060  4008              ANDS     r0,r0,r1
000062  b130              CBZ      r0,|L1.114|
;;;128      {
;;;129        _SetISTR((uint16_t)CLR_WKUP);
000064  f64e70ff          MOV      r0,#0xefff
000068  491d              LDR      r1,|L1.224|
00006a  6008              STR      r0,[r1,#0]
;;;130        Resume(RESUME_EXTERNAL);
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       Resume
                  |L1.114|
;;;131    #ifdef WKUP_CALLBACK
;;;132        WKUP_Callback();
;;;133    #endif
;;;134      }
;;;135    #endif
;;;136      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;137    #if (IMR_MSK & ISTR_SUSP)
;;;138      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
000072  481c              LDR      r0,|L1.228|
000074  8800              LDRH     r0,[r0,#0]  ; wIstr
000076  f4006000          AND      r0,r0,#0x800
00007a  491b              LDR      r1,|L1.232|
00007c  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00007e  4008              ANDS     r0,r0,r1
000080  b160              CBZ      r0,|L1.156|
;;;139      {
;;;140    
;;;141        /* check if SUSPEND is possible */
;;;142        if (fSuspendEnabled)
000082  481b              LDR      r0,|L1.240|
000084  7800              LDRB     r0,[r0,#0]  ; fSuspendEnabled
000086  b110              CBZ      r0,|L1.142|
;;;143        {
;;;144          Suspend();
000088  f7fffffe          BL       Suspend
00008c  e002              B        |L1.148|
                  |L1.142|
;;;145        }
;;;146        else
;;;147        {
;;;148          /* if not possible then resume after xx ms */
;;;149          Resume(RESUME_LATER);
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       Resume
                  |L1.148|
;;;150        }
;;;151        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;152        _SetISTR((uint16_t)CLR_SUSP);
000094  f24f70ff          MOV      r0,#0xf7ff
000098  4911              LDR      r1,|L1.224|
00009a  6008              STR      r0,[r1,#0]
                  |L1.156|
;;;153    #ifdef SUSP_CALLBACK
;;;154        SUSP_Callback();
;;;155    #endif
;;;156      }
;;;157    #endif
;;;158      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;159    #if (IMR_MSK & ISTR_SOF)
;;;160      if (wIstr & ISTR_SOF & wInterrupt_Mask)
00009c  4811              LDR      r0,|L1.228|
00009e  8800              LDRH     r0,[r0,#0]  ; wIstr
0000a0  f4007000          AND      r0,r0,#0x200
0000a4  4910              LDR      r1,|L1.232|
0000a6  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
0000a8  4008              ANDS     r0,r0,r1
0000aa  b140              CBZ      r0,|L1.190|
;;;161      {
;;;162        _SetISTR((uint16_t)CLR_SOF);
0000ac  f64f50ff          MOV      r0,#0xfdff
0000b0  490b              LDR      r1,|L1.224|
0000b2  6008              STR      r0,[r1,#0]
;;;163        bIntPackSOF++;
0000b4  480f              LDR      r0,|L1.244|
0000b6  7800              LDRB     r0,[r0,#0]  ; bIntPackSOF
0000b8  1c40              ADDS     r0,r0,#1
0000ba  490e              LDR      r1,|L1.244|
0000bc  7008              STRB     r0,[r1,#0]
                  |L1.190|
;;;164    
;;;165    #ifdef SOF_CALLBACK
;;;166        SOF_Callback();
;;;167    #endif
;;;168      }
;;;169    #endif
;;;170      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;171    #if (IMR_MSK & ISTR_ESOF)
;;;172      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
0000be  4809              LDR      r0,|L1.228|
0000c0  8800              LDRH     r0,[r0,#0]  ; wIstr
0000c2  f4007080          AND      r0,r0,#0x100
0000c6  4908              LDR      r1,|L1.232|
0000c8  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
0000ca  4008              ANDS     r0,r0,r1
0000cc  b130              CBZ      r0,|L1.220|
;;;173      {
;;;174        _SetISTR((uint16_t)CLR_ESOF);
0000ce  f64f60ff          MOV      r0,#0xfeff
0000d2  4903              LDR      r1,|L1.224|
0000d4  6008              STR      r0,[r1,#0]
;;;175        /* resume handling timing is made with ESOFs */
;;;176        Resume(RESUME_ESOF); /* request without change of the machine state */
0000d6  2007              MOVS     r0,#7
0000d8  f7fffffe          BL       Resume
                  |L1.220|
;;;177    
;;;178    #ifdef ESOF_CALLBACK
;;;179        ESOF_Callback();
;;;180    #endif
;;;181      }
;;;182    #endif
;;;183    } /* USB_Istr */
0000dc  bd10              POP      {r4,pc}
;;;184    
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      0x40005c44
                  |L1.228|
                          DCD      wIstr
                  |L1.232|
                          DCD      wInterrupt_Mask
                  |L1.236|
                          DCD      Device_Property
                  |L1.240|
                          DCD      fSuspendEnabled
                  |L1.244|
                          DCD      bIntPackSOF

                          AREA ||.data||, DATA, ALIGN=2

                  wIstr
000000  0000              DCB      0x00,0x00
                  bIntPackSOF
000002  0000              DCB      0x00,0x00
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      EP2_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_istr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_istr_c_e9471872____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REVSH|
#line 144
|__asm___10_usb_istr_c_e9471872____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
