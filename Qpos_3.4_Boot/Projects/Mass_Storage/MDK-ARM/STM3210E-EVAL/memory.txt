; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\memory.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\memory.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\memory.crf ..\src\memory.c]
                          THUMB

                          AREA ||i.Read_Memory||, CODE, READONLY, ALIGN=2

                  Read_Memory PROC
;;;70     *******************************************************************************/
;;;71     void Read_Memory(uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  b570              PUSH     {r4-r6,lr}
;;;72     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;73       static uint32_t Offset, Length;
;;;74     
;;;75       if (TransferState == TXFR_IDLE )
000008  4837              LDR      r0,|L1.232|
00000a  7800              LDRB     r0,[r0,#0]  ; TransferState
00000c  b970              CBNZ     r0,|L1.44|
;;;76       {
;;;77         Offset = Memory_Offset * Mass_Block_Size[lun];
00000e  4837              LDR      r0,|L1.236|
000010  f8500024          LDR      r0,[r0,r4,LSL #2]
000014  4368              MULS     r0,r5,r0
000016  4936              LDR      r1,|L1.240|
000018  6008              STR      r0,[r1,#0]  ; Offset
;;;78         Length = Transfer_Length * Mass_Block_Size[lun];
00001a  4834              LDR      r0,|L1.236|
00001c  f8500024          LDR      r0,[r0,r4,LSL #2]
000020  4370              MULS     r0,r6,r0
000022  4934              LDR      r1,|L1.244|
000024  6008              STR      r0,[r1,#0]  ; Length
;;;79         TransferState = TXFR_ONGOING;
000026  2001              MOVS     r0,#1
000028  492f              LDR      r1,|L1.232|
00002a  7008              STRB     r0,[r1,#0]
                  |L1.44|
;;;80       }
;;;81     
;;;82       if (TransferState == TXFR_ONGOING )
00002c  482e              LDR      r0,|L1.232|
00002e  7800              LDRB     r0,[r0,#0]  ; TransferState
000030  2801              CMP      r0,#1
000032  d146              BNE      |L1.194|
;;;83       {
;;;84         if (!Block_Read_count)
000034  4830              LDR      r0,|L1.248|
000036  6800              LDR      r0,[r0,#0]  ; Block_Read_count
000038  b9c0              CBNZ     r0,|L1.108|
;;;85         {
;;;86           MAL_Read(lun ,
00003a  482c              LDR      r0,|L1.236|
00003c  f8300024          LDRH     r0,[r0,r4,LSL #2]
000040  b283              UXTH     r3,r0
000042  4a2e              LDR      r2,|L1.252|
000044  482a              LDR      r0,|L1.240|
000046  6801              LDR      r1,[r0,#0]  ; Offset
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       MAL_Read
;;;87                    Offset ,
;;;88                    Data_Buffer,
;;;89                    Mass_Block_Size[lun]);
;;;90     
;;;91           USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);
00004e  2240              MOVS     r2,#0x40
000050  492a              LDR      r1,|L1.252|
000052  2081              MOVS     r0,#0x81
000054  f7fffffe          BL       USB_SIL_Write
;;;92     
;;;93           Block_Read_count = Mass_Block_Size[lun] - BULK_MAX_PACKET_SIZE;
000058  4824              LDR      r0,|L1.236|
00005a  f8500024          LDR      r0,[r0,r4,LSL #2]
00005e  3840              SUBS     r0,r0,#0x40
000060  4925              LDR      r1,|L1.248|
000062  6008              STR      r0,[r1,#0]  ; Block_Read_count
;;;94           Block_offset = BULK_MAX_PACKET_SIZE;
000064  2040              MOVS     r0,#0x40
000066  4926              LDR      r1,|L1.256|
000068  6008              STR      r0,[r1,#0]  ; Block_offset
00006a  e011              B        |L1.144|
                  |L1.108|
;;;95         }
;;;96         else
;;;97         {
;;;98           USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
00006c  4823              LDR      r0,|L1.252|
00006e  4a24              LDR      r2,|L1.256|
000070  6812              LDR      r2,[r2,#0]  ; Block_offset
000072  1881              ADDS     r1,r0,r2
000074  2240              MOVS     r2,#0x40
000076  2081              MOVS     r0,#0x81
000078  f7fffffe          BL       USB_SIL_Write
;;;99     
;;;100          Block_Read_count -= BULK_MAX_PACKET_SIZE;
00007c  481e              LDR      r0,|L1.248|
00007e  6800              LDR      r0,[r0,#0]  ; Block_Read_count
000080  3840              SUBS     r0,r0,#0x40
000082  491d              LDR      r1,|L1.248|
000084  6008              STR      r0,[r1,#0]  ; Block_Read_count
;;;101          Block_offset += BULK_MAX_PACKET_SIZE;
000086  481e              LDR      r0,|L1.256|
000088  6800              LDR      r0,[r0,#0]  ; Block_offset
00008a  3040              ADDS     r0,r0,#0x40
00008c  491c              LDR      r1,|L1.256|
00008e  6008              STR      r0,[r1,#0]  ; Block_offset
                  |L1.144|
;;;102        }
;;;103    
;;;104        SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
000090  2140              MOVS     r1,#0x40
000092  2001              MOVS     r0,#1
000094  f7fffffe          BL       SetEPTxCount
;;;105        SetEPTxStatus(ENDP1, EP_TX_VALID);  
000098  2130              MOVS     r1,#0x30
00009a  2001              MOVS     r0,#1
00009c  f7fffffe          BL       SetEPTxStatus
;;;106        Offset += BULK_MAX_PACKET_SIZE;
0000a0  4813              LDR      r0,|L1.240|
0000a2  6800              LDR      r0,[r0,#0]  ; Offset
0000a4  3040              ADDS     r0,r0,#0x40
0000a6  4912              LDR      r1,|L1.240|
0000a8  6008              STR      r0,[r1,#0]  ; Offset
;;;107        Length -= BULK_MAX_PACKET_SIZE;
0000aa  4812              LDR      r0,|L1.244|
0000ac  6800              LDR      r0,[r0,#0]  ; Length
0000ae  3840              SUBS     r0,r0,#0x40
0000b0  4910              LDR      r1,|L1.244|
0000b2  6008              STR      r0,[r1,#0]  ; Length
;;;108    
;;;109        CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
0000b4  4813              LDR      r0,|L1.260|
0000b6  6880              LDR      r0,[r0,#8]  ; CSW
0000b8  3840              SUBS     r0,r0,#0x40
0000ba  4912              LDR      r1,|L1.260|
0000bc  6088              STR      r0,[r1,#8]  ; CSW
;;;110        Led_RW_ON();
0000be  f7fffffe          BL       Led_RW_ON
                  |L1.194|
;;;111      }
;;;112      if (Length == 0)
0000c2  480c              LDR      r0,|L1.244|
0000c4  6800              LDR      r0,[r0,#0]  ; Length
0000c6  b970              CBNZ     r0,|L1.230|
;;;113      {
;;;114        Block_Read_count = 0;
0000c8  2000              MOVS     r0,#0
0000ca  490b              LDR      r1,|L1.248|
0000cc  6008              STR      r0,[r1,#0]  ; Block_Read_count
;;;115        Block_offset = 0;
0000ce  490c              LDR      r1,|L1.256|
0000d0  6008              STR      r0,[r1,#0]  ; Block_offset
;;;116        Offset = 0;
0000d2  4907              LDR      r1,|L1.240|
0000d4  6008              STR      r0,[r1,#0]  ; Offset
;;;117        Bot_State = BOT_DATA_IN_LAST;
0000d6  2003              MOVS     r0,#3
0000d8  490b              LDR      r1,|L1.264|
0000da  7008              STRB     r0,[r1,#0]
;;;118        TransferState = TXFR_IDLE;
0000dc  2000              MOVS     r0,#0
0000de  4902              LDR      r1,|L1.232|
0000e0  7008              STRB     r0,[r1,#0]
;;;119        Led_RW_OFF();
0000e2  f7fffffe          BL       Led_RW_OFF
                  |L1.230|
;;;120      }
;;;121    }
0000e6  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

                  |L1.232|
                          DCD      TransferState
                  |L1.236|
                          DCD      Mass_Block_Size
                  |L1.240|
                          DCD      Offset
                  |L1.244|
                          DCD      Length
                  |L1.248|
                          DCD      Block_Read_count
                  |L1.252|
                          DCD      Data_Buffer
                  |L1.256|
                          DCD      Block_offset
                  |L1.260|
                          DCD      ||CSW||
                  |L1.264|
                          DCD      Bot_State

                          AREA ||i.Write_Memory||, CODE, READONLY, ALIGN=2

                  Write_Memory PROC
;;;129    *******************************************************************************/
;;;130    void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;132    
;;;133      static uint32_t W_Offset, W_Length;
;;;134    
;;;135      uint32_t temp =  Counter + 64;
00000a  483e              LDR      r0,|L2.260|
00000c  6800              LDR      r0,[r0,#0]  ; Counter
00000e  f1000740          ADD      r7,r0,#0x40
;;;136    
;;;137      if (TransferState == TXFR_IDLE )
000012  483d              LDR      r0,|L2.264|
000014  7800              LDRB     r0,[r0,#0]  ; TransferState
000016  b970              CBNZ     r0,|L2.54|
;;;138      {
;;;139        W_Offset = Memory_Offset * Mass_Block_Size[lun];
000018  483c              LDR      r0,|L2.268|
00001a  f8500024          LDR      r0,[r0,r4,LSL #2]
00001e  4368              MULS     r0,r5,r0
000020  493b              LDR      r1,|L2.272|
000022  6008              STR      r0,[r1,#0]  ; W_Offset
;;;140        W_Length = Transfer_Length * Mass_Block_Size[lun];
000024  4839              LDR      r0,|L2.268|
000026  f8500024          LDR      r0,[r0,r4,LSL #2]
00002a  4370              MULS     r0,r6,r0
00002c  4939              LDR      r1,|L2.276|
00002e  6008              STR      r0,[r1,#0]  ; W_Length
;;;141        TransferState = TXFR_ONGOING;
000030  2001              MOVS     r0,#1
000032  4935              LDR      r1,|L2.264|
000034  7008              STRB     r0,[r1,#0]
                  |L2.54|
;;;142      }
;;;143    
;;;144      if (TransferState == TXFR_ONGOING )
000036  4834              LDR      r0,|L2.264|
000038  7800              LDRB     r0,[r0,#0]  ; TransferState
00003a  2801              CMP      r0,#1
00003c  d14e              BNE      |L2.220|
;;;145      {
;;;146    
;;;147        for (Idx = 0 ; Counter < temp; Counter++)
00003e  2000              MOVS     r0,#0
000040  4935              LDR      r1,|L2.280|
000042  6008              STR      r0,[r1,#0]  ; Idx
000044  e010              B        |L2.104|
                  |L2.70|
;;;148        {
;;;149          *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
000046  4834              LDR      r0,|L2.280|
000048  6801              LDR      r1,[r0,#0]  ; Idx
00004a  6800              LDR      r0,[r0,#0]  ; Idx
00004c  1c40              ADDS     r0,r0,#1
00004e  4a32              LDR      r2,|L2.280|
000050  6010              STR      r0,[r2,#0]  ; Idx
000052  4832              LDR      r0,|L2.284|
000054  5c41              LDRB     r1,[r0,r1]
000056  4832              LDR      r0,|L2.288|
000058  4a2a              LDR      r2,|L2.260|
00005a  6812              LDR      r2,[r2,#0]  ; Counter
00005c  5481              STRB     r1,[r0,r2]
00005e  4829              LDR      r0,|L2.260|
000060  6800              LDR      r0,[r0,#0]            ;147  ; Counter
000062  1c40              ADDS     r0,r0,#1              ;147
000064  4927              LDR      r1,|L2.260|
000066  6008              STR      r0,[r1,#0]            ;147  ; Counter
                  |L2.104|
000068  4826              LDR      r0,|L2.260|
00006a  6800              LDR      r0,[r0,#0]            ;147  ; Counter
00006c  42b8              CMP      r0,r7                 ;147
00006e  d3ea              BCC      |L2.70|
;;;150        }
;;;151    
;;;152        W_Offset += Data_Len;
000070  4827              LDR      r0,|L2.272|
000072  6800              LDR      r0,[r0,#0]  ; W_Offset
000074  492b              LDR      r1,|L2.292|
000076  8809              LDRH     r1,[r1,#0]  ; Data_Len
000078  4408              ADD      r0,r0,r1
00007a  4925              LDR      r1,|L2.272|
00007c  6008              STR      r0,[r1,#0]  ; W_Offset
;;;153        W_Length -= Data_Len;
00007e  4825              LDR      r0,|L2.276|
000080  6800              LDR      r0,[r0,#0]  ; W_Length
000082  4928              LDR      r1,|L2.292|
000084  8809              LDRH     r1,[r1,#0]  ; Data_Len
000086  1a40              SUBS     r0,r0,r1
000088  4922              LDR      r1,|L2.276|
00008a  6008              STR      r0,[r1,#0]  ; W_Length
;;;154    
;;;155        if (!(W_Length % Mass_Block_Size[lun]))
00008c  481f              LDR      r0,|L2.268|
00008e  f8500024          LDR      r0,[r0,r4,LSL #2]
000092  6809              LDR      r1,[r1,#0]  ; W_Length
000094  fbb1f2f0          UDIV     r2,r1,r0
000098  fb001012          MLS      r0,r0,r2,r1
00009c  b980              CBNZ     r0,|L2.192|
;;;156        {
;;;157          Counter = 0;
00009e  2000              MOVS     r0,#0
0000a0  4918              LDR      r1,|L2.260|
0000a2  6008              STR      r0,[r1,#0]  ; Counter
;;;158          MAL_Write(lun ,
0000a4  4819              LDR      r0,|L2.268|
0000a6  f8300024          LDRH     r0,[r0,r4,LSL #2]
0000aa  b283              UXTH     r3,r0
0000ac  4817              LDR      r0,|L2.268|
0000ae  f8500024          LDR      r0,[r0,r4,LSL #2]
0000b2  4a17              LDR      r2,|L2.272|
0000b4  6812              LDR      r2,[r2,#0]  ; W_Offset
0000b6  1a11              SUBS     r1,r2,r0
0000b8  4a19              LDR      r2,|L2.288|
0000ba  4620              MOV      r0,r4
0000bc  f7fffffe          BL       MAL_Write
                  |L2.192|
;;;159                    W_Offset - Mass_Block_Size[lun],
;;;160                    Data_Buffer,
;;;161                    Mass_Block_Size[lun]);
;;;162        }
;;;163    
;;;164        CSW.dDataResidue -= Data_Len;
0000c0  4819              LDR      r0,|L2.296|
0000c2  6880              LDR      r0,[r0,#8]  ; CSW
0000c4  4917              LDR      r1,|L2.292|
0000c6  8809              LDRH     r1,[r1,#0]  ; Data_Len
0000c8  1a40              SUBS     r0,r0,r1
0000ca  4917              LDR      r1,|L2.296|
0000cc  6088              STR      r0,[r1,#8]  ; CSW
;;;165        SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
0000ce  f44f5140          MOV      r1,#0x3000
0000d2  2002              MOVS     r0,#2
0000d4  f7fffffe          BL       SetEPRxStatus
;;;166        Led_RW_ON();
0000d8  f7fffffe          BL       Led_RW_ON
                  |L2.220|
;;;167      }
;;;168    
;;;169      if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
0000dc  480d              LDR      r0,|L2.276|
0000de  6800              LDR      r0,[r0,#0]  ; W_Length
0000e0  b118              CBZ      r0,|L2.234|
0000e2  4812              LDR      r0,|L2.300|
0000e4  7800              LDRB     r0,[r0,#0]  ; Bot_State
0000e6  2804              CMP      r0,#4
0000e8  d10a              BNE      |L2.256|
                  |L2.234|
;;;170      {
;;;171        Counter = 0;
0000ea  2000              MOVS     r0,#0
0000ec  4905              LDR      r1,|L2.260|
0000ee  6008              STR      r0,[r1,#0]  ; Counter
;;;172        Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
0000f0  2101              MOVS     r1,#1
0000f2  f7fffffe          BL       Set_CSW
;;;173        TransferState = TXFR_IDLE;
0000f6  2000              MOVS     r0,#0
0000f8  4903              LDR      r1,|L2.264|
0000fa  7008              STRB     r0,[r1,#0]
;;;174        Led_RW_OFF();
0000fc  f7fffffe          BL       Led_RW_OFF
                  |L2.256|
;;;175      }
;;;176    }
000100  e8bd81f0          POP      {r4-r8,pc}
;;;177    /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
                          ENDP

                  |L2.260|
                          DCD      Counter
                  |L2.264|
                          DCD      TransferState
                  |L2.268|
                          DCD      Mass_Block_Size
                  |L2.272|
                          DCD      W_Offset
                  |L2.276|
                          DCD      W_Length
                  |L2.280|
                          DCD      Idx
                  |L2.284|
                          DCD      Bulk_Data_Buff
                  |L2.288|
                          DCD      Data_Buffer
                  |L2.292|
                          DCD      Data_Len
                  |L2.296|
                          DCD      ||CSW||
                  |L2.300|
                          DCD      Bot_State

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Data_Buffer
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  Block_Read_count
                          DCD      0x00000000
                  Block_offset
                          DCD      0x00000000
                  Counter
                          DCD      0x00000000
                  Idx
                          DCD      0x00000000
                  TransferState
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  Offset
                          DCD      0x00000000
                  Length
                          DCD      0x00000000
                  W_Offset
                          DCD      0x00000000
                  W_Length
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\memory.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_memory_c_efd64b70____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____REVSH|
#line 144
|__asm___8_memory_c_efd64b70____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
