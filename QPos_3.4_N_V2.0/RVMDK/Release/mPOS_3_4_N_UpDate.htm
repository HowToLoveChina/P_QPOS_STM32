<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\RVMDK\Release\mPOS_3_4_N_UpDate.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\RVMDK\Release\mPOS_3_4_N_UpDate.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Thu Jul 09 15:02:21 2015
<BR><P>
<H3>Maximum Stack Usage =       4928 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; vVectorTable_CMD &rArr; vVectorTable_Card &rArr; iPayQPOCFlow &rArr; App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3ca]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[2f0]">phhalHw_Rc523_SetConfig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ef]">phhalHw_SetConfig</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">CustomHID_Data_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">CustomHID_GetConfigDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">CustomHID_GetDeviceDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[2c3]">CustomHID_GetHIDDescriptor</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[2c6]">CustomHID_GetProtocolValue</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[2c5]">CustomHID_GetReportDescriptor</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[10]">CustomHID_GetStringDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">CustomHID_Get_Interface_Setting</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">CustomHID_NoData_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">CustomHID_Reset</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[11]">CustomHID_SetConfiguration</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[12]">CustomHID_SetDeviceAddress</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">CustomHID_Status_In</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">CustomHID_Status_Out</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[7]">CustomHID_init</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">EP1_IN_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[6]">EP1_OUT_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[4]">EP2_IN_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">NOP_Process</a> from usb_core.o(.text) referenced 36 times from usb_istr.o(.data)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a5]">Standard_GetConfiguration</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[2a6]">Standard_GetInterface</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[2a4]">Standard_GetStatus</a> from usb_core.o(.text) referenced 3 times from usb_core.o(.text)
 <LI><a href="#[1c]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1f]">TAMPER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3e1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3e2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3e3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3e4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3e5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3e6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3e7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[3e8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3e9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3ea]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3eb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3ec]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[3ed]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3ee]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3ef]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[3f0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[3f1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3f2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3f3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3f4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3f5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[3f7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3f8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3f9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[67]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3fa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3fb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3fc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3fd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[3fe]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[3ff]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[400]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[401]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[63]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vVectorTable_CMD &rArr; vVectorTable_Card &rArr; iPayQPOCFlow &rArr; App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[402]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3cb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[66]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[403]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[68]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[39b]"></a>__asm___5_Rsa_c_ec1a91ae__dmult</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rsa.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdigitmult
</UL>

<P><STRONG><a name="[6a]"></a>Set_System</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_System &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[28c]"></a>Reset_Device</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
</UL>

<P><STRONG><a name="[7b]"></a>vHardwareInit</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = vHardwareInit &rArr; vFactory_Init &rArr; HID_CMD &rArr; IVT_Update &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRC523_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_7816_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_PowerON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_GPIO_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBUZZER_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOff
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928 + Unknown Stack Size
<LI>Call Chain = main &rArr; vVectorTable_CMD &rArr; vVectorTable_Card &rArr; iPayQPOCFlow &rArr; App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardFault_Handler &rArr; HAL_DISP_SET &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TAMPER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_TamperPinCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_GetITStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ClearITPendingBit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; eBluetooth_RecvAndAnalyze &rArr; iBluetooth_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_RecvAndAnalyze
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM1_UP_IRQHandler &rArr; Power_OFF &rArr; HAL_DISP_CLS &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_GetBluetoothState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPUart_Rev &rArr; HAL_GPUart_RevByte &rArr; HAL_GPUart_RevBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_Rev
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>vVectorTable_Device</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, vectortable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = vVectorTable_Device &rArr; vLCD_MainUI &rArr; vLCD_ShowTime &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowBluetoothIcon
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispalyPower
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_GetCellVoltageAndElectric
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_GetBluetoothState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>vVectorTable_Key</STRONG> (Thumb, 704 bytes, Stack size 24 bytes, vectortable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = vVectorTable_Key &rArr; iCMD0503_PToU_UploadPBOCData &rArr; iHexToASCIIEx
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWait
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowSelectMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowPassword
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowESC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_LinkDrop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTaskGetAndDisplayInputPin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_PToU_SendCardReaderStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLines
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[c1]"></a>vVectorTable_Card</STRONG> (Thumb, 1202 bytes, Stack size 8 bytes, vectortable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904 + Unknown Stack Size
<LI>Call Chain = vVectorTable_Card &rArr; iPayQPOCFlow &rArr; App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSCError
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeICCardOrChange
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Show_NFC_WaitForICC
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWaitForICC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWait
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowResTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowESC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_RetryICC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ReadICCFail
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearResTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_CardNoAndOK
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCriticalSection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearKeyBuf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iWaitForESCOrOK
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughMSC
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughICC
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayQPOCFlow
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMSCardIsICCard
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCII
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_InputPIN
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_PToU_SendCardReaderStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iAmountAddPoint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOn
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_CheckCard
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vClearCardData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCardState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[95]"></a>vVectorTable_CMD</STRONG> (Thumb, 772 bytes, Stack size 24 bytes, vectortable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928 + Unknown Stack Size
<LI>Call Chain = vVectorTable_CMD &rArr; vVectorTable_Card &rArr; iPayQPOCFlow &rArr; App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_FrameAnalyse
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD7700_UToP_Device_Boot
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0701_UToP_LCDShow
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0510_UToP_ClosedEMV
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0505_UToP_GetPBOC
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_UToP_StartPBOC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0502_UpdateAID
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0501_UpdateRSAPublicKey
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0405_UToP_GetPIN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_UToP_OpenKeyboard
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010A__GetDeviceParameter
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0108_UToP_GetRTC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0107_UToP_ResetDevice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0101_UToP_GetDeviceVersion
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_AnalyzeAndSend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>vVectorTableFactory_CMD</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, vectortable.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_AnalyzeAndSend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
</UL>

<P><STRONG><a name="[f8]"></a>vFactory_Test</STRONG> (Thumb, 834 bytes, Stack size 88 bytes, vectortable.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyWaitOK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyTest
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UI_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughMSC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_PowerCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Detect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPA
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_CLS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispalyPower
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_GetCellVoltageAndElectric
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SET
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRC523_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOff
</UL>

<P><STRONG><a name="[8a]"></a>vFactory_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, vectortable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = vFactory_Init &rArr; HID_CMD &rArr; IVT_Update &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_UART_CMD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[140]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_EXTILine_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_IVT_GPIO_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_GPIO_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_NIVC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_USART_NVIC_Config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EXTI_Init
</UL>

<P><STRONG><a name="[79]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[404]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25d]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[407]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[408]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[261]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[262]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[263]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[265]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_GetCellVoltageAndElectric
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_READDATA
</UL>

<P><STRONG><a name="[40a]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
</UL>

<P><STRONG><a name="[40d]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_GetCellVoltageAndElectric
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_READDATA
</UL>

<P><STRONG><a name="[40e]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_GetCellVoltageAndElectric
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_READDATA
</UL>

<P><STRONG><a name="[41d]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[420]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_IRQHandler
</UL>

<P><STRONG><a name="[421]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
</UL>

<P><STRONG><a name="[26b]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
</UL>

<P><STRONG><a name="[424]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_IRQHandler
</UL>

<P><STRONG><a name="[425]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_EXTILine_Config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EXTI_Init
</UL>

<P><STRONG><a name="[426]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[42a]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[139]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42b]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[10a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[10c]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Erase
</UL>

<P><STRONG><a name="[10d]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[10e]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[10f]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[111]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[110]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[112]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_WritePage
</UL>

<P><STRONG><a name="[113]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[114]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[115]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[116]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[117]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[42e]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[119]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[13c]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_GPIO_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBUZZER_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_IVT_GPIO_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_GPIO_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Data_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Strobe_Config
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_GPIO_config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_Scan
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_GPIO_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GPIO_Config
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_GPIO_Init_QY
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_DetectPinConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_GPIO_Config
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GPIO_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_GPIO_Config
</UL>

<P><STRONG><a name="[435]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Detect
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_GetBluetoothState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_DeepShutdown
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_RevBit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Check
</UL>

<P><STRONG><a name="[25a]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_Scan
</UL>

<P><STRONG><a name="[436]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[437]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_PowerCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SetBluetoothMode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_IVT_GPIO_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_GPIO_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Data_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Strobe_Config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_Scan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Block64Erase
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorUnprotect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_JEDEC_ID
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ChipErase
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalProtect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalUnprotect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_On_QY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_ResetLCD
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_GPIO_Init_QY
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_VoltageConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beep
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_SendByte
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Cmd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_GPIO_Config
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetMultiData
</UL>

<P><STRONG><a name="[155]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_PowerCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBUZZER_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SetBluetoothMode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_IVT_GPIO_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_GPIO_Config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Block64Erase
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorUnprotect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_JEDEC_ID
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ChipErase
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalProtect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalUnprotect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_On_QY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_ResetLCD
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_VoltageConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beep
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_SendByte
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Cmd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetMultiData
</UL>

<P><STRONG><a name="[1cc]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Reset
</UL>

<P><STRONG><a name="[438]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[43b]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBUZZER_Init
</UL>

<P><STRONG><a name="[15c]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_EXTILine_Config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EXTI_Init
</UL>

<P><STRONG><a name="[43c]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[440]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[26c]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[442]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[443]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[445]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[6c]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[76]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[6d]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[449]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[75]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[77]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[78]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[70]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[72]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[71]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[44b]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[73]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[26d]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[44c]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[26f]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[123]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[1ca]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_DetectPinConfig
</UL>

<P><STRONG><a name="[13b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBUZZER_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUartInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_IVT_GPIO_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_GPIO_Config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Data_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Strobe_Config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_GPIO_config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_GPIO_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GPIO_Config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_QY
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_GPIO_Init_QY
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_GPIO_Config
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GPIO_Init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_Config
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_GPIO_Config
</UL>

<P><STRONG><a name="[158]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_USART_Config
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[107]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[109]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[44d]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[11e]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[453]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[11f]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[120]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[454]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[271]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[455]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[292]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_QY
</UL>

<P><STRONG><a name="[211]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_QY
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_Config
</UL>

<P><STRONG><a name="[122]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[457]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_QY
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_Config
</UL>

<P><STRONG><a name="[459]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecvData_QY
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData_QY
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_SendByte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_ReadByte
</UL>

<P><STRONG><a name="[215]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecvData_QY
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData_QY
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_SendByte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_ReadByte
</UL>

<P><STRONG><a name="[45c]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GPIO_Config
</UL>

<P><STRONG><a name="[45d]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecvData_QY
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData_QY
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_SendByte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_ReadByte
</UL>

<P><STRONG><a name="[463]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[142]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[466]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[12b]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[129]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[127]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[125]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[12e]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[46a]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[46f]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[470]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[12f]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[131]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[133]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[132]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[134]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[474]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47e]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[482]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[483]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[487]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48d]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[495]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[497]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[498]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a0]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a2]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a6]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_UPDATE_USART_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_USART_Config
</UL>

<P><STRONG><a name="[136]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_UPDATE_USART_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_USART_Config
</UL>

<P><STRONG><a name="[4aa]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[4ab]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCriticalSection
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_UPDATE_USART_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_USART_Config
</UL>

<P><STRONG><a name="[9c]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCriticalSection
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_GETBTVersion
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Update_EEPROM
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_USART_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
</UL>

<P><STRONG><a name="[4ac]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ad]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4af]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4b0]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UART_SendData
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Transmit1
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ParityErrorHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_SendData
</UL>

<P><STRONG><a name="[162]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_USART_IRQHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZ8D256_RecvData
</UL>

<P><STRONG><a name="[4b1]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCC_Check_atr
</UL>

<P><STRONG><a name="[1cf]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[1d2]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[1d1]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[4b2]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ParityErrorHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
</UL>

<P><STRONG><a name="[159]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
</UL>

<P><STRONG><a name="[1c8]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_USART_IRQHandler
</UL>

<P><STRONG><a name="[4b7]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[4b8]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3ca]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[147]"></a>MSR_vArm</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mscard_pa1100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vClearCardData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vCardDataAcquisitionManager
</UL>

<P><STRONG><a name="[145]"></a>MSR_vReset</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSR_vReset &rArr; MSR_vGPIO_Data_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Data_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vClearCardData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vCardDataAcquisitionManager
</UL>

<P><STRONG><a name="[86]"></a>MSR_vInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSR_vInit &rArr; MSR_vReset &rArr; MSR_vGPIO_Data_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vReset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vArm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vTIM_NIVC
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Data_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vGPIO_Strobe_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[148]"></a>MSR_vClearCardPresent</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSR_vClearCardPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vCardDataAcquisitionManager
</UL>

<P><STRONG><a name="[149]"></a>MSR_vCardDataAcquisitionManager</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSR_vCardDataAcquisitionManager &rArr; MSR_vReset &rArr; MSR_vGPIO_Data_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vClearCardPresent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vReset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vArm
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>

<P><STRONG><a name="[4b9]"></a>MSR_vGetData</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, mscard_pa1100.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>MSR_vClearCardData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSR_vClearCardData &rArr; MSR_vReset &rArr; MSR_vGPIO_Data_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vReset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vArm
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>

<P><STRONG><a name="[14d]"></a>MSR_iGetData_CheckMagTek</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSR_iGetData_CheckMagTek
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>

<P><STRONG><a name="[152]"></a>MSR_vToASCII_Track2Or3</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mscard_pa1100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iGetCardNum
</UL>

<P><STRONG><a name="[14a]"></a>MSR_iAnalyzingData_Track1Or2Or3</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSR_iAnalyzingData_Track1Or2Or3 &rArr; MSR_iCheckData_OddAndLRC
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iCheckData_OddAndLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>

<P><STRONG><a name="[14e]"></a>MSR_iGetData_Track1</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSR_iGetData_Track1
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>

<P><STRONG><a name="[14f]"></a>MSR_iGetData_Track2Or3</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSR_iGetData_Track2Or3
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>

<P><STRONG><a name="[14c]"></a>MSR_iMSCardTask</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSR_iMSCardTask &rArr; MSR_iAnalyzingData_Track1Or2Or3 &rArr; MSR_iCheckData_OddAndLRC
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vClearCardData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iGetData_Track2Or3
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iGetData_Track1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iAnalyzingData_Track1Or2Or3
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iGetData_CheckMagTek
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vCardDataAcquisitionManager
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughMSC
</UL>

<P><STRONG><a name="[151]"></a>MSR_iGetCardNum</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSR_iGetCardNum
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vToASCII_Track2Or3
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughMSC
</UL>

<P><STRONG><a name="[154]"></a>vBluetooth_GPIO_Config</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[156]"></a>vBluetooth_IVT_GPIO_Config</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vBluetooth_IVT_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Init
</UL>

<P><STRONG><a name="[157]"></a>vBluetooth_USART_Config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vBluetooth_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[15b]"></a>vBluetooth_EXTILine_Config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vBluetooth_EXTILine_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Init
</UL>

<P><STRONG><a name="[15e]"></a>vBluetooth_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vBluetooth_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_LinkDrop
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[9f]"></a>eBluetooth_GetBluetoothState</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eBluetooth_GetBluetoothState
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowBluetoothIcon
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_LinkDrop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
</UL>

<P><STRONG><a name="[ba]"></a>vBluetooth_LinkDrop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vBluetooth_LinkDrop &rArr; eBluetooth_GetBluetoothState
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_GetBluetoothState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[15f]"></a>vBluetooth_UART_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vBluetooth_UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_GETBTVersion
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Update_EEPROM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
</UL>

<P><STRONG><a name="[161]"></a>iBluetooth_RecvData</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iBluetooth_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_RecvAndAnalyze
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_ExpectRec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_GETBTVersion
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Update_EEPROM
</UL>

<P><STRONG><a name="[163]"></a>vBluetooth_SetBluetoothMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vBluetooth_SetBluetoothMode
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[4ba]"></a>eBluetooth_GetBluetoothMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluetooth.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>vBluetooth_Force_BT_Into_WeakUp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
</UL>

<P><STRONG><a name="[85]"></a>vBluetooth_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vBluetooth_Init &rArr; vBluetooth_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_EXTILine_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_IVT_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[164]"></a>vBluetooth_SendData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vBluetooth_SendData &rArr; vBluetooth_UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Force_BT_Into_WeakUp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UART_SendData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Send3TimesForTimeout
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_ACKorNAK
</UL>

<P><STRONG><a name="[166]"></a>iBluetooth_Update_EEPROM</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Write_EEPROM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Read_EEPROM
</UL>

<P><STRONG><a name="[167]"></a>iBluetooth_Read_EEPROM</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Update_EEPROM
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[169]"></a>iBluetooth_Write_EEPROM</STRONG> (Thumb, 154 bytes, Stack size 328 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Update_EEPROM
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[fb]"></a>iBluetooth_ChangeBTName</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iBluetooth_ChangeBTName &rArr; vBluetooth_LinkDrop &rArr; eBluetooth_GetBluetoothState
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_LinkDrop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UART_SendData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DeviceSerialNO
</UL>

<P><STRONG><a name="[16a]"></a>iBluetooth_GETBTVersion</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iBluetooth_GETBTVersion &rArr; iBluetooth_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UART_SendData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
</UL>

<P><STRONG><a name="[9e]"></a>eBluetooth_RecvAndAnalyze</STRONG> (Thumb, 582 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eBluetooth_RecvAndAnalyze &rArr; iBluetooth_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i1ByteXOR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>iBluetooth_Send3TimesForTimeout</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iBluetooth_Send3TimesForTimeout &rArr; vBluetooth_SendData &rArr; vBluetooth_UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_AnalyzeAndSend
</UL>

<P><STRONG><a name="[f6]"></a>iBluetooth_AnalyzeAndSend</STRONG> (Thumb, 534 bytes, Stack size 1296 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = iBluetooth_AnalyzeAndSend &rArr; iBluetooth_Send3TimesForTimeout &rArr; vBluetooth_SendData &rArr; vBluetooth_UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i1ByteXOR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Send3TimesForTimeout
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTableFactory_CMD
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[fa]"></a>vBluetooth_UI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
</UL>

<P><STRONG><a name="[16e]"></a>IVT_UPDATE_USART_Config</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IVT_UPDATE_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[16f]"></a>IVT_ExpectRec</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IVT_ExpectRec &rArr; iBluetooth_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[172]"></a>ST_CheckSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[170]"></a>IVT_Update</STRONG> (Thumb, 974 bytes, Stack size 328 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = IVT_Update &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_CheckSum
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_ExpectRec
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_UPDATE_USART_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SetBluetoothMode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_RecvData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_UART_SendData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_USART_Config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD
</UL>

<P><STRONG><a name="[7c]"></a>Delay_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, systick_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[ae]"></a>Delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, systick_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_FrameAnalyse
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_Reset
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_GPIO_Config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_On_QY
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_OFF_QY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_ResetLCD
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_t1_IFSC_reader
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Check
</UL>

<P><STRONG><a name="[146]"></a>Delay_us</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, systick_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vClearCardPresent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vReset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Transmit1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beep
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_us
</UL>

<P><STRONG><a name="[7d]"></a>iBUZZER_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iBUZZER_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[174]"></a>buzzer_beep</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buzzer_beep
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>

<P><STRONG><a name="[150]"></a>iBuzzer_On</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iBuzzer_On &rArr; buzzer_beep
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beep
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSCError
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeICCardOrChange
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_RetryICC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ReadICCFail
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_CardNoAndOK
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughMSC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ScriptFail
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_InputPIN
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_TEST
</UL>

<P><STRONG><a name="[19a]"></a>uiCalcCrc16</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uiCalcCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z8D256_RecvString_XIEYI
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[d3]"></a>iHexToASCII</STRONG> (Thumb, 130 bytes, Stack size 280 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = iHexToASCII
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iAmountAddPoint
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PBOC_Simple_ReadCardNo
</UL>

<P><STRONG><a name="[175]"></a>iHexToASCIIEx</STRONG> (Thumb, 214 bytes, Stack size 536 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = iHexToASCIIEx
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData
</UL>

<P><STRONG><a name="[176]"></a>iASCIIToBCD</STRONG> (Thumb, 246 bytes, Stack size 280 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = iASCIIToBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iAmountASCIITo6ByteBCD
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillPinBlock
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetTradeTime
</UL>

<P><STRONG><a name="[179]"></a>i8ByteXOR</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i8ByteXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData9_9
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iUnionPay_Ansi919Mac
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData9_1_9
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillPinBlock
</UL>

<P><STRONG><a name="[16b]"></a>i1ByteXOR</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i1ByteXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_AnalyzeAndSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_RecvAndAnalyze
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_ACKorNAK
</UL>

<P><STRONG><a name="[184]"></a>iDataFillingWith</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iDataFillingWith
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillTrackData
</UL>

<P><STRONG><a name="[4bb]"></a>iDataFilling</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, roc_littletool.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>iFillPinBlock</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = iFillPinBlock &rArr; iASCIIToBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ByteXOR
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iASCIIToBCD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
</UL>

<P><STRONG><a name="[d9]"></a>iAmountAddPoint</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = iAmountAddPoint &rArr; iHexToASCII
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCII
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[17a]"></a>iAmountASCIITo6ByteBCD</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, roc_littletool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iASCIIToBCD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4bc]"></a>iFillBitMap</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, roc_littletool.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>iHexToBCD</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iHexToBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillTrackData
</UL>

<P><STRONG><a name="[17b]"></a>iFindTagData</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, roc_littletool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4bd]"></a>iCompareTimestamp</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, roc_littletool.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>iCalXOR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, roc_littletool.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>iEncryptMACData9_1_9</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, roc_littletool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesBykey
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ByteXOR
</UL>

<P><STRONG><a name="[17e]"></a>iUnionPay_Ansi919Mac</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iUnionPay_Ansi919Mac &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesBykey
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ByteXOR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
</UL>

<P><STRONG><a name="[180]"></a>iEncryptMACData9_9</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, roc_littletool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesBykey
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ByteXOR
</UL>

<P><STRONG><a name="[181]"></a>iEncryptMACData</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, roc_littletool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ByteXOR
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCIIEx
</UL>

<P><STRONG><a name="[182]"></a>iDiversify3Des</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iDiversify3Des &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptPinData
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByPIKIndex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
</UL>

<P><STRONG><a name="[183]"></a>iMPOS_EncryptMACData</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = iMPOS_EncryptMACData &rArr; iUnionPay_Ansi919Mac &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iUnionPay_Ansi919Mac
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ByteXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
</UL>

<P><STRONG><a name="[185]"></a>iTradeAmountIsNull</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, roc_littletool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = iTradeAmountIsNull
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_UToP_StartPBOC
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
</UL>

<P><STRONG><a name="[82]"></a>vLCD_PowerON</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_PowerON &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[ab]"></a>vLCD_ShowTime</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowTime &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
</UL>

<P><STRONG><a name="[92]"></a>vLCD_MainUI</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = vLCD_MainUI &rArr; vLCD_ShowTime &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearALL
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0107_UToP_ResetDevice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[da]"></a>vLCD_SwipeMSOrICCardOrInputCardNo</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = vLCD_SwipeMSOrICCardOrInputCardNo &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[c5]"></a>vLCD_SwipeICCardOrChange</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_SwipeICCardOrChange &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[c6]"></a>vLCD_SwipeMSCError</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_SwipeMSCError &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[dd]"></a>vLCD_CardNoAndOK</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = vLCD_CardNoAndOK &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[188]"></a>vLCD_InputPIN</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_InputPIN &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_InputPIN
</UL>

<P><STRONG><a name="[d7]"></a>vLCD_ShowTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowTimeout &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[c2]"></a>vLCD_ShowResTime</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowResTime &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iWaitForESCOrOK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTaskGetAndDisplayInputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetAndDisplayPin
</UL>

<P><STRONG><a name="[d6]"></a>vLCD_ClearResTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = vLCD_ClearResTime &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Show_NFC_WaitForICC
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWaitForICC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowESC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[b5]"></a>vLCD_ShowWait</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowWait &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[c9]"></a>vLCD_ShowWaitForICC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowWaitForICC &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearResTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[cf]"></a>vLCD_Show_NFC_WaitForICC</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_Show_NFC_WaitForICC &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearResTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[ca]"></a>vLCD_RetryICC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_RetryICC &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[d4]"></a>vLCD_ReadICCFail</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ReadICCFail &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[189]"></a>vLCD_ScriptFail</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, roc_personalfont.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
</UL>

<P><STRONG><a name="[b1]"></a>vLCD_ShowESC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowESC &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearResTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[18a]"></a>vLCD_ShowWaitForIssuersScript</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, roc_personalfont.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
</UL>

<P><STRONG><a name="[aa]"></a>vLCD_ShowBluetoothIcon</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vLCD_ShowBluetoothIcon &rArr; vLCD_Draw8X8 &rArr; vLCD_GUI_Update &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_GetBluetoothState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw8X8
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
</UL>

<P><STRONG><a name="[b6]"></a>vLCD_ShowMenu</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowMenu &rArr; vLCD_GUI_Show12X12_Col &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Col
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[b7]"></a>vLCD_ShowVersion</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowVersion &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_LinkDrop
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_GETBTVersion
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Col
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DeviceSerialNO
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_APPVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[b9]"></a>vLCD_ShowPassword</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowPassword &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[b8]"></a>vLCD_ShowSelectMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowSelectMode &rArr; vLCD_GUI_Show12X12_Col &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Col
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[18f]"></a>vLCD_ShowFirmwareUpdateBegin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowFirmwareUpdateBegin &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
</UL>

<P><STRONG><a name="[190]"></a>vLCD_ShowFirmwareUpdateProgress</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowFirmwareUpdateProgress &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
</UL>

<P><STRONG><a name="[191]"></a>vLCD_ShowFirmwareUpdateEnd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowFirmwareUpdateEnd &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
</UL>

<P><STRONG><a name="[192]"></a>vLCD_ShowFirmwareUpdateFail</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, roc_personalfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowFirmwareUpdateFail &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
</UL>

<P><STRONG><a name="[193]"></a>vZ8D256_GPIO_Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, z8d256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vZ8D256_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_Init
</UL>

<P><STRONG><a name="[194]"></a>vZ8D256_USART_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, z8d256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[195]"></a>vZ8D256_USART_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, z8d256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vZ8D256_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_Init
</UL>

<P><STRONG><a name="[83]"></a>vZ8D256_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, z8d256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vZ8D256_Init &rArr; vZ8D256_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_USART_Config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[196]"></a>vZ8D256_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, z8d256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vZ8D256_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[197]"></a>iZ8D256_RecvData</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, z8d256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z8D256_RecvString_XIEYI
</UL>

<P><STRONG><a name="[199]"></a>LittleToBig_short</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sercrity.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z8D256_RecvString_XIEYI
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[198]"></a>Z8D256_RecvString_XIEYI</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LittleToBig_short
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZ8D256_RecvData
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCalcCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
</UL>

<P><STRONG><a name="[1b3]"></a>LitteToBigStr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LitteToBigStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaDisEncrty
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEncrty
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePublickeyFile
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublicFile
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
</UL>

<P><STRONG><a name="[19d]"></a>readfromFlash</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[19e]"></a>WriteIntoFlash</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteIntoFlash &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[19f]"></a>EraseMF</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EraseMF &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[1a0]"></a>CreateMF</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CreateMF &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[1a1]"></a>createKeyFile</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = createKeyFile &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[1a2]"></a>loadMainkey</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = loadMainkey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[1a3]"></a>loadDESkey</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = loadDESkey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTrackkey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setApplykey
</UL>

<P><STRONG><a name="[1a4]"></a>changeDESkey</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanageApplykey
</UL>

<P><STRONG><a name="[1a5]"></a>createBinaryFile</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = createBinaryFile &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPrivateFile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPublicFile
</UL>

<P><STRONG><a name="[1a6]"></a>setDeviceInfo</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[1a7]"></a>setPSAMInfo</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setPSAMInfo &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[1a8]"></a>getDeviceInfo</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPSAMUID
</UL>

<P><STRONG><a name="[1a9]"></a>getPSAMInfo</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[1aa]"></a>setApplykey</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setApplykey &rArr; loadDESkey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDESkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
</UL>

<P><STRONG><a name="[1ab]"></a>chanageApplykey</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDESkey
</UL>

<P><STRONG><a name="[1ac]"></a>setTrackkey</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDESkey
</UL>

<P><STRONG><a name="[1ad]"></a>seleteBinaryFile</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = seleteBinaryFile &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePublickeyFile
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublicFile
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptPinData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptTrackData
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByPIKIndex
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByMAKIndex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
</UL>

<P><STRONG><a name="[1ae]"></a>updateBinaryFile</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = updateBinaryFile &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePublickeyFile
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
</UL>

<P><STRONG><a name="[1af]"></a>ReadBinaryFile</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadBinaryFile &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublicFile
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptPinData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptTrackData
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByPIKIndex
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByMAKIndex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
</UL>

<P><STRONG><a name="[1b0]"></a>createPublicFile</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = createPublicFile &rArr; createBinaryFile &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBinaryFile
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[1b1]"></a>createPrivateFile</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBinaryFile
</UL>

<P><STRONG><a name="[1b2]"></a>ReadPublicFile</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LitteToBigStr
</UL>

<P><STRONG><a name="[1b4]"></a>getPSAMUID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfo
</UL>

<P><STRONG><a name="[1b5]"></a>updatePublickeyFile</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LitteToBigStr
</UL>

<P><STRONG><a name="[1b6]"></a>genaryRsaKey</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[f9]"></a>GetChallenge</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetChallenge &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_GetProcessOn
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalRiskManagement
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternaAuthen
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[17d]"></a>SingleDesBykey</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SingleDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData9_9
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iUnionPay_Ansi919Mac
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData9_1_9
</UL>

<P><STRONG><a name="[17f]"></a>ThreeDesBykey</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptMACData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iUnionPay_Ansi919Mac
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptPinData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptTrackData
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByPIKIndex
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByMAKIndex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
</UL>

<P><STRONG><a name="[1b7]"></a>SingleDesEntryOrDisEntry</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToGetMAC
</UL>

<P><STRONG><a name="[1b8]"></a>threeDesEntryOrDisEntry</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternaAuthen
</UL>

<P><STRONG><a name="[1b9]"></a>ExternaAuthen</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeDesEntryOrDisEntry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[1bb]"></a>XORArigth</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToGetMAC
</UL>

<P><STRONG><a name="[1ba]"></a>ToGetMAC</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XORArigth
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesEntryOrDisEntry
</UL>

<P><STRONG><a name="[1bc]"></a>RsaEncrty</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LitteToBigStr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[1bd]"></a>RsaDisEncrty</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LitteToBigStr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[1be]"></a>TobootZ8</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sercrity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>

<P><STRONG><a name="[1bf]"></a>SHA1Arigth</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SHA1Arigth &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamRecvAnswer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psamSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynamicDataVeryfy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardPublicKey
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticDataVeryfy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIssuerPublicKey
</UL>

<P><STRONG><a name="[4bf]"></a>sercrityTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sercrity.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>QPOSFileStruct</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QPOSFileStruct &rArr; setApplykey &rArr; loadDESkey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setApplykey
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPSAMInfo
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadMainkey
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMF
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntoFlash
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[88]"></a>IROM_Read</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, irom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0502_UpdateAID
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0101_UToP_GetDeviceVersion
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
</UL>

<P><STRONG><a name="[1c1]"></a>IROM_WritePage</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, irom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Erase
</UL>

<P><STRONG><a name="[bf]"></a>IROM_Write</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, irom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_WritePage
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD7700_UToP_Device_Boot
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0502_UpdateAID
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTableFactory_CMD
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Parameters
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteRIDandPKI
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteRID
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteALL
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_ADD
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_ADD
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_DeleteAID
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_DeleteALL
</UL>

<P><STRONG><a name="[1c2]"></a>IROM_Erase</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, irom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_WritePage
</UL>

<P><STRONG><a name="[1c3]"></a>SCC_Check_atr</STRONG> (Thumb, 1008 bytes, Stack size 80 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCC_Check_atr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
</UL>

<P><STRONG><a name="[101]"></a>SC_Detect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_DeepShutdown
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ByteReceive
</UL>

<P><STRONG><a name="[1c5]"></a>USART_ByteReceive</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ByteReceive &rArr; SC_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Transmit1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
</UL>

<P><STRONG><a name="[1c6]"></a>SC_ParityErrorHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_USART_IRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>SC_USART_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ParityErrorHandler
</UL>

<P><STRONG><a name="[1c9]"></a>SC_DetectPinConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SC_DetectPinConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[1cb]"></a>SC_Reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[100]"></a>SC_PowerCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC_PowerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_DeepShutdown
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_7816_Init</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_7816_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_PowerCmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Reset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_DetectPinConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_VoltageConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_7816_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_7816_PowerOn</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_7816_PowerOn &rArr; SCC_Check_atr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_PowerCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Detect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ByteReceive
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCC_Check_atr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_7816_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_GetATR
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AU9541_ICCARD_Reset
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_Card_APDU</STRONG> (Thumb, 364 bytes, Stack size 544 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SendData0
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADFforLogEntry
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_GetProcessOn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectDDF
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUpLimitPrice
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCash
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalRiskManagement
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ReadAppData
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
</UL>

<P><STRONG><a name="[1d7]"></a>AU9541_ICCARD_Reset</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
</UL>

<P><STRONG><a name="[1dc]"></a>send_T0wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_S
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_7816_LRC8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_t1_IFSC_reader
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Transmit1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_I
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_S
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_R
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_ReBuild_R
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_7816_T1_ReBuild_R</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_LRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
</UL>

<P><STRONG><a name="[1da]"></a>HAL_7816_T1_Build_R</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_LRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
</UL>

<P><STRONG><a name="[1db]"></a>HAL_7816_T1_Build_S</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_LRC8
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_T0wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_7816_T1_Build_I</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_LRC8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
</UL>

<P><STRONG><a name="[1de]"></a>HAL_7816_Transmit1</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_LRC8
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ByteReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_t1_IFSC_reader
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
</UL>

<P><STRONG><a name="[1df]"></a>HAL_Card_T1</STRONG> (Thumb, 858 bytes, Stack size 896 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Transmit1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_I
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_S
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_R
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_ReBuild_R
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_7816_t1_IFSC_reader</STRONG> (Thumb, 304 bytes, Stack size 288 bytes, hal_7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Transmit1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_LRC8
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_7816_DeepShutdown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_7816_DeepShutdown &rArr; SC_PowerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_PowerCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Detect
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_7816_GetATR</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_7816_GetATR &rArr; HAL_7816_PowerOn &rArr; SCC_Check_atr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCardState
</UL>

<P><STRONG><a name="[87]"></a>vPBOC_7816_Init</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = vPBOC_7816_Init &rArr; HAL_7816_PowerOn &rArr; SCC_Check_atr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_PowerOn
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[1e3]"></a>APP_POS_PAY_Init</STRONG> (Thumb, 800 bytes, Stack size 16 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = APP_POS_PAY_Init &rArr; MID_NVMEM_Write &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitDDFStack
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ClearCandidateList
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_7816_Init
</UL>

<P><STRONG><a name="[1e9]"></a>Clear_Cardlist</STRONG> (Thumb, 1070 bytes, Stack size 8 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_Cardlist
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_UpLimitLoadPrice
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDGetCashBalance
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Init
</UL>

<P><STRONG><a name="[1ea]"></a>APP_POS_PAY_CDGetCashBalance</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, app_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCash
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cardlist
</UL>

<P><STRONG><a name="[1ef]"></a>APP_PBOC_Simple_ReadCardNo</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = APP_PBOC_Simple_ReadCardNo &rArr; EMV_AppInitialization &rArr; EMV_BuildCLbyPSE &rArr; EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCII
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ReadAppData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
</UL>

<P><STRONG><a name="[1f2]"></a>APP_POS_PAY_UpLimitLoadPrice</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, app_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUpLimitPrice
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cardlist
</UL>

<P><STRONG><a name="[1f4]"></a>APP_POS_PAY_CardIssuers_Script</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = APP_POS_PAY_CardIssuers_Script &rArr; EMV_OnlineProcessing &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
</UL>

<P><STRONG><a name="[1f6]"></a>APP_POS_PAY_55CardUpload_DataPackage</STRONG> (Thumb, 1062 bytes, Stack size 16 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = APP_POS_PAY_55CardUpload_DataPackage &rArr; EMV_AppInitialization &rArr; EMV_BuildCLbyPSE &rArr; EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalRiskManagement
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ReadAppData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ProcessingRestriction
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_CardholderVerification
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cardlist
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughICC
</UL>

<P><STRONG><a name="[1fb]"></a>APP_POS_PAY_No55CardUpload_DataPackage</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_POS_PAY_No55CardUpload_DataPackage &rArr; MID_NVMEM_Write &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
</UL>

<P><STRONG><a name="[1fc]"></a>APP_POS_PAY_CDReversalInfo</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, app_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
</UL>

<P><STRONG><a name="[c8]"></a>CheckCardState</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, app_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CheckCardState &rArr; HAL_7816_GetATR &rArr; HAL_7816_PowerOn &rArr; SCC_Check_atr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_GetATR
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[1fd]"></a>TIM_Configuration</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mid_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[1e7]"></a>MID_NVMEM_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MID_NVMEM_Read &rArr; IROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDReversalInfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_No55CardUpload_DataPackage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_Init
</UL>

<P><STRONG><a name="[1e8]"></a>MID_NVMEM_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MID_NVMEM_Write &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDReversalInfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_No55CardUpload_DataPackage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_Init
</UL>

<P><STRONG><a name="[1ff]"></a>IsTagExist</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mid_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[200]"></a>SearchTagType</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SearchTagType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
</UL>

<P><STRONG><a name="[201]"></a>SearchTag</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SearchTag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADFforLogEntry
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_GetProcessOn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectDDF
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCardDo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUpLimitPrice
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCash
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalRiskManagement
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ReadAppData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ProcessingRestriction
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_CardholderVerification
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_ADD
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_ADD
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_ReadData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_GPO
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectADF
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectPPSE
</UL>

<P><STRONG><a name="[202]"></a>SearchTagforScript</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SearchTagforScript &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_UToP_StartPBOC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0502_UpdateAID
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
</UL>

<P><STRONG><a name="[203]"></a>CollectDol</STRONG> (Thumb, 1316 bytes, Stack size 64 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CollectDol &rArr; SearchTag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagType
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_GPO
</UL>

<P><STRONG><a name="[204]"></a>SaveCardDo</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SaveCardDo &rArr; SearchTag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ReadAppData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_ReadData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_GPO
</UL>

<P><STRONG><a name="[20a]"></a>EMV_Show_Candidate_List</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mid_pboc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
</UL>

<P><STRONG><a name="[205]"></a>EMV_SelectADF</STRONG> (Thumb, 1806 bytes, Stack size 64 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = EMV_SelectADF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
</UL>

<P><STRONG><a name="[206]"></a>EMV_SelectDDF</STRONG> (Thumb, 966 bytes, Stack size 48 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
</UL>

<P><STRONG><a name="[207]"></a>EMV_GetProcessOn</STRONG> (Thumb, 1144 bytes, Stack size 40 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = EMV_GetProcessOn &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
</UL>

<P><STRONG><a name="[208]"></a>EMV_RemoveACandidate</STRONG> (Thumb, 920 bytes, Stack size 24 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EMV_RemoveACandidate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
</UL>

<P><STRONG><a name="[209]"></a>EMV_SortCandidateList</STRONG> (Thumb, 910 bytes, Stack size 80 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EMV_SortCandidateList
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
</UL>

<P><STRONG><a name="[1ed]"></a>EMV_FinalSelection</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = EMV_FinalSelection &rArr; EMV_SelectADF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SortCandidateList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_RemoveACandidate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_Show_Candidate_List
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_UpLimitLoadPrice
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDGetCashBalance
</UL>

<P><STRONG><a name="[1e6]"></a>EMV_ClearCandidateList</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EMV_ClearCandidateList
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_Init
</UL>

<P><STRONG><a name="[1ec]"></a>EMV_BuildCLbyAID</STRONG> (Thumb, 1020 bytes, Stack size 24 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = EMV_BuildCLbyAID &rArr; EMV_SelectADF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ClearCandidateList
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_UpLimitLoadPrice
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDGetCashBalance
</UL>

<P><STRONG><a name="[20b]"></a>EMV_SearchAID</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EMV_SearchAID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
</UL>

<P><STRONG><a name="[1eb]"></a>EMV_BuildCLbyPSE</STRONG> (Thumb, 1574 bytes, Stack size 120 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = EMV_BuildCLbyPSE &rArr; EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SearchAID
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectDDF
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ClearCandidateList
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_UpLimitLoadPrice
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDGetCashBalance
</UL>

<P><STRONG><a name="[1e5]"></a>EMV_InitAIDList</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EMV_InitAIDList &rArr; SearchTagforScript &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagforScript
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_UpLimitLoadPrice
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDGetCashBalance
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_Init
</UL>

<P><STRONG><a name="[1f0]"></a>EMV_AppInitialization</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = EMV_AppInitialization &rArr; EMV_BuildCLbyPSE &rArr; EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_GetProcessOn
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PBOC_Simple_ReadCardNo
</UL>

<P><STRONG><a name="[1e4]"></a>EMV_InitDDFStack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMV_InitDDFStack
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_Init
</UL>

<P><STRONG><a name="[1f1]"></a>EMV_ReadAppData</STRONG> (Thumb, 724 bytes, Stack size 56 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = EMV_ReadAppData &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCardDo
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PBOC_Simple_ReadCardNo
</UL>

<P><STRONG><a name="[1f7]"></a>EMV_ProcessingRestriction</STRONG> (Thumb, 1298 bytes, Stack size 16 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMV_ProcessingRestriction &rArr; SearchTag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[1f8]"></a>EMV_CardholderVerification</STRONG> (Thumb, 4796 bytes, Stack size 32 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EMV_CardholderVerification &rArr; SearchTag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[4c0]"></a>EMV_OnlineEncryptedPinProcessing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mid_pboc.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>EMV_TerminalRiskManagement</STRONG> (Thumb, 988 bytes, Stack size 24 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = EMV_TerminalRiskManagement &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[1fa]"></a>EMV_TerminalActionAnalysis</STRONG> (Thumb, 3652 bytes, Stack size 48 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = EMV_TerminalActionAnalysis &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[1f5]"></a>EMV_OnlineProcessing</STRONG> (Thumb, 5346 bytes, Stack size 336 bytes, mid_pboc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = EMV_OnlineProcessing &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagforScript
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_NVMEM_Write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CardIssuers_Script
</UL>

<P><STRONG><a name="[20c]"></a>EMV_SelectADFforLogEntry</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, mid_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[1ee]"></a>GetCash</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, mid_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CDGetCashBalance
</UL>

<P><STRONG><a name="[1f3]"></a>ReadUpLimitPrice</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mid_pboc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_UpLimitLoadPrice
</UL>

<P><STRONG><a name="[4c1]"></a>APDU_BuffFormat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pboc_var.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>T_APDU_BuffFormat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pboc_var.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>GVAR_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pboc_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GVAR_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_Init
</UL>

<P><STRONG><a name="[c7]"></a>vPBOC_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pboc_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPBOC_Init &rArr; GVAR_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GVAR_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_DeepShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_UToP_StartPBOC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[20e]"></a>ST7567_GPIO_Init_QY</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7567_GPIO_Init_QY &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[20f]"></a>SPI_Init_QY</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Init_QY &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[81]"></a>BackLightCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BackLightCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[212]"></a>SPI_SendData_QY</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SendData_QY
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>

<P><STRONG><a name="[216]"></a>SPI_RecvData_QY</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>

<P><STRONG><a name="[217]"></a>HAL_DISP_WriteByte</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData_QY
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLines
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SET
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Update
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_DrawLCD
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_On_QY
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_OFF_QY
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_OUT_Power_Save_QY
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Into_Power_Save_QY
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearALLPage
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[218]"></a>HAL_DISP_WriteString</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowHZ24X24
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowHZ16X16
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar24X8
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar24X12
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_Show8X20
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_Show8X8
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar16X8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar16X6
</UL>

<P><STRONG><a name="[219]"></a>HAL_DISP_SetXY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLines
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SET
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Update
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_DrawLCD
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowHZ24X24
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowHZ16X16
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar24X8
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar24X12
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_Show8X20
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_Show8X8
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar16X8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar16X6
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearALLPage
</UL>

<P><STRONG><a name="[fd]"></a>HAL_DISP_CLS</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DISP_CLS &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_PowerON
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_DISP_SET</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DISP_SET &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[21a]"></a>ClearALLPage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>

<P><STRONG><a name="[bd]"></a>ClearLines</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ClearLines &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[21b]"></a>HAL_DISP_ResetLCD</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[21c]"></a>ST7567_Into_Power_Save_QY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>

<P><STRONG><a name="[21d]"></a>ST7567_OUT_Power_Save_QY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>

<P><STRONG><a name="[21e]"></a>ST7567_Power_OFF_QY</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>

<P><STRONG><a name="[21f]"></a>ST7567_Power_On_QY</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7567_Power_On_QY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[220]"></a>MID_DISP_ShowChar16X6</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[221]"></a>MID_DISP_ShowChar16X8</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowCharStr6
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowCharStr
</UL>

<P><STRONG><a name="[222]"></a>MID_DISP_Show8X8</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[223]"></a>MID_DISP_Show8X20</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[224]"></a>MID_DISP_ShowChar24X12</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[225]"></a>MID_DISP_ShowCharStr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar16X8
</UL>

<P><STRONG><a name="[226]"></a>MID_DISP_ShowCharStr6</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowChar16X8
</UL>

<P><STRONG><a name="[227]"></a>MID_DISP_ShowChar24X8</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[228]"></a>MID_DISP_ShowHZ16X16</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowHZStr
</UL>

<P><STRONG><a name="[229]"></a>MID_DISP_ShowHZ24X24</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteString
</UL>

<P><STRONG><a name="[22a]"></a>MID_DISP_ShowHZStr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_DISP_ShowHZ16X16
</UL>

<P><STRONG><a name="[ad]"></a>DispalyPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DispalyPower &rArr; vLCD_Draw20X8 &rArr; vLCD_GUI_Update &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw20X8
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
</UL>

<P><STRONG><a name="[4c3]"></a>BuleToothState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, display.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>PowerCurrentState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, display.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>PowerChangeState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, display.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>Display_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Display_Init &rArr; HAL_DISP_CLS &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_CLS
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_Power_On_QY
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_QY
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7567_GPIO_Init_QY
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[22e]"></a>trans_hz8</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fontfonction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trans_hz8
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanzi_mu
</UL>

<P><STRONG><a name="[22f]"></a>trans_hz4</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fontfonction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trans_hz4
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanzi_mu
</UL>

<P><STRONG><a name="[22c]"></a>get_hanzi_mu</STRONG> (Thumb, 486 bytes, Stack size 136 bytes, fontfonction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hz4
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hz8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
</UL>

<P><STRONG><a name="[230]"></a>MSD_GPIO_Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>

<P><STRONG><a name="[232]"></a>MSD_SPI_Config</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[233]"></a>MSD_ReadByte</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSD_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_JEDEC_ID
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetResponse
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetDataResponse
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetStatus
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
</UL>

<P><STRONG><a name="[234]"></a>MSD_WriteByte</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Block64Erase
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorUnprotect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_JEDEC_ID
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SendCmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ChipErase
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalProtect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalUnprotect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
</UL>

<P><STRONG><a name="[235]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_ReadID &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GoIdleState
</UL>

<P><STRONG><a name="[80]"></a>MSD_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSD_Init &rArr; MSD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[236]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Block64Erase
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorUnprotect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ChipErase
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalProtect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalUnprotect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
</UL>

<P><STRONG><a name="[237]"></a>SPI_FLASH_WaitForWriteEnable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WaitForWriteEnable &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
</UL>

<P><STRONG><a name="[238]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_WaitForWriteEnable &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Block64Erase
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorUnprotect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ChipErase
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalProtect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalUnprotect
</UL>

<P><STRONG><a name="[239]"></a>MSD_GetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalProtect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GlobalUnprotect
</UL>

<P><STRONG><a name="[23a]"></a>SPI_FLASH_GlobalUnprotect</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>

<P><STRONG><a name="[23b]"></a>SPI_FLASH_GlobalProtect</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>

<P><STRONG><a name="[23c]"></a>SPI_FLASH_ChipErase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>

<P><STRONG><a name="[242]"></a>Buffercmp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBlock
</UL>

<P><STRONG><a name="[23d]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_WaitForWriteEnable &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[23e]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_WaitForWriteEnable &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBlock
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
</UL>

<P><STRONG><a name="[23f]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBlock
</UL>

<P><STRONG><a name="[22d]"></a>MSD_ReadBlock</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBuffer
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanzi_mu
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
</UL>

<P><STRONG><a name="[240]"></a>MSD_ReadBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBlock
</UL>

<P><STRONG><a name="[241]"></a>MSD_WriteBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBuffer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffercmp
</UL>

<P><STRONG><a name="[243]"></a>MSD_GetDataResponse</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
</UL>

<P><STRONG><a name="[244]"></a>MSD_GetResponse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
</UL>

<P><STRONG><a name="[245]"></a>MSD_SendCmd</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
</UL>

<P><STRONG><a name="[246]"></a>MSD_WriteBuffer</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SendCmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetResponse
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetDataResponse
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>

<P><STRONG><a name="[247]"></a>MSD_GoIdleState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>

<P><STRONG><a name="[248]"></a>SPI_Config</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[249]"></a>SPI_FLASH_JEDEC_ID</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadByte
</UL>

<P><STRONG><a name="[24a]"></a>SPI_FLASH_SectorUnprotect</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>

<P><STRONG><a name="[24b]"></a>SPI_FLASH_Block64Erase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_Block64Erase &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_WaitForWriteEnable &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
</UL>

<P><STRONG><a name="[24c]"></a>vLCD_GUI_DrawLCD</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vLCD_GUI_DrawLCD &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearALL
</UL>

<P><STRONG><a name="[24d]"></a>vLCD_GUI_Update</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vLCD_GUI_Update &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_SetXY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw20X8
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw8X8
</UL>

<P><STRONG><a name="[24f]"></a>vLCD_DrawDot</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vLCD_DrawDot
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Set
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Clear
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawHalfCol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLVD_DrawOneCol
</UL>

<P><STRONG><a name="[24e]"></a>vLVD_DrawOneCol</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vLVD_DrawOneCol &rArr; vLCD_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawDot
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw6X12
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw12X12
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw20X8
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw8X8
</UL>

<P><STRONG><a name="[250]"></a>vLCD_DrawHalfCol</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vLCD_DrawHalfCol &rArr; vLCD_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawDot
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw6X12
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw12X12
</UL>

<P><STRONG><a name="[251]"></a>vLCD_Draw12X12</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vLCD_Draw12X12 &rArr; vLCD_DrawHalfCol &rArr; vLCD_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawHalfCol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLVD_DrawOneCol
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
</UL>

<P><STRONG><a name="[252]"></a>vLCD_Draw6X12</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vLCD_Draw6X12 &rArr; vLCD_DrawHalfCol &rArr; vLCD_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawHalfCol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLVD_DrawOneCol
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
</UL>

<P><STRONG><a name="[22b]"></a>vLCD_Draw20X8</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vLCD_Draw20X8 &rArr; vLCD_GUI_Update &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLVD_DrawOneCol
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispalyPower
</UL>

<P><STRONG><a name="[18b]"></a>vLCD_Draw8X8</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vLCD_Draw8X8 &rArr; vLCD_GUI_Update &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLVD_DrawOneCol
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowBluetoothIcon
</UL>

<P><STRONG><a name="[253]"></a>vLCD_Clear</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vLCD_Clear &rArr; vLCD_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawDot
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearALL
</UL>

<P><STRONG><a name="[a8]"></a>vLCD_ClearWorkPlace2345</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vLCD_ClearWorkPlace2345 &rArr; vLCD_GUI_DrawLCD &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Clear
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_DrawLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowSelectMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowPassword
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowESC
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0701_UToP_LCDShow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateFail
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateEnd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateBegin
</UL>

<P><STRONG><a name="[ff]"></a>vLCD_ClearWorkPage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vLCD_ClearWorkPage &rArr; vLCD_GUI_Update &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Clear
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSCError
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeICCardOrChange
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Show_NFC_WaitForICC
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWaitForICC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWait
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_RetryICC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ReadICCFail
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_CardNoAndOK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTaskGetAndDisplayInputPin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWaitForIssuersScript
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ScriptFail
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_InputPIN
</UL>

<P><STRONG><a name="[187]"></a>vLCD_ClearALL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vLCD_ClearALL &rArr; vLCD_GUI_DrawLCD &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Clear
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_DrawLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
</UL>

<P><STRONG><a name="[254]"></a>vLCD_Set</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_DrawDot
</UL>

<P><STRONG><a name="[255]"></a>vLCD_ShowString</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw6X12
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Draw12X12
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Update
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanzi_mu
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Col
</UL>

<P><STRONG><a name="[a9]"></a>vLCD_GUI_ShowMid12X12</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSCError
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeICCardOrChange
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_Show_NFC_WaitForICC
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWaitForICC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWait
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTime
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowPassword
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowESC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_RetryICC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ReadICCFail
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_CardNoAndOK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTaskGetAndDisplayInputPin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_UART_CMD
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_PowerON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateFail
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateEnd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateBegin
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowWaitForIssuersScript
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ScriptFail
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_InputPIN
</UL>

<P><STRONG><a name="[bc]"></a>vLCD_GUI_Show12X12_Ex</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowResTime
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearResTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_CardNoAndOK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyTest
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTaskGetAndDisplayInputPin
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0701_UToP_LCDShow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateProgress
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_InputPIN
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDisplayPinOnLCD
</UL>

<P><STRONG><a name="[18c]"></a>vLCD_GUI_Show12X12_Col</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = vLCD_GUI_Show12X12_Col &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowString
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowSelectMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowMenu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyTest
</UL>

<P><STRONG><a name="[257]"></a>key_delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_Scan
</UL>

<P><STRONG><a name="[258]"></a>vKey_GPIO_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[259]"></a>vKey_Scan</STRONG> (Thumb, 642 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vKey_Scan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
</UL>

<P><STRONG><a name="[b0]"></a>ucKey_Scan</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ucKey_Scan &rArr; vKey_Scan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKey_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyWaitOK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyTest
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iWaitForESCOrOK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTaskGetAndDisplayInputPin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetAndDisplayPin
</UL>

<P><STRONG><a name="[dc]"></a>vClearKeyBuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_InputPIN
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[fc]"></a>vKeyWaitOK</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
</UL>

<P><STRONG><a name="[fe]"></a>vKeyTest</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Col
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
</UL>

<P><STRONG><a name="[4c6]"></a>vKey_Processing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>AN_ADC_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, an_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AN_ADC_Init &rArr; AN_ADC1_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_Config
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC1_GPIO_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[264]"></a>AN_ADC_READDATA</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, an_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>

<P><STRONG><a name="[ac]"></a>AN_ADC_GetCellVoltageAndElectric</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, an_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AN_ADC_GetCellVoltageAndElectric
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
</UL>

<P><STRONG><a name="[268]"></a>mPOS_ACKorNAK</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mPOS_ACKorNAK &rArr; vBluetooth_SendData &rArr; vBluetooth_UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i1ByteXOR
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBluetooth_SendData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_FrameAnalyse
</UL>

<P><STRONG><a name="[df]"></a>mPOS_FrameAnalyse</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mPOS_FrameAnalyse &rArr; mPOS_ACKorNAK &rArr; vBluetooth_SendData &rArr; vBluetooth_UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_ACKorNAK
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[269]"></a>vGetTradeTime</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = vGetTradeTime &rArr; iASCIIToBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iASCIIToBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
</UL>

<P><STRONG><a name="[d0]"></a>vCriticalSection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vCriticalSection &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[c3]"></a>iPayThroughMSC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = iPayThroughMSC &rArr; MSR_iMSCardTask &rArr; MSR_iAnalyzingData_Track1Or2Or3 &rArr; MSR_iCheckData_OddAndLRC
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iGetCardNum
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iMSCardTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[c4]"></a>iMSCardIsICCard</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iMSCardIsICCard
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[d1]"></a>iPayThroughICC</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = iPayThroughICC &rArr; APP_POS_PAY_55CardUpload_DataPackage &rArr; EMV_AppInitialization &rArr; EMV_BuildCLbyPSE &rArr; EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_55CardUpload_DataPackage
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[d2]"></a>iPayQPOCFlow</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896 + Unknown Stack Size
<LI>Call Chain = iPayQPOCFlow &rArr; App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[e0]"></a>iCMD7700_UToP_Device_Boot</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iCMD7700_UToP_Device_Boot &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[e1]"></a>iCMD0101_UToP_GetDeviceVersion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iCMD0101_UToP_GetDeviceVersion &rArr; IROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[e2]"></a>iCMD0107_UToP_ResetDevice</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = iCMD0107_UToP_ResetDevice &rArr; vLCD_MainUI &rArr; vLCD_ShowTime &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[e3]"></a>iCMD0108_UToP_GetRTC</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = iCMD0108_UToP_GetRTC &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[e4]"></a>iCMD0109_UToP_SetRTC</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = iCMD0109_UToP_SetRTC &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[e5]"></a>iCMD010A__GetDeviceParameter</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iCMD010A__GetDeviceParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[4c7]"></a>iCMD010B_PToU_SendPrintStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, up_mpos_cmd.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>iRecv_CMD010C_Firmware</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = iRecv_CMD010C_Firmware &rArr; DES3_App &rArr; des3_set2key_dec &rArr; des3_set2key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
</UL>

<P><STRONG><a name="[e6]"></a>iCMD010C_UToP_UpdateDeviceFirmware</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = iCMD010C_UToP_UpdateDeviceFirmware &rArr; iRecv_CMD010C_Firmware &rArr; DES3_App &rArr; des3_set2key_dec &rArr; des3_set2key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Block64Erase
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateFail
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateEnd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateProgress
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowFirmwareUpdateBegin
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[e7]"></a>iCMD0202_UToP_UpdateDeviceWorkKey</STRONG> (Thumb, 500 bytes, Stack size 112 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = iCMD0202_UToP_UpdateDeviceWorkKey &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPublicFile
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[276]"></a>iEncryptDataByTDKIndex</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = iEncryptDataByTDKIndex &rArr; iDiversify3Des &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
</UL>

<P><STRONG><a name="[277]"></a>iEncryptDataByMAKIndex</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, up_mpos_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
</UL>

<P><STRONG><a name="[278]"></a>iEncryptDataByPIKIndex</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = iEncryptDataByPIKIndex &rArr; iDiversify3Des &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
</UL>

<P><STRONG><a name="[e8]"></a>iCMD0204_UToP_VerifyMAC</STRONG> (Thumb, 262 bytes, Stack size 1304 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = iCMD0204_UToP_VerifyMAC &rArr; iMPOS_EncryptMACData &rArr; iUnionPay_Ansi919Mac &rArr; ThreeDesBykey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[de]"></a>iWaitForESCOrOK</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = iWaitForESCOrOK &rArr; vLCD_ShowResTime &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowResTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[e9]"></a>iCMD0207_UToP_EncriptData</STRONG> (Thumb, 402 bytes, Stack size 1184 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = iCMD0207_UToP_EncriptData &rArr; vLCD_MainUI &rArr; vLCD_ShowTime &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iWaitForESCOrOK
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearALL
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[b2]"></a>iCMD0304_PToU_SendCardReaderStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = iCMD0304_PToU_SendCardReaderStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[ea]"></a>iCMD0304_UToP_OpenCardReader</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = iCMD0304_UToP_OpenCardReader &rArr; vGetTradeTime &rArr; iASCIIToBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTradeAmountIsNull
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetTradeTime
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[279]"></a>iEncryptTrackData</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, up_mpos_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
</UL>

<P><STRONG><a name="[eb]"></a>iCMD0305_GetCardNo</STRONG> (Thumb, 708 bytes, Stack size 1352 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472 + Unknown Stack Size
<LI>Call Chain = iCMD0305_GetCardNo &rArr; APP_PBOC_Simple_ReadCardNo &rArr; EMV_AppInitialization &rArr; EMV_BuildCLbyPSE &rArr; EMV_SelectDDF &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PBOC_Simple_ReadCardNo
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iASCIIToBCD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCIIEx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[27a]"></a>iDisplayPinOnLCD</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iDisplayPinOnLCD &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetAndDisplayPin
</UL>

<P><STRONG><a name="[27b]"></a>iGetAndDisplayPin</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = iGetAndDisplayPin &rArr; vLCD_ShowResTime &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowResTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDisplayPinOnLCD
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_InputPIN
</UL>

<P><STRONG><a name="[27c]"></a>iEncryptPinData</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, up_mpos_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
</UL>

<P><STRONG><a name="[d5]"></a>iCMD_InputPIN</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = iCMD_InputPIN &rArr; iGetAndDisplayPin &rArr; vLCD_ShowResTime &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearKeyBuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_InputPIN
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetAndDisplayPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[d8]"></a>iCMD0404_PToU_UpLoadKeyboardStatus</STRONG> (Thumb, 380 bytes, Stack size 104 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = iCMD0404_PToU_UpLoadKeyboardStatus &rArr; iFillPinBlock &rArr; iASCIIToBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillPinBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByPIKIndex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[ed]"></a>iCMD0404_UToP_OpenKeyboard</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iCMD0404_UToP_OpenKeyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[ee]"></a>iCMD0405_UToP_GetPIN</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[ef]"></a>iCMD0501_UpdateRSAPublicKey</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = iCMD0501_UpdateRSAPublicKey &rArr; CAPK_ADD &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_GetInfo
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteRIDandPKI
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteRID
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteALL
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_ADD
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[f0]"></a>iCMD0502_UpdateAID</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iCMD0502_UpdateAID &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagforScript
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[f1]"></a>iCMD0503_UToP_StartPBOC</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = iCMD0503_UToP_StartPBOC &rArr; SearchTagforScript &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagforScript
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTradeAmountIsNull
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[b3]"></a>iCMD0503_PToU_UploadPBOCData</STRONG> (Thumb, 788 bytes, Stack size 1096 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = iCMD0503_PToU_UploadPBOCData &rArr; iHexToASCIIEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_No55CardUpload_DataPackage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillPinBlock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCIIEx
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByPIKIndex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[f2]"></a>iCMD0505_UToP_GetPBOC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[f3]"></a>iCMD0506_UToP_StartPBOCIssuers</STRONG> (Thumb, 472 bytes, Stack size 1088 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344 + Unknown Stack Size
<LI>Call Chain = iCMD0506_UToP_StartPBOCIssuers &rArr; APP_POS_PAY_CardIssuers_Script &rArr; EMV_OnlineProcessing &rArr; HAL_Card_APDU &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_CardIssuers_Script
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCIIEx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[4c8]"></a>iCMD0507_PToU_UploadPBOCIssuersStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, up_mpos_cmd.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>iCMD0510_UToP_ClosedEMV</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = iCMD0510_UToP_ClosedEMV &rArr; NFC_FieldOff &rArr; phhalHw_FieldOff &rArr; phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[f5]"></a>iCMD0701_UToP_LCDShow</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iCMD0701_UToP_LCDShow &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[282]"></a>iFillTrackData</STRONG> (Thumb, 712 bytes, Stack size 8 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iFillTrackData &rArr; iHexToBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToBCD
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDataFillingWith
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
</UL>

<P><STRONG><a name="[ec]"></a>iCMD0306__GetCardTrack</STRONG> (Thumb, 800 bytes, Stack size 1344 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = iCMD0306__GetCardTrack &rArr; iHexToASCIIEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMPOS_EncryptMACData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCIIEx
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillTrackData
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iEncryptDataByTDKIndex
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_CMD
</UL>

<P><STRONG><a name="[4c9]"></a>vTask0306_UToP_LCDShow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, up_mpos_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>iTaskGetAndDisplayInputPin</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = iTaskGetAndDisplayInputPin &rArr; vLCD_ShowResTime &rArr; vLCD_GUI_Show12X12_Ex &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowResTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[284]"></a>iCMD_Factory_DeviceInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, up_mpos_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iCMD_Factory_DeviceInit &rArr; Update_DeviceSerialNO &rArr; Update_Parameters &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DeviceSerialNO
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_UART_CMD
</UL>

<P><STRONG><a name="[286]"></a>Update_Parameters</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Update_Parameters &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_APPVersion
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DeviceSerialNO
</UL>

<P><STRONG><a name="[18d]"></a>GET_APPVersion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GET_APPVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
</UL>

<P><STRONG><a name="[18e]"></a>GET_DeviceSerialNO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GET_DeviceSerialNO
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowVersion
</UL>

<P><STRONG><a name="[285]"></a>Update_DeviceSerialNO</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Update_DeviceSerialNO &rArr; Update_Parameters &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DeviceSerialNO
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
</UL>

<P><STRONG><a name="[287]"></a>Update_APPVersion</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Update_APPVersion &rArr; Update_Parameters &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Parameters
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[bb]"></a>Input_DeviceSerialNO</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Input_DeviceSerialNO &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Ex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPlace2345
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ClearWorkPage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucKey_Scan
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DeviceSerialNO
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
</UL>

<P><STRONG><a name="[91]"></a>Device_Init</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, app_parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Device_Init &rArr; QPOSFileStruct &rArr; setApplykey &rArr; loadDESkey &rArr; psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPublicFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_APPVersion
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[289]"></a>PWR_GPIO_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pwercheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWR_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
</UL>

<P><STRONG><a name="[28a]"></a>PWR_EXTI_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pwercheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWR_EXTI_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
</UL>

<P><STRONG><a name="[28b]"></a>PWR_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pwercheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Init
</UL>

<P><STRONG><a name="[7e]"></a>vPower_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pwercheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPower_Init &rArr; PWR_EXTI_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Cmd
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EXTI_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[a3]"></a>Power_OFF</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pwercheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Power_OFF &rArr; HAL_DISP_CLS &rArr; HAL_DISP_SetXY &rArr; HAL_DISP_WriteByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DISP_CLS
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Device
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_Check
</UL>

<P><STRONG><a name="[28d]"></a>PWR_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pwercheck.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_OFF
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[28f]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[272]"></a>RTC_Set</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0109_UToP_SetRTC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[103]"></a>RTC_Init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Read
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
</UL>

<P><STRONG><a name="[290]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[186]"></a>RTC_Get</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTime
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0108_UToP_GetRTC
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetTradeTime
</UL>

<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a5]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[2a0]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2a6]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[2a2]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2a4]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[293]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2a3]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2a1]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2c4]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetStringDescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetConfigDescriptor
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetDeviceDescriptor
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetReportDescriptor
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetHIDDescriptor
</UL>

<P><STRONG><a name="[2a8]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2a9]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[2ac]"></a>SetDeviceAddress</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[2ab]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[2ad]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[5]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[2ae]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[4ca]"></a>CTR_HP</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, usb_int.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_hid_send
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[29a]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[4cb]"></a>SetCNTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>GetCNTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>SetISTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>GetISTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>GetFNR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>SetDADDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>GetDADDR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>SetBTABLE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[4d2]"></a>GetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>SetENDPOINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>GetENDPOINT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDouBleBuffEPStall
</UL>

<P><STRONG><a name="[2be]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[4d4]"></a>GetEPType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[2c2]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[2af]"></a>SetDouBleBuffEPStall</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetENDPOINT
</UL>

<P><STRONG><a name="[2ce]"></a>GetEPTxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_hid_send
</UL>

<P><STRONG><a name="[4d5]"></a>GetEPRxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>SetEPTxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_hid_send
</UL>

<P><STRONG><a name="[2b8]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[4d6]"></a>SetEP_KIND</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>ClearEP_KIND</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[4d8]"></a>Set_Status_Out</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>SetEPDoubleBuff</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>ClearEPDoubleBuff</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>GetTxStallStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>GetRxStallStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>ClearEP_CTR_RX</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>ClearEP_CTR_TX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>ToggleDTOG_RX</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>ToggleDTOG_TX</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[294]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[4e1]"></a>SetEPAddress</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>GetEPAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[2bf]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[29d]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[299]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[29b]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_hid_send
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[4e3]"></a>SetEPCountRxReg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[4e4]"></a>GetEPTxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[4e5]"></a>SetEPDblBuffAddr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>SetEPDblBuf0Addr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>SetEPDblBuf1Addr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>GetEPDblBuf0Addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>GetEPDblBuf1Addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>SetEPDblBuffCount</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>SetEPDblBuf0Count</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>SetEPDblBuf1Count</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>GetEPDblBuf0Count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ee]"></a>GetEPDblBuf1Count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>GetEPDblBufDir</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>FreeUserBuffer</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>ToWord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2bc]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[2b1]"></a>USB_SIL_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>

<P><STRONG><a name="[2b2]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[8b]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[4f2]"></a>GPIO_AINConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>Enter_LowPowerMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[2cb]"></a>Leave_LowPowerMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[8c]"></a>USB_Interrupts_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[8d]"></a>usb_GPIO_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_GPIO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[2b5]"></a>USB_Cable_Config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[2b6]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[3]"></a>EP1_IN_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>EP1_OUT_Callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EP1_OUT_Callback &rArr; USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>EP2_IN_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>USB_Istr</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, usb_istr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>CustomHID_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CustomHID_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CustomHID_Reset</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CustomHID_Reset &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>CustomHID_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CustomHID_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>CustomHID_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CustomHID_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2c6]"></a>CustomHID_GetProtocolValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[2c3]"></a>CustomHID_GetHIDDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetHIDDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[2c5]"></a>CustomHID_GetReportDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetReportDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>CustomHID_Data_Setup</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2c7]"></a>CustomHID_SetProtocol</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_NoData_Setup
</UL>

<P><STRONG><a name="[c]"></a>CustomHID_NoData_Setup</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomHID_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_SetProtocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>CustomHID_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>CustomHID_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>CustomHID_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomHID_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>CustomHID_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2bb]"></a>PowerOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerOn &rArr; USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[2c8]"></a>PowerOff</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[2ba]"></a>Suspend</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2ca]"></a>Resume_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[2b9]"></a>Resume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Resume &rArr; Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2cc]"></a>USB_hid_send</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_hid_send &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxStatus
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD_ANSWER
</UL>

<P><STRONG><a name="[2cf]"></a>HID_CMD_ANSWER</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HID_CMD_ANSWER &rArr; USB_hid_send &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_hid_send
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD
</UL>

<P><STRONG><a name="[105]"></a>HID_CMD</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = HID_CMD &rArr; IVT_Update &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CMD_ANSWER
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_GPUart_WaitHalfBit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart_simulation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_RevByte
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_SendByte
</UL>

<P><STRONG><a name="[89]"></a>HAL_GPUartInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPUartInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_GPUart_SendByte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPUart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_WaitHalfBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_Send
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_GPUart_RevByte</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPUart_RevByte &rArr; HAL_GPUart_RevBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_WaitHalfBit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_RevBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_Rev
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_GPUart_Send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPUart_Send &rArr; HAL_GPUart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_UART_CMD
</UL>

<P><STRONG><a name="[a7]"></a>HAL_GPUart_Rev</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPUart_Rev &rArr; HAL_GPUart_RevByte &rArr; HAL_GPUart_RevBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_RevByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>GP_UART_CMD</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GP_UART_CMD &rArr; vLCD_GUI_ShowMid12X12 &rArr; vLCD_ShowString &rArr; get_hanzi_mu &rArr; MSD_ReadBlock &rArr; MSD_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_ShowMid12X12
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_Send
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD_Factory_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
</UL>

<P><STRONG><a name="[2d5]"></a>phbalReg_GetPortList</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, phbalreg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_GetPortList
</UL>

<P><STRONG><a name="[2d7]"></a>phbalReg_SetPort</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phbalreg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_SetPort
</UL>

<P><STRONG><a name="[2d9]"></a>phbalReg_OpenPort</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phbalreg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_OpenPort
</UL>

<P><STRONG><a name="[2db]"></a>phbalReg_ClosePort</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phbalreg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_ClosePort
</UL>

<P><STRONG><a name="[2dd]"></a>phbalReg_Exchange</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, phbalreg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
</UL>

<P><STRONG><a name="[2df]"></a>phbalReg_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, phbalreg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_SetConfig
</UL>

<P><STRONG><a name="[2e1]"></a>phbalReg_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, phbalreg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_GetConfig
</UL>

<P><STRONG><a name="[2e3]"></a>phbalReg_Stub_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, phbalreg_stub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phbalReg_Stub_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[2d6]"></a>phbalReg_Stub_GetPortList</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phbalreg_stub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_GetPortList
</UL>

<P><STRONG><a name="[2d8]"></a>phbalReg_Stub_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, phbalreg_stub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_SetPort
</UL>

<P><STRONG><a name="[2da]"></a>phbalReg_Stub_OpenPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phbalreg_stub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_OpenPort
</UL>

<P><STRONG><a name="[2dc]"></a>phbalReg_Stub_ClosePort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phbalreg_stub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_ClosePort
</UL>

<P><STRONG><a name="[2de]"></a>phbalReg_Stub_Exchange</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, phbalreg_stub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Exchange
</UL>

<P><STRONG><a name="[2e0]"></a>phbalReg_Stub_SetConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, phbalreg_stub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_SetConfig
</UL>

<P><STRONG><a name="[2e2]"></a>phbalReg_Stub_GetConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, phbalreg_stub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_GetConfig
</UL>

<P><STRONG><a name="[2e7]"></a>phhalHw_Exchange</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_PresCheck
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Deselect
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_HaltB
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Exchange
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_HaltA
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Exchange
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[2e9]"></a>phhalHw_WriteRegister</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteData
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_SoftReset
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Receive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_GenerateRandomId
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[2eb]"></a>phhalHw_ReadRegister</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadData
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Receive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[2ed]"></a>phhalHw_ApplyProtocolSettings</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = phhalHw_ApplyProtocolSettings &rArr; phhalHw_Rc523_ApplyProtocolSettings &rArr; phhalHw_SetConfig &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPA
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAttrib
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendRATS
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPB
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCarrier
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeB
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_TypeA
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeB
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeA
</UL>

<P><STRONG><a name="[2ef]"></a>phhalHw_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = phhalHw_SetConfig &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Deselect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SetReaderBaudRateEx
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_HaltB
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_HaltA
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[2f1]"></a>phhalHw_MfcAuthenticateKeyNo</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phhalhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticateKeyNo
</UL>

<P><STRONG><a name="[2f3]"></a>phhalHw_MfcAuthenticate</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, phhalhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
</UL>

<P><STRONG><a name="[2f5]"></a>phhalHw_GetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_GetConfig &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[2f7]"></a>phhalHw_FieldOn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = phhalHw_FieldOn &rArr; phhalHw_Rc523_FieldOn &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOn
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPICC
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
</UL>

<P><STRONG><a name="[2f9]"></a>phhalHw_FieldOff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = phhalHw_FieldOff &rArr; phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FieldOff
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPICC
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
</UL>

<P><STRONG><a name="[2fb]"></a>phhalHw_FieldReset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, phhalhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
</UL>

<P><STRONG><a name="[2fd]"></a>phhalHw_Wait</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phhalhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = phhalHw_Wait &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[4f3]"></a>phhalHw_Rc523_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, phhalhw_rc523.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>phhalHw_Rc523_Init</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc523_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[2ea]"></a>phhalHw_Rc523_WriteRegister</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = phhalHw_Rc523_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Receive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[2e8]"></a>phhalHw_Rc523_Exchange</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>

<P><STRONG><a name="[2ec]"></a>phhalHw_Rc523_ReadRegister</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[2f0]"></a>phhalHw_Rc523_SetConfig</STRONG> (Thumb, 1978 bytes, Stack size 64 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[2ee]"></a>phhalHw_Rc523_ApplyProtocolSettings</STRONG> (Thumb, 934 bytes, Stack size 40 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = phhalHw_Rc523_ApplyProtocolSettings &rArr; phhalHw_SetConfig &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[2f6]"></a>phhalHw_Rc523_GetConfig</STRONG> (Thumb, 792 bytes, Stack size 40 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
</UL>

<P><STRONG><a name="[2f8]"></a>phhalHw_Rc523_FieldOn</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = phhalHw_Rc523_FieldOn &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOn
</UL>

<P><STRONG><a name="[2fa]"></a>phhalHw_Rc523_FieldOff</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
</UL>

<P><STRONG><a name="[2fe]"></a>phhalHw_Rc523_Wait</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
</UL>

<P><STRONG><a name="[2fc]"></a>phhalHw_Rc523_FieldReset</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, phhalhw_rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldReset
</UL>

<P><STRONG><a name="[2f2]"></a>phhalHw_Rc523_MfcAuthenticateKeyNo</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, phhalhw_rc523.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_MfcAuthenticateKeyNo
</UL>

<P><STRONG><a name="[2f4]"></a>phhalHw_Rc523_MfcAuthenticate</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, phhalhw_rc523.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_MfcAuthenticate
</UL>

<P><STRONG><a name="[30b]"></a>phhalHw_Rc523_Cmd_Mem</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Config
</UL>

<P><STRONG><a name="[30d]"></a>phhalHw_Rc523_Cmd_Config</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[30e]"></a>phhalHw_Rc523_Cmd_GenerateRandomId</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
</UL>

<P><STRONG><a name="[30f]"></a>phhalHw_Rc523_Cmd_CalcCrc</STRONG> (Thumb, 384 bytes, Stack size 80 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[310]"></a>phhalHw_Rc523_Cmd_Transmit</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[311]"></a>phhalHw_Rc523_Cmd_Receive</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>

<P><STRONG><a name="[312]"></a>phhalHw_Rc523_Cmd_Autocoll</STRONG> (Thumb, 576 bytes, Stack size 72 bytes, phhalhw_rc523_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>

<P><STRONG><a name="[313]"></a>phhalHw_Rc523_Cmd_SoftReset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, phhalhw_rc523_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = phhalHw_Rc523_Cmd_SoftReset &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[314]"></a>phhalHw_Rc523_WriteData</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
</UL>

<P><STRONG><a name="[30a]"></a>phhalHw_Rc523_WriteFifo</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
</UL>

<P><STRONG><a name="[300]"></a>phhalHw_Rc523_FlushFifo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = phhalHw_Rc523_FlushFifo &rArr; phhalHw_Rc523_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Receive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[315]"></a>phhalHw_Rc523_ReadData</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = phhalHw_Rc523_ReadData &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
</UL>

<P><STRONG><a name="[30c]"></a>phhalHw_Rc523_ReadFifo</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_Rc523_ReadFifo &rArr; phhalHw_Rc523_ReadData &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadData
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[304]"></a>phhalHw_Rc523_GetRxBuffer</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
</UL>

<P><STRONG><a name="[2ff]"></a>phhalHw_Rc523_GetTxBuffer</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = phhalHw_Rc523_GetTxBuffer &rArr; phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[301]"></a>phhalHw_Rc523_ExchangeTransmit</STRONG> (Thumb, 572 bytes, Stack size 72 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = phhalHw_Rc523_ExchangeTransmit &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[316]"></a>phhalHw_Rc523_GetFdt</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = phhalHw_Rc523_GetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[302]"></a>phhalHw_Rc523_ExchangeReceive</STRONG> (Thumb, 768 bytes, Stack size 72 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Receive
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[303]"></a>phhalHw_Rc523_SetFdt</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, phhalhw_rc523_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
</UL>

<P><STRONG><a name="[309]"></a>phhalHw_Rc523_WaitIrq</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, phhalhw_rc523_wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = phhalHw_Rc523_WaitIrq &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Autocoll
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_GenerateRandomId
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
</UL>

<P><STRONG><a name="[31e]"></a>phpalI14443p3a_RequestA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, phpali14443p3a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestA
</UL>

<P><STRONG><a name="[320]"></a>phpalI14443p3a_WakeUpA</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phpali14443p3a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = phpalI14443p3a_WakeUpA &rArr; phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupA
</UL>

<P><STRONG><a name="[322]"></a>phpalI14443p3a_HaltA</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phpali14443p3a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = phpalI14443p3a_HaltA &rArr; phpalI14443p3a_Sw_HaltA &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_HaltA
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHaltA
</UL>

<P><STRONG><a name="[324]"></a>phpalI14443p3a_Anticollision</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p3a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[326]"></a>phpalI14443p3a_Select</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, phpali14443p3a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
</UL>

<P><STRONG><a name="[328]"></a>phpalI14443p3a_ActivateCard</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, phpali14443p3a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_TypeA
</UL>

<P><STRONG><a name="[32a]"></a>phpalI14443p3a_Exchange</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p3a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Exchange
</UL>

<P><STRONG><a name="[32c]"></a>phpalI14443p3a_GetSerialNo</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p3a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_GetSerialNo
</UL>

<P><STRONG><a name="[373]"></a>phpalI14443p3a_Sw_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[32e]"></a>phpalI14443p3a_Sw_RequestAEx</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestA
</UL>

<P><STRONG><a name="[31f]"></a>phpalI14443p3a_Sw_RequestA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, phpali14443p3a_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_RequestA
</UL>

<P><STRONG><a name="[321]"></a>phpalI14443p3a_Sw_WakeUpA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendRATS
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_WakeUpA
</UL>

<P><STRONG><a name="[323]"></a>phpalI14443p3a_Sw_HaltA</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = phpalI14443p3a_Sw_HaltA &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_HaltA
</UL>

<P><STRONG><a name="[325]"></a>phpalI14443p3a_Sw_Anticollision</STRONG> (Thumb, 878 bytes, Stack size 88 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendRATS
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Anticollision
</UL>

<P><STRONG><a name="[327]"></a>phpalI14443p3a_Sw_Select</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Select
</UL>

<P><STRONG><a name="[329]"></a>phpalI14443p3a_Sw_ActivateCard</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, phpali14443p3a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_ActivateCard
</UL>

<P><STRONG><a name="[32b]"></a>phpalI14443p3a_Sw_Exchange</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Exchange
</UL>

<P><STRONG><a name="[32d]"></a>phpalI14443p3a_Sw_GetSerialNo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, phpali14443p3a_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_GetSerialNo
</UL>

<P><STRONG><a name="[32f]"></a>phpalI14443p3b_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SetConfig
</UL>

<P><STRONG><a name="[331]"></a>phpalI14443p3b_GetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_GetConfig
</UL>

<P><STRONG><a name="[333]"></a>phpalI14443p3b_RequestB</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[335]"></a>phpalI14443p3b_WakeUpB</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_WakeUpB
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAttrib
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupB
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[337]"></a>phpalI14443p3b_SlotMarker</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[339]"></a>phpalI14443p3b_HaltB</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_HaltB
</UL>

<P><STRONG><a name="[33b]"></a>phpalI14443p3b_Attrib</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAttrib
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[33d]"></a>phpalI14443p3b_ActivateCard</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeB
</UL>

<P><STRONG><a name="[33f]"></a>phpalI14443p3b_Exchange</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Exchange
</UL>

<P><STRONG><a name="[341]"></a>phpalI14443p3b_GetSerialNo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_GetSerialNo
</UL>

<P><STRONG><a name="[343]"></a>phpalI14443p3b_SetHigherLayerInf</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SetHigherLayerInf
</UL>

<P><STRONG><a name="[345]"></a>phpalI14443p3b_GetHigherLayerResp</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_GetHigherLayerResp
</UL>

<P><STRONG><a name="[347]"></a>phpalI14443p3b_GetProtocolParams</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, phpali14443p3b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_GetProtocolParams
</UL>

<P><STRONG><a name="[4f4]"></a>phpalI14443p3b_Sw_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>phpalI14443p3b_Sw_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_SetConfig
</UL>

<P><STRONG><a name="[332]"></a>phpalI14443p3b_Sw_GetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_GetConfig
</UL>

<P><STRONG><a name="[349]"></a>phpalI14443p3b_Sw_CheckATQBEx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
</UL>

<P><STRONG><a name="[34a]"></a>phpalI14443p3b_Sw_RequestBEx</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_WakeUpB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
</UL>

<P><STRONG><a name="[334]"></a>phpalI14443p3b_Sw_RequestB</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_RequestB
</UL>

<P><STRONG><a name="[336]"></a>phpalI14443p3b_Sw_WakeUpB</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_WakeUpB
</UL>

<P><STRONG><a name="[338]"></a>phpalI14443p3b_Sw_SlotMarker</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_SlotMarker
</UL>

<P><STRONG><a name="[33a]"></a>phpalI14443p3b_Sw_HaltB</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_HaltB
</UL>

<P><STRONG><a name="[34b]"></a>phpalI14443p3b_Sw_SetReaderBaudRateEx</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
</UL>

<P><STRONG><a name="[33c]"></a>phpalI14443p3b_Sw_Attrib</STRONG> (Thumb, 704 bytes, Stack size 72 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SetReaderBaudRateEx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Attrib
</UL>

<P><STRONG><a name="[34c]"></a>phpalI14443p3b_Sw_DecideBaudRateEx</STRONG> (Thumb, 320 bytes, Stack size 12 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[33e]"></a>phpalI14443p3b_Sw_ActivateCard</STRONG> (Thumb, 552 bytes, Stack size 104 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_DecideBaudRateEx
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Attrib
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_SlotMarker
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_WakeUpB
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_RequestB
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_ActivateCard
</UL>

<P><STRONG><a name="[340]"></a>phpalI14443p3b_Sw_Exchange</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Exchange
</UL>

<P><STRONG><a name="[342]"></a>phpalI14443p3b_Sw_GetSerialNo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_GetSerialNo
</UL>

<P><STRONG><a name="[344]"></a>phpalI14443p3b_Sw_SetHigherLayerInf</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_SetHigherLayerInf
</UL>

<P><STRONG><a name="[346]"></a>phpalI14443p3b_Sw_GetHigherLayerResp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_GetHigherLayerResp
</UL>

<P><STRONG><a name="[348]"></a>phpalI14443p3b_Sw_GetProtocolParams</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, phpali14443p3b_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_GetProtocolParams
</UL>

<P><STRONG><a name="[34d]"></a>phpalI14443p4_SetProtocol</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, phpali14443p4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = phpalI14443p4_SetProtocol &rArr; phpalI14443p4_Sw_SetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_SetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeB
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRats
</UL>

<P><STRONG><a name="[34f]"></a>phpalI14443p4_ResetProtocol</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phpali14443p4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_ResetProtocol
</UL>

<P><STRONG><a name="[351]"></a>phpalI14443p4_Deselect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phpali14443p4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Deselect
</UL>

<P><STRONG><a name="[353]"></a>phpalI14443p4_PresCheck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phpali14443p4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = phpalI14443p4_PresCheck &rArr; phpalI14443p4_Sw_PresCheck &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_PresCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_CheckCard
</UL>

<P><STRONG><a name="[355]"></a>phpalI14443p4_Exchange</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAPDU
</UL>

<P><STRONG><a name="[357]"></a>phpalI14443p4_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_SetConfig
</UL>

<P><STRONG><a name="[359]"></a>phpalI14443p4_GetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_GetConfig
</UL>

<P><STRONG><a name="[350]"></a>phpalI14443p4_Sw_ResetProtocol</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_ResetProtocol
</UL>

<P><STRONG><a name="[35b]"></a>phpalI14443p4_Sw_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phpalI14443p4_Sw_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_ResetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[34e]"></a>phpalI14443p4_Sw_SetProtocol</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phpalI14443p4_Sw_SetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_SetProtocol
</UL>

<P><STRONG><a name="[35c]"></a>phpalI14443p4_Sw_BuildSBlock</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phpalI14443p4_Sw_BuildSBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Deselect
</UL>

<P><STRONG><a name="[352]"></a>phpalI14443p4_Sw_Deselect</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, phpali14443p4_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_BuildSBlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Deselect
</UL>

<P><STRONG><a name="[35e]"></a>phpalI14443p4_Sw_IsValidRBlock</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = phpalI14443p4_Sw_IsValidRBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_PresCheck
</UL>

<P><STRONG><a name="[35d]"></a>phpalI14443p4_Sw_BuildRBlock</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phpalI14443p4_Sw_BuildRBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_PresCheck
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
</UL>

<P><STRONG><a name="[354]"></a>phpalI14443p4_Sw_PresCheck</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = phpalI14443p4_Sw_PresCheck &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_BuildRBlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsValidRBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_PresCheck
</UL>

<P><STRONG><a name="[361]"></a>phpalI14443p4_Sw_IsValidSBlock</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = phpalI14443p4_Sw_IsValidSBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
</UL>

<P><STRONG><a name="[360]"></a>phpalI14443p4_Sw_IsValidIBlock</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phpalI14443p4_Sw_IsValidIBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
</UL>

<P><STRONG><a name="[35f]"></a>phpalI14443p4_Sw_IsoHandling</STRONG> (Thumb, 972 bytes, Stack size 96 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsValidIBlock
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsValidSBlock
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_BuildRBlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsValidRBlock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_BuildSBlock
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
</UL>

<P><STRONG><a name="[362]"></a>phpalI14443p4_Sw_BuildIBlock</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = phpalI14443p4_Sw_BuildIBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
</UL>

<P><STRONG><a name="[356]"></a>phpalI14443p4_Sw_Exchange</STRONG> (Thumb, 1252 bytes, Stack size 136 bytes, phpali14443p4_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_BuildIBlock
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_IsoHandling
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_BuildRBlock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Exchange
</UL>

<P><STRONG><a name="[358]"></a>phpalI14443p4_Sw_SetConfig</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, phpali14443p4_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_SetConfig
</UL>

<P><STRONG><a name="[35a]"></a>phpalI14443p4_Sw_GetConfig</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, phpali14443p4_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_GetConfig
</UL>

<P><STRONG><a name="[363]"></a>phpalI14443p4a_Rats</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, phpali14443p4a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = phpalI14443p4a_Rats &rArr; phpalI14443p4a_Sw_Rats &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRats
</UL>

<P><STRONG><a name="[365]"></a>phpalI14443p4a_Pps</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phpali14443p4a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
</UL>

<P><STRONG><a name="[367]"></a>phpalI14443p4a_ActivateCard</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpali14443p4a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[369]"></a>phpalI14443p4a_GetProtocolParams</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, phpali14443p4a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_GetProtocolParams
</UL>

<P><STRONG><a name="[374]"></a>phpalI14443p4a_Sw_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, phpali14443p4a_sw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[364]"></a>phpalI14443p4a_Sw_Rats</STRONG> (Thumb, 834 bytes, Stack size 64 bytes, phpali14443p4a_sw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = phpalI14443p4a_Sw_Rats &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_ActivateCard
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Rats
</UL>

<P><STRONG><a name="[366]"></a>phpalI14443p4a_Sw_Pps</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, phpali14443p4a_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_ActivateCard
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Pps
</UL>

<P><STRONG><a name="[368]"></a>phpalI14443p4a_Sw_ActivateCard</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, phpali14443p4a_sw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_ActivateCard
</UL>

<P><STRONG><a name="[36a]"></a>phpalI14443p4a_Sw_GetProtocolParams</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, phpali14443p4a_sw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_GetProtocolParams
</UL>

<P><STRONG><a name="[2e4]"></a>RegCtl_SpiHwInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regctl_spihw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Init
</UL>

<P><STRONG><a name="[2e6]"></a>RegCtl_SpiHwGetReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, regctl_spihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegCtl_SpiHwGetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_SendByte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Exchange
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwModReg
</UL>

<P><STRONG><a name="[2e5]"></a>RegCtl_SpiHwSetReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, regctl_spihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Exchange
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwModReg
</UL>

<P><STRONG><a name="[36d]"></a>RegCtl_SpiHwModReg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, regctl_spihw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
</UL>

<P><STRONG><a name="[36e]"></a>RegCtl_SpiHwSetMultiData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, regctl_spihw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_SPI_SendByte
</UL>

<P><STRONG><a name="[4f5]"></a>RegCtl_SpiHwGetMultiData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, regctl_spihw.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>NFC_Delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeA
</UL>

<P><STRONG><a name="[370]"></a>NFC_Delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAttrib
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendRATS
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPB
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPICC
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
</UL>

<P><STRONG><a name="[371]"></a>RC523_Init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RC523_Init &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_SoftReset
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRC523_Init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPICC
</UL>

<P><STRONG><a name="[375]"></a>SendHaltA</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SendHaltA &rArr; phpalI14443p3a_HaltA &rArr; phpalI14443p3a_Sw_HaltA &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_HaltA
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPA
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeA
</UL>

<P><STRONG><a name="[376]"></a>SendWupA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SendWupA &rArr; phpalI14443p3a_WakeUpA &rArr; phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_WakeUpA
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPA
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeA
</UL>

<P><STRONG><a name="[377]"></a>Polling_TypeA</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupA
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHaltA
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
</UL>

<P><STRONG><a name="[378]"></a>SendWupB</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_WakeUpB
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPB
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeB
</UL>

<P><STRONG><a name="[379]"></a>Polling_TypeB</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupB
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
</UL>

<P><STRONG><a name="[37a]"></a>SendRats</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SendRats &rArr; phpalI14443p4a_Rats &rArr; phpalI14443p4a_Sw_Rats &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Rats
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_SetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
</UL>

<P><STRONG><a name="[37b]"></a>Select_TypeA</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_ActivateCard
</UL>

<P><STRONG><a name="[ce]"></a>Activation_TypeA</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Activation_TypeA &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRats
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_ActivateCard
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_TEST
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
</UL>

<P><STRONG><a name="[37c]"></a>Activation_TypeB</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_SetProtocol
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_ActivateCard
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
</UL>

<P><STRONG><a name="[37d]"></a>SendCarrier</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[37e]"></a>NFC_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAttrib
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendRATS
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RemovalProcess
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
</UL>

<P><STRONG><a name="[37f]"></a>PollPICC</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeB
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeB
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polling_TypeA
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPICC
</UL>

<P><STRONG><a name="[380]"></a>ResetPICC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollPICC
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOn
</UL>

<P><STRONG><a name="[381]"></a>NFC_SendAPDU</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Exchange
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
</UL>

<P><STRONG><a name="[1d6]"></a>NFC_Card_APDU</STRONG> (Thumb, 166 bytes, Stack size 536 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAPDU
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_ReadData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_GPO
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectADF
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectPPSE
</UL>

<P><STRONG><a name="[382]"></a>NFC_Deselect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_TEST
</UL>

<P><STRONG><a name="[cc]"></a>NFC_CheckCard</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = NFC_CheckCard &rArr; phpalI14443p4_PresCheck &rArr; phpalI14443p4_Sw_PresCheck &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_PresCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[383]"></a>NFC_RemovalProcess</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupB
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupA
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHaltA
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
</UL>

<P><STRONG><a name="[cd]"></a>NFC_SendWUPA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = NFC_SendWUPA &rArr; SendWupA &rArr; phpalI14443p3a_WakeUpA &rArr; phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupA
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHaltA
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_TEST
</UL>

<P><STRONG><a name="[384]"></a>NFC_SendWUPB</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWupB
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
</UL>

<P><STRONG><a name="[385]"></a>NFC_SendRATS</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[386]"></a>NFC_SendAttrib</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, nfc_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Reset
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Delay_ms
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Attrib
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_WakeUpB
</UL>

<P><STRONG><a name="[90]"></a>NFC_FieldOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = NFC_FieldOff &rArr; phhalHw_FieldOff &rArr; phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0510_UToP_ClosedEMV
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0107_UToP_ResetDevice
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[cb]"></a>NFC_FieldOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nfc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = NFC_FieldOn &rArr; phhalHw_FieldOn &rArr; phhalHw_Rc523_FieldOn &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Card
</UL>

<P><STRONG><a name="[387]"></a>RC523_GPIO_Config</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC523_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRC523_Init
</UL>

<P><STRONG><a name="[388]"></a>RC523_SPI_Config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rc523.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[8f]"></a>vRC523_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = vRC523_Init &rArr; RC523_Init &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_GPIO_Config
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHardwareInit
</UL>

<P><STRONG><a name="[36b]"></a>RC523_SPI_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetMultiData
</UL>

<P><STRONG><a name="[36c]"></a>RC523_SPI_ReadByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rc523.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC523_SPI_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
</UL>

<P><STRONG><a name="[389]"></a>RC_TEST</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rc523.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendWUPA
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation_TypeA
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBuzzer_On
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Deselect
</UL>

<P><STRONG><a name="[4f6]"></a>INPutAmount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>AffirmAmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>qPBOC_CheckCard</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>App_qPBOC_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_qPBOC_Init &rArr; Clear_Cardlist
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cardlist
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[38b]"></a>SelectAID</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SelectAID
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectPPSE
</UL>

<P><STRONG><a name="[4f9]"></a>App_qPBOC_PreProcessing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>App_qPBOC_SelectPPSE</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = App_qPBOC_SelectPPSE &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectAID
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[38d]"></a>App_qPBOC_SelectADF</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = App_qPBOC_SelectADF &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[38e]"></a>App_qPBOC_GPO</STRONG> (Thumb, 762 bytes, Stack size 168 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = App_qPBOC_GPO &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCardDo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[38f]"></a>App_qPBOC_ReadData</STRONG> (Thumb, 826 bytes, Stack size 32 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = App_qPBOC_ReadData &rArr; NFC_Card_APDU &rArr; NFC_SendAPDU &rArr; phpalI14443p4_Exchange &rArr; phpalI14443p4_Sw_Exchange &rArr; phpalI14443p4_Sw_IsoHandling &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwSetReg &rArr; RC523_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCardDo
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[390]"></a>App_qPBOC_Offline</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineDynamicDataAuthentication
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Purchase
</UL>

<P><STRONG><a name="[4fa]"></a>APP_qPBOC_SaveRecord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>App_qPBOC_DataUpLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>App_qPBOC_ReadRecordInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_qpboc_pay.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>App_qPBOC_Purchase</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, app_qpboc_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872 + Unknown Stack Size
<LI>Call Chain = App_qPBOC_Purchase &rArr; App_qPBOC_Offline &rArr; OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalRiskManagement
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ProcessingRestriction
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_CardholderVerification
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Offline
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_ReadData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_GPO
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectADF
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectPPSE
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectAID
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayQPOCFlow
</UL>

<P><STRONG><a name="[392]"></a>RSADecryption</STRONG> (Thumb, 68 bytes, Stack size 304 bytes, offline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LitteToBigStr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicDecrypt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynamicDataVeryfy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardPublicKey
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticDataVeryfy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIssuerPublicKey
</UL>

<P><STRONG><a name="[394]"></a>FILE_ReadCAKey</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, offline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FILE_ReadCAKey
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineStaticDataAuthentication
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineDynamicDataAuthentication
</UL>

<P><STRONG><a name="[395]"></a>GetIssuerPublicKey</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, offline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = GetIssuerPublicKey &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineStaticDataAuthentication
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineDynamicDataAuthentication
</UL>

<P><STRONG><a name="[396]"></a>StaticDataVeryfy</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, offline.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineStaticDataAuthentication
</UL>

<P><STRONG><a name="[397]"></a>GetCardPublicKey</STRONG> (Thumb, 780 bytes, Stack size 16 bytes, offline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = GetCardPublicKey &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineDynamicDataAuthentication
</UL>

<P><STRONG><a name="[398]"></a>DynamicDataVeryfy</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, offline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OfflineDynamicDataAuthentication
</UL>

<P><STRONG><a name="[399]"></a>OfflineStaticDataAuthentication</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, offline.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticDataVeryfy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIssuerPublicKey
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_ReadCAKey
</UL>

<P><STRONG><a name="[391]"></a>OfflineDynamicDataAuthentication</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, offline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = OfflineDynamicDataAuthentication &rArr; DynamicDataVeryfy &rArr; RSADecryption &rArr; RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynamicDataVeryfy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardPublicKey
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIssuerPublicKey
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_ReadCAKey
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_Offline
</UL>

<P><STRONG><a name="[393]"></a>RSAPublicDecrypt</STRONG> (Thumb, 144 bytes, Stack size 320 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = RSAPublicDecrypt &rArr; RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
</UL>

<P><STRONG><a name="[3ae]"></a>RSAPrivateEncrypt</STRONG> (Thumb, 94 bytes, Stack size 296 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4fd]"></a>AID_GetCount</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ic_interface.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>AID_DeleteALL</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
</UL>

<P><STRONG><a name="[3b0]"></a>AID_DeleteAID</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3b1]"></a>AID_Check</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_ADD
</UL>

<P><STRONG><a name="[3b2]"></a>AID_ADD</STRONG> (Thumb, 552 bytes, Stack size 224 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_Check
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3b3]"></a>AID_GetOne</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3b4]"></a>AID_GetInfo</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4fe]"></a>CAPK_GetCount</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ic_interface.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>CAPK_DeleteALL</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ic_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAPK_DeleteALL &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0501_UpdateRSAPublicKey
</UL>

<P><STRONG><a name="[27f]"></a>CAPK_DeleteRID</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ic_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAPK_DeleteRID &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0501_UpdateRSAPublicKey
</UL>

<P><STRONG><a name="[280]"></a>CAPK_DeleteRIDandPKI</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ic_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAPK_DeleteRIDandPKI &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0501_UpdateRSAPublicKey
</UL>

<P><STRONG><a name="[3b5]"></a>CAPK_Check</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ic_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAPK_Check &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_ADD
</UL>

<P><STRONG><a name="[27e]"></a>CAPK_ADD</STRONG> (Thumb, 300 bytes, Stack size 312 bytes, ic_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = CAPK_ADD &rArr; IROM_Write &rArr; IROM_WritePage &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0501_UpdateRSAPublicKey
</UL>

<P><STRONG><a name="[3b6]"></a>CAPK_GetOneKey</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ic_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[281]"></a>CAPK_GetInfo</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ic_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAPK_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0501_UpdateRSAPublicKey
</UL>

<P><STRONG><a name="[4ff]"></a>des_key_set_parity</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, des.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>des_key_check_key_parity</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, des.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>des_key_check_weak</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3b8]"></a>des_setkey_enc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = des_setkey_enc &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
</UL>

<P><STRONG><a name="[3ba]"></a>des_setkey_dec</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = des_setkey_dec &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
</UL>

<P><STRONG><a name="[3bc]"></a>des3_set2key_enc</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = des3_set2key_enc &rArr; des3_set2key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
</UL>

<P><STRONG><a name="[3bd]"></a>des3_set2key_dec</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = des3_set2key_dec &rArr; des3_set2key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
</UL>

<P><STRONG><a name="[3bf]"></a>des3_set3key_enc</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
</UL>

<P><STRONG><a name="[3c0]"></a>des3_set3key_dec</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
</UL>

<P><STRONG><a name="[3c2]"></a>des_crypt_ecb</STRONG> (Thumb, 564 bytes, Stack size 28 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_cbc
</UL>

<P><STRONG><a name="[3c1]"></a>des_crypt_cbc</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = des_crypt_cbc &rArr; des_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
</UL>

<P><STRONG><a name="[3c4]"></a>des3_crypt_ecb</STRONG> (Thumb, 1160 bytes, Stack size 28 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = des3_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc
</UL>

<P><STRONG><a name="[3c3]"></a>des3_crypt_cbc</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_ecb
</UL>

<P><STRONG><a name="[275]"></a>DES3_App</STRONG> (Thumb, 246 bytes, Stack size 584 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = DES3_App &rArr; des3_set2key_dec &rArr; des3_set2key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_ecb
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_cbc
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_dec
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_enc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
</UL>

<P><STRONG><a name="[171]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
</UL>

<P><STRONG><a name="[be]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADFforLogEntry
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SearchAID
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_RemoveACandidate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectDDF
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagforScript
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTag
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTagType
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTagExist
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_CardholderVerification
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_AppInitialization
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteRIDandPKI
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_DeleteRID
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_Check
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_DeleteAID
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynamicDataVeryfy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardPublicKey
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticDataVeryfy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIssuerPublicKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_ReadData
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Deselect
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_key_check_weak
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_GetOneKey
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_Check
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_GetOne
</UL>

<P><STRONG><a name="[256]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_GUI_Show12X12_Col
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_SwipeMSOrICCardOrInputCardNo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayThroughICC
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPayQPOCFlow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCII
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0701_UToP_LCDShow
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0506_UToP_StartPBOCIssuers
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0502_UpdateAID
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_UToP_OpenKeyboard
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0207_UToP_EncriptData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0204_UToP_VerifyMAC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0202_UToP_UpdateDeviceWorkKey
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010A__GetDeviceParameter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0108_UToP_GetRTC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_ChangeBTName
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_AnalyzeAndSend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iAmountAddPoint
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IROM_Write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBluetooth_RecvAndAnalyze
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_GETBTVersion
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iGetCardNum
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanzi_mu
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADFforLogEntry
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SortCandidateList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_RemoveACandidate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_GetProcessOn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectDDF
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCardDo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_FinalSelection
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyAID
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_POS_PAY_No55CardUpload_DataPackage
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_T1_Build_I
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCC_Check_atr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DeviceSerialNO
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_APPVersion
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDiversify3Des
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iUnionPay_Ansi919Mac
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFindTagData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillPinBlock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iASCIIToBCD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iHexToASCIIEx
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPK_ADD
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetAndDisplayPin
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iRecv_CMD010C_Firmware
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_ADD
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateEncrypt
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicDecrypt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynamicDataVeryfy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardPublicKey
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticDataVeryfy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIssuerPublicKey
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_ReadCAKey
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSADecryption
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_ReadData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_GPO
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectADF
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectPPSE
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectAID
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_SendAPDU
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Exchange
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_GetSerialNo
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Transmit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_CalcCrc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Config
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_Mem
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AID_GetInfo
</UL>

<P><STRONG><a name="[3c5]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[501]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_ShowTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0503_PToU_UploadPBOCData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0305_GetCardNo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_AnalyzeAndSend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLCD_MainUI
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IVT_Update
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_TerminalActionAnalysis
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPOS_ACKorNAK
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_qPBOC_SelectPPSE
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[502]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0404_PToU_UpLoadKeyboardStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0306__GetCardTrack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_PToU_SendCardReaderStatus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanzi_mu
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ClearCandidateList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTradeAmountIsNull
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iAmountASCIITo6ByteBCD
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFillPinBlock
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD010C_UToP_UpdateDeviceFirmware
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GVAR_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADFforLogEntry
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_RemoveACandidate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectDDF
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_SelectADF
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectDol
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitDDFStack
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_InitAIDList
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_ClearCandidateList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_BuildCLbyPSE
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cardlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_App
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[3c7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3c6]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCMD0304_UToP_OpenCardReader
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPBOC_7816_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Write_EEPROM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iBluetooth_Read_EEPROM
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMV_OnlineProcessing
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Card_APDU
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_t1_IFSC_reader
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_T1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCC_Check_atr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPOSFileStruct
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateEncrypt
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicDecrypt
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_dec
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_enc
</UL>

<P><STRONG><a name="[505]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[506]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[288]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_APPVersion
</UL>

<P><STRONG><a name="[507]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[65]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[50a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[50b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[50c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[50e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[50f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[3cc]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[3d0]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[3cd]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3d3]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[31a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
</UL>

<P><STRONG><a name="[3cf]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
</UL>

<P><STRONG><a name="[3d1]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[3d4]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[3da]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
</UL>

<P><STRONG><a name="[3d7]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
</UL>

<P><STRONG><a name="[3d8]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[305]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
</UL>

<P><STRONG><a name="[510]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[31d]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[3d9]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[3dd]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[307]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
</UL>

<P><STRONG><a name="[3db]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3d2]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[3d6]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[31b]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[3dc]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[318]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
</UL>

<P><STRONG><a name="[3de]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[31c]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[3e0]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c0]"></a>NVIC_SystemReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, vectortable.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Test
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vVectorTable_Key
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFactory_Init
</UL>

<P><STRONG><a name="[12c]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[12a]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[128]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[126]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[138]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[137]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[13a]"></a>MSR_vGPIO_Strobe_Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSR_vGPIO_Strobe_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
</UL>

<P><STRONG><a name="[13e]"></a>MSR_vGPIO_Data_Config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSR_vGPIO_Data_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vReset
</UL>

<P><STRONG><a name="[13f]"></a>MSR_vTIM_NIVC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSR_vTIM_NIVC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
</UL>

<P><STRONG><a name="[141]"></a>MSR_vTIM_Config</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSR_vTIM_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_vInit
</UL>

<P><STRONG><a name="[14b]"></a>MSR_iCheckData_OddAndLRC</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mscard_pa1100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSR_iCheckData_OddAndLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_iAnalyzingData_Track1Or2Or3
</UL>

<P><STRONG><a name="[19b]"></a>psamSendCommand</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = psamSendCommand &rArr; uiCalcCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LittleToBig_short
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vZ8D256_SendData
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCalcCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TobootZ8
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaDisEncrty
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEncrty
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternaAuthen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeDesEntryOrDisEntry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesEntryOrDisEntry
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genaryRsaKey
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPSAMInfo
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfo
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPSAMInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDeviceInfo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBinaryFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDESkey
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDESkey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadMainkey
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMF
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntoFlash
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromFlash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesBykey
</UL>

<P><STRONG><a name="[19c]"></a>psamRecvAnswer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sercrity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = psamRecvAnswer &rArr; Z8D256_RecvString_XIEYI &rArr; iZ8D256_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z8D256_RecvString_XIEYI
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChallenge
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Arigth
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaDisEncrty
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEncrty
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternaAuthen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeDesEntryOrDisEntry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesEntryOrDisEntry
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genaryRsaKey
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinaryFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBinaryFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seleteBinaryFile
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPSAMInfo
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfo
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPSAMInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDeviceInfo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBinaryFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDESkey
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDESkey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadMainkey
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMF
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntoFlash
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromFlash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeDesBykey
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleDesBykey
</UL>

<P><STRONG><a name="[1cd]"></a>SC_VoltageConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC_VoltageConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_7816_Init
</UL>

<P><STRONG><a name="[1d3]"></a>SC_SendData0</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, hal_7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SC_SendData0 &rArr; USART_ByteReceive &rArr; SC_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ByteReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Card_APDU
</UL>

<P><STRONG><a name="[25b]"></a>AN_ADC1_GPIO_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, an_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AN_ADC1_GPIO_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_Init
</UL>

<P><STRONG><a name="[25c]"></a>AN_ADC1_Config</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, an_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AN_ADC1_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN_ADC_Init
</UL>

<P><STRONG><a name="[28e]"></a>RTC_NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[298]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[29c]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[29f]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2a7]"></a>Data_Setup0</STRONG> (Thumb, 678 bytes, Stack size 40 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2b7]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_GPUart_RevBit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart_simulation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPUart_RevBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPUart_RevByte
</UL>

<P><STRONG><a name="[39a]"></a>subdigitmult</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_Rsa_c_ec1a91ae__dmult
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[3aa]"></a>NN_Decode</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
</UL>

<P><STRONG><a name="[3ab]"></a>NN_Encode</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
</UL>

<P><STRONG><a name="[39f]"></a>NN_Assign</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
</UL>

<P><STRONG><a name="[39d]"></a>NN_AssignZero</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
</UL>

<P><STRONG><a name="[3a1]"></a>NN_DigitBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[39e]"></a>NN_Digits</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
</UL>

<P><STRONG><a name="[3a4]"></a>NN_Cmp</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NN_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[3ad]"></a>NN_Add</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
</UL>

<P><STRONG><a name="[3a3]"></a>NN_Sub</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Sub
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[3a2]"></a>NN_LShift</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_LShift
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[3a5]"></a>NN_RShift</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_RShift
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[39c]"></a>NN_Mult</STRONG> (Thumb, 206 bytes, Stack size 584 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = NN_Mult &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_Rsa_c_ec1a91ae__dmult
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>

<P><STRONG><a name="[3a0]"></a>NN_Div</STRONG> (Thumb, 650 bytes, Stack size 872 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_RShift
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_LShift
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_DigitBits
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdigitmult
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
</UL>

<P><STRONG><a name="[3a6]"></a>NN_Mod</STRONG> (Thumb, 54 bytes, Stack size 552 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>

<P><STRONG><a name="[3a7]"></a>NN_ModMult</STRONG> (Thumb, 62 bytes, Stack size 552 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[3a8]"></a>NN_ModExp</STRONG> (Thumb, 254 bytes, Stack size 1104 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateBlock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicBlock
</UL>

<P><STRONG><a name="[3a9]"></a>RSAPublicBlock</STRONG> (Thumb, 168 bytes, Stack size 1080 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = RSAPublicBlock &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPublicDecrypt
</UL>

<P><STRONG><a name="[3ac]"></a>RSAPrivateBlock</STRONG> (Thumb, 558 bytes, Stack size 3168 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateEncrypt
</UL>

<P><STRONG><a name="[3b9]"></a>des_setkey</STRONG> (Thumb, 784 bytes, Stack size 20 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_enc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</UL>

<P><STRONG><a name="[3bb]"></a>des3_set2key</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = des3_set2key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_dec
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_enc
</UL>

<P><STRONG><a name="[3be]"></a>des3_set3key</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc
</UL>

<P><STRONG><a name="[3df]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[3d5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
